{"ast":null,"code":"export default {\n  name: 'PixiSpineComponent',\n  mounted() {\n    this.initPixi();\n  },\n  methods: {\n    async initPixi() {\n      var app = new window.PIXI.Application();\n      await app.init({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n        hello: true\n      });\n      document.body.appendChild(app.view);\n\n      // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n      PIXI.Assets.add({\n        alias: \"spineboyData\",\n        src: \"./assets/spineboy-pro.skel\"\n      });\n      PIXI.Assets.add({\n        alias: \"spineboyAtlas\",\n        src: \"./assets/spineboy-pma.atlas\"\n      });\n      await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n      // Create the spine display object\n      const spineboy = spine.Spine.from({\n        skeleton: \"spineboyData\",\n        atlas: \"spineboyAtlas\",\n        scale: 0.5\n      });\n\n      // Set the default mix time to use when transitioning\n      // from one animation to the next.\n      spineboy.state.data.defaultMix = 0.2;\n\n      // Center the spine object on screen.\n      spineboy.x = window.innerWidth / 2;\n      spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n      // Set animation \"run\" on track 0, looped.\n      spineboy.state.setAnimation(0, \"run\", true);\n\n      // Add the display object to the stage.\n      app.stage.addChild(spineboy);\n    }\n  }\n};","map":{"version":3,"names":["name","mounted","initPixi","methods","app","window","PIXI","Application","init","width","innerWidth","height","innerHeight","resolution","devicePixelRatio","autoDensity","resizeTo","backgroundColor","hello","document","body","appendChild","view","Assets","add","alias","src","load","spineboy","spine","Spine","from","skeleton","atlas","scale","state","data","defaultMix","x","y","getBounds","setAnimation","stage","addChild"],"sources":["src/spine/index.vue"],"sourcesContent":["<template>\n  <canvas ref=\"pixiContainer\" width=\"1458\" height=\"1476\" style=\"width: 729px; height: 738px; touch-action: none; cursor: inherit;\"></canvas>\n</template>\n\n<script>\nexport default {\n  name: 'PixiSpineComponent',\n  mounted() {\n    this.initPixi();\n  },\n  methods: {\n   async initPixi(){\n        var app = new window.PIXI.Application();\n        await app.init({\n          width: window.innerWidth,\n          height: window.innerHeight,\n          resolution: window.devicePixelRatio || 1,\n          autoDensity: true,\n          resizeTo: window,\n          backgroundColor: 0x2c3e50,\n          hello: true,\n        })\n        document.body.appendChild(app.view);\n\n        // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n        PIXI.Assets.add({alias: \"spineboyData\", src: \"./assets/spineboy-pro.skel\"});\n        PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./assets/spineboy-pma.atlas\"});\n        await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n        // Create the spine display object\n        const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n          scale: 0.5,\n        });\n\n        // Set the default mix time to use when transitioning\n        // from one animation to the next.\n        spineboy.state.data.defaultMix = 0.2;\n\n        // Center the spine object on screen.\n        spineboy.x = window.innerWidth / 2;\n        spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n        // Set animation \"run\" on track 0, looped.\n        spineboy.state.setAnimation(0, \"run\", true);\n\n        // Add the display object to the stage.\n        app.stage.addChild(spineboy);\n   }\n  }\n};\n</script>\n"],"mappings":"AAKA;EACAA,IAAA;EACAC,QAAA;IACA,KAAAC,QAAA;EACA;EACAC,OAAA;IACA,MAAAD,SAAA;MACA,IAAAE,GAAA,OAAAC,MAAA,CAAAC,IAAA,CAAAC,WAAA;MACA,MAAAH,GAAA,CAAAI,IAAA;QACAC,KAAA,EAAAJ,MAAA,CAAAK,UAAA;QACAC,MAAA,EAAAN,MAAA,CAAAO,WAAA;QACAC,UAAA,EAAAR,MAAA,CAAAS,gBAAA;QACAC,WAAA;QACAC,QAAA,EAAAX,MAAA;QACAY,eAAA;QACAC,KAAA;MACA;MACAC,QAAA,CAAAC,IAAA,CAAAC,WAAA,CAAAjB,GAAA,CAAAkB,IAAA;;MAEA;MACAhB,IAAA,CAAAiB,MAAA,CAAAC,GAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACApB,IAAA,CAAAiB,MAAA,CAAAC,GAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,MAAApB,IAAA,CAAAiB,MAAA,CAAAI,IAAA;;MAEA;MACA,MAAAC,QAAA,GAAAC,KAAA,CAAAC,KAAA,CAAAC,IAAA;QAAAC,QAAA;QAAAC,KAAA;QACAC,KAAA;MACA;;MAEA;MACA;MACAN,QAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAC,UAAA;;MAEA;MACAT,QAAA,CAAAU,CAAA,GAAAjC,MAAA,CAAAK,UAAA;MACAkB,QAAA,CAAAW,CAAA,GAAAlC,MAAA,CAAAO,WAAA,OAAAgB,QAAA,CAAAY,SAAA,GAAA7B,MAAA;;MAEA;MACAiB,QAAA,CAAAO,KAAA,CAAAM,YAAA;;MAEA;MACArC,GAAA,CAAAsC,KAAA,CAAAC,QAAA,CAAAf,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}