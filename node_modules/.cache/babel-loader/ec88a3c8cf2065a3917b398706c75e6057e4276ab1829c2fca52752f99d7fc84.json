{"ast":null,"code":"/* eslint-disable */\nexport async function initSpine() {\n  var app = new PIXI.Application();\n  await app.init({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    resolution: window.devicePixelRatio || 1,\n    autoDensity: true,\n    resizeTo: window,\n    backgroundColor: 0x2c3e50,\n    hello: true\n  });\n  document.body.appendChild(app.view);\n\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  PIXI.Assets.add({\n    alias: \"sky\",\n    src: \"https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png\"\n  });\n  PIXI.Assets.add({\n    alias: \"background\",\n    src: './starsky.jpg'\n  });\n  PIXI.Assets.add({\n    alias: \"midground\",\n    src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png'\n  });\n  PIXI.Assets.add({\n    alias: \"platform\",\n    src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/platform.png'\n  });\n  await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\"]);\n  const sky = PIXI.Sprite.from('sky');\n  sky.width = app.screen.width;\n  sky.height = app.screen.height;\n  app.stage.addChild(sky);\n  const midground = PIXI.Sprite.from('midground');\n  midground.width = app.screen.width;\n  midground.height = app.screen.height;\n  app.stage.addChild(midground);\n\n  // Create a Sprite for the background using PIXI.Assets\n  const platform = PIXI.Sprite.from('platform');\n  platform.y = 100;\n  platform.width = app.screen.width;\n  platform.height = app.screen.height;\n  app.stage.addChild(platform);\n\n  // Create the spine display object\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.5\n  });\n\n  // Set the default mix time to use when transitioning\n  // from one animation to another.\n  spineboy.state.data.defaultMix = 0.2;\n\n  // Center the Spine object on screen.\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(1, \"aim\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  let isDragging = false;\n  const bones = spineboy.skeleton.bones;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(0, \"idle\", true);\n  spineboy.state.setAnimation(1, \"aim\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  app.stage.on(\"pointerdown\", e => {\n    isDragging = true;\n    setBonePosition(e);\n    spineboy.state.setAnimation(1, \"shoot\", false);\n  });\n  app.stage.on(\"globalpointermove\", e => {\n    if (isDragging) setBonePosition(e);\n    spineboy.state.setAnimation(1, \"aim\", true);\n  });\n  app.stage.on(\"pointerup\", e => isDragging = false);\n  const setBonePosition = e => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(e.data.global.x - spineboy.x, e.data.global.y - spineboy.y);\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n  };\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n  // Add variables for movement, speed.\n  let moveLeft = false;\n  let moveRight = false;\n  const speed = 5;\n\n  // Handle the case that the keyboard keys specified below are pressed.\n  function onKeyDown(key) {\n    spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = true;\n      spineboy.skeleton.scaleX = -1;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = true;\n      spineboy.skeleton.scaleX = 1;\n    }\n  }\n\n  // Handle when the keys are released, if they were pressed.\n  function onKeyUp(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = false;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = false;\n    }\n  }\n\n  // Add event listeners so that the window will correctly handle input.\n  window.addEventListener(\"keydown\", onKeyDown);\n  window.addEventListener(\"keyup\", onKeyUp);\n\n  // Update the application to move Spineboy if input is detected.\n  app.ticker.add(() => {\n    if (moveLeft) {\n      spineboy.x -= speed;\n    }\n    if (moveRight) {\n      spineboy.x += speed;\n    }\n  });\n\n  //time for sack\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"sackData\",\n    src: \"./sack-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"sackAtlas\",\n    src: \"./sack-pma.atlas\"\n  });\n  await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n\n  // Create the spine display object\n  const sack = spine.Spine.from({\n    skeleton: \"sackData\",\n    atlas: \"sackAtlas\",\n    scale: 0.1\n  });\n\n  // Center the spine object on screen.\n  sack.x = window.innerWidth / 2;\n  sack.y = window.innerHeight / 2 + sack.getBounds().height / 2;\n\n  // Set animation \"cape-follow-example\" on track 0, looped.\n  sack.state.setAnimation(0, \"cape-follow-example\", true);\n  // Add the display object to the stage.\n  app.stage.addChild(sack);\n  setInterval(jumpSack, 1000);\n\n  // Function to randomly jump the sack within a specified range\n  function jumpSack() {\n    const jumpDistance = 450; // Define a distance to consider for collision check\n    let newX, newY;\n    let tooClose = true;\n\n    // Keep generating new positions until a valid one is found\n    while (tooClose) {\n      // Randomly generate X and Y positions between 100 and 1000\n      newX = Math.random() * (1000 - 100) + 100; // Random X between 100 and 1000\n      newY = Math.random() * (1000 - 100) + 100; // Random Y between 100 and 1000\n\n      // Calculate distance from the spineboy\n      const distanceX = newX - spineboy.x;\n      const distanceY = newY - spineboy.y;\n      const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n      // Check if the new position is too close to the spineboy\n      if (distance > jumpDistance) {\n        tooClose = false; // Valid position found\n      }\n    }\n\n    // Update sack's position\n    sack.x = newX;\n    sack.y = newY;\n  }\n}","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","window","innerWidth","height","innerHeight","resolution","devicePixelRatio","autoDensity","resizeTo","backgroundColor","hello","document","body","appendChild","view","Assets","add","alias","src","load","sky","Sprite","from","screen","stage","addChild","midground","platform","y","spineboy","spine","Spine","skeleton","atlas","scale","state","data","defaultMix","x","getBounds","setAnimation","hitArea","Rectangle","eventMode","isDragging","bones","on","e","setBonePosition","position","Vector2","global","crosshairBone","findBone","parent","worldToLocal","Promise","resolve","requestAnimationFrame","moveLeft","moveRight","speed","onKeyDown","key","code","scaleX","onKeyUp","addEventListener","ticker","sack","setInterval","jumpSack","jumpDistance","newX","newY","tooClose","Math","random","distanceX","distanceY","distance","sqrt"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\nexport async function initSpine () {\n    var app = new PIXI.Application();\n    await app.init({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n        hello: true,\n    })\n    document.body.appendChild(app.view);\n\n    // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    PIXI.Assets.add({alias: \"sky\", src: \"https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png\" });\n    PIXI.Assets.add({alias: \"background\", src: './starsky.jpg' });\n    PIXI.Assets.add({alias: \"midground\", src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png' });\n    PIXI.Assets.add({alias: \"platform\", src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/platform.png' });\n    \n    await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\"]);\n\n    const sky = PIXI.Sprite.from('sky');\n    sky.width = app.screen.width;\n    sky.height = app.screen.height;\n    app.stage.addChild(sky);\n\n    const midground = PIXI.Sprite.from('midground');\n    midground.width =  app.screen.width;\n    midground.height = app.screen.height;\n    app.stage.addChild(midground);\n\n    // Create a Sprite for the background using PIXI.Assets\n    const platform = PIXI.Sprite.from('platform');\n    platform.y = 100;\n    platform.width =  app.screen.width;\n    platform.height = app.screen.height;\n    app.stage.addChild(platform);\n\n    // Create the spine display object\n    const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n        scale: 0.5,\n    });\n\n    // Set the default mix time to use when transitioning\n    // from one animation to another.\n    spineboy.state.data.defaultMix = 0.2;\n\n    // Center the Spine object on screen.\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n    // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n    spineboy.state.setAnimation(1, \"aim\", true);\n\n    // Add the display object to the stage.\n    app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n    let isDragging = false;\n    const bones = spineboy.skeleton.bones;\n  \n// Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\nspineboy.state.setAnimation(0, \"idle\", true);\nspineboy.state.setAnimation(1, \"aim\", true);\n\n// Add the display object to the stage.\napp.stage.addChild(spineboy);\napp.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n// Make the stage interactive and register pointer events\napp.stage.eventMode = \"dynamic\";\n\napp.stage.on(\"pointerdown\", (e) => {\n    isDragging = true;\n    setBonePosition(e);\n    spineboy.state.setAnimation(1, \"shoot\", false);\n});\n\napp.stage.on(\"globalpointermove\", (e) => {\n    if (isDragging) setBonePosition(e);\n    spineboy.state.setAnimation(1, \"aim\", true);\n});\n\napp.stage.on(\"pointerup\", (e) => (isDragging = false));\n\nconst setBonePosition = (e) => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(\n        e.data.global.x - spineboy.x,\n        e.data.global.y - spineboy.y\n    );\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n};\n\n\n      // wait a frame as pixi bounds do not work until rendered\n      await new Promise((resolve) => requestAnimationFrame(resolve));\n // Add variables for movement, speed.\n let moveLeft = false;\n let moveRight = false;\n const speed = 5;\n\n\n      // Handle the case that the keyboard keys specified below are pressed.\n      function onKeyDown(key) {\n        spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n        if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n          moveLeft = true;\n          spineboy.skeleton.scaleX = -1;\n        } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n          moveRight = true;\n          spineboy.skeleton.scaleX = 1;\n        }\n      }\n\n      // Handle when the keys are released, if they were pressed.\n      function onKeyUp(key) {\n        if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n          moveLeft = false;\n        } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n          moveRight = false;\n        }\n      }\n\n      // Add event listeners so that the window will correctly handle input.\n      window.addEventListener(\"keydown\", onKeyDown);\n      window.addEventListener(\"keyup\", onKeyUp);\n\n      // Update the application to move Spineboy if input is detected.\n      app.ticker.add(() => {\n        if (moveLeft) {\n          spineboy.x -= speed;\n        }\n        if (moveRight) {\n          spineboy.x += speed;\n        }\n      });\n\n\n\n\n\n      //time for sack\n       // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"sackData\", src: \"./sack-pro.skel\"});\n    PIXI.Assets.add({alias: \"sackAtlas\", src: \"./sack-pma.atlas\"});\n    await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n\n    // Create the spine display object\n    const sack = spine.Spine.from({skeleton: \"sackData\", atlas: \"sackAtlas\", \n      scale: 0.1,\n    });\n\n    // Center the spine object on screen.\n    sack.x = window.innerWidth / 2;\n    sack.y = window.innerHeight / 2 + sack.getBounds().height / 2;\n\n    // Set animation \"cape-follow-example\" on track 0, looped.\n    sack.state.setAnimation(0, \"cape-follow-example\", true);\n    // Add the display object to the stage.\n    app.stage.addChild(sack);\n\n\n    setInterval(jumpSack, 1000);\n\n    // Function to randomly jump the sack within a specified range\n    function jumpSack() {\n        const jumpDistance = 450; // Define a distance to consider for collision check\n        let newX, newY;\n        let tooClose = true;\n\n        // Keep generating new positions until a valid one is found\n        while (tooClose) {\n            // Randomly generate X and Y positions between 100 and 1000\n            newX = Math.random() * (1000 - 100) + 100; // Random X between 100 and 1000\n            newY = Math.random() * (1000 - 100) + 100; // Random Y between 100 and 1000\n\n            // Calculate distance from the spineboy\n            const distanceX = newX - spineboy.x;\n            const distanceY = newY - spineboy.y;\n            const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n            // Check if the new position is too close to the spineboy\n            if (distance > jumpDistance) {\n                tooClose = false; // Valid position found\n            }\n        }\n\n        // Update sack's position\n        sack.x = newX;\n        sack.y = newY;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}