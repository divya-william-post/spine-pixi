{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { ExtensionType, LoaderParserPriority, checkExtension, DOMAdapter, extensions } from 'pixi.js';\nfunction isJson(resource) {\n  return Object.prototype.hasOwnProperty.call(resource, \"bones\");\n}\nfunction isBuffer(resource) {\n  return resource instanceof Uint8Array;\n}\nconst spineLoaderExtension = {\n  extension: ExtensionType.Asset,\n  loader: {\n    extension: {\n      type: ExtensionType.LoadParser,\n      priority: LoaderParserPriority.Normal,\n      name: \"spineSkeletonLoader\"\n    },\n    test(url) {\n      return checkExtension(url, \".skel\");\n    },\n    async load(url) {\n      const response = await DOMAdapter.get().fetch(url);\n      const buffer = new Uint8Array(await response.arrayBuffer());\n      return buffer;\n    },\n    testParse(asset, options) {\n      const isJsonSpineModel = checkExtension(options.src, \".json\") && isJson(asset);\n      const isBinarySpineModel = checkExtension(options.src, \".skel\") && isBuffer(asset);\n      return Promise.resolve(isJsonSpineModel || isBinarySpineModel);\n    }\n  }\n};\nextensions.add(spineLoaderExtension);","map":{"version":3,"names":["isJson","resource","Object","prototype","hasOwnProperty","call","isBuffer","Uint8Array","spineLoaderExtension","extension","ExtensionType","Asset","loader","type","LoadParser","priority","LoaderParserPriority","Normal","name","test","url","checkExtension","load","response","DOMAdapter","get","fetch","buffer","arrayBuffer","testParse","asset","options","isJsonSpineModel","src","isBinarySpineModel","Promise","resolve","extensions","add"],"sources":["../../src/assets/skeletonLoader.ts"],"sourcesContent":["/** ****************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\n\nimport {\n    type AssetExtension,\n    checkExtension,\n    DOMAdapter,\n    extensions,\n    ExtensionType,\n    LoaderParserPriority,\n    ResolvedAsset\n} from 'pixi.js';\n\ntype SkeletonJsonAsset = any;\ntype SkeletonBinaryAsset = Uint8Array;\n\nfunction isJson(resource: any): resource is SkeletonJsonAsset\n{\n    return Object.prototype.hasOwnProperty.call(resource, 'bones');\n}\n\nfunction isBuffer(resource: any): resource is SkeletonBinaryAsset\n{\n    return resource instanceof Uint8Array;\n}\n\nconst spineLoaderExtension: AssetExtension<SkeletonJsonAsset | SkeletonBinaryAsset> = {\n    extension: ExtensionType.Asset,\n\n    loader: {\n        extension: {\n            type: ExtensionType.LoadParser,\n            priority: LoaderParserPriority.Normal,\n            name: 'spineSkeletonLoader',\n        },\n\n        test(url)\n        {\n            return checkExtension(url, '.skel');\n        },\n\n        async load(url: string): Promise<SkeletonBinaryAsset>\n        {\n            const response = await DOMAdapter.get().fetch(url);\n\n            const buffer = new Uint8Array(await response.arrayBuffer());\n\n            return buffer;\n        },\n        testParse(asset: unknown, options: ResolvedAsset): Promise<boolean>\n        {\n            const isJsonSpineModel = checkExtension(options.src, '.json') && isJson(asset);\n            const isBinarySpineModel = checkExtension(options.src, '.skel') && isBuffer(asset);\n\n            return Promise.resolve(isJsonSpineModel || isBinarySpineModel);\n        },\n    },\n} as AssetExtension<SkeletonJsonAsset | SkeletonBinaryAsset>;\n\nextensions.add(spineLoaderExtension);\n"],"mappings":";;;;;;;AA0CA,SAASA,OAAOC,QAChB;EACI,OAAOC,MAAO,CAAAC,SAAA,CAAUC,cAAe,CAAAC,IAAA,CAAKJ,QAAA,EAAU,OAAO;AACjE;AAEA,SAASK,SAASL,QAClB;EACI,OAAOA,QAAoB,YAAAM,UAAA;AAC/B;AAEA,MAAMC,oBAAgF;EAClFC,SAAA,EAAWC,aAAc,CAAAC,KAAA;EAEzBC,MAAQ;IACJH,SAAW;MACPI,IAAA,EAAMH,aAAc,CAAAI,UAAA;MACpBC,QAAA,EAAUC,oBAAqB,CAAAC,MAAA;MAC/BC,IAAM;IAAA,CACV;IAEAC,KAAKC,GACL;MACW,OAAAC,cAAA,CAAeD,GAAA,EAAK,OAAO;IAAA,CACtC;IAEA,MAAME,KAAKF,GACX;MACI,MAAMG,QAAA,GAAW,MAAMC,UAAA,CAAWC,GAAI,GAAEC,KAAA,CAAMN,GAAG;MAEjD,MAAMO,MAAA,GAAS,IAAIpB,UAAA,CAAW,MAAMgB,QAAA,CAASK,WAAA,EAAa;MAEnD,OAAAD,MAAA;IAAA,CACX;IACAE,UAAUC,KAAA,EAAgBC,OAC1B;MACI,MAAMC,gBAAA,GAAmBX,cAAe,CAAAU,OAAA,CAAQE,GAAA,EAAK,OAAO,KAAKjC,MAAA,CAAO8B,KAAK;MAC7E,MAAMI,kBAAA,GAAqBb,cAAe,CAAAU,OAAA,CAAQE,GAAA,EAAK,OAAO,KAAK3B,QAAA,CAASwB,KAAK;MAE1E,OAAAK,OAAA,CAAQC,OAAQ,CAAAJ,gBAAA,IAAoBE,kBAAkB;IAAA;EACjE;AAER;AAEAG,UAAA,CAAWC,GAAA,CAAI9B,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}