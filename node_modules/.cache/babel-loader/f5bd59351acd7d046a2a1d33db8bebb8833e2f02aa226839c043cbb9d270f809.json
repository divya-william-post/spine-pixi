{"ast":null,"code":"function filterFromString(text) {\n  switch (text.toLowerCase()) {\n    case \"nearest\":\n      return TextureFilter.Nearest;\n    case \"linear\":\n      return TextureFilter.Linear;\n    case \"mipmap\":\n      return TextureFilter.MipMap;\n    case \"mipmapnearestnearest\":\n      return TextureFilter.MipMapNearestNearest;\n    case \"mipmaplinearnearest\":\n      return TextureFilter.MipMapLinearNearest;\n    case \"mipmapnearestlinear\":\n      return TextureFilter.MipMapNearestLinear;\n    case \"mipmaplinearlinear\":\n      return TextureFilter.MipMapLinearLinear;\n    default:\n      throw new Error(`Unknown texture filter ${text}`);\n  }\n}\nfunction wrapFromString(text) {\n  switch (text.toLowerCase()) {\n    case \"mirroredtepeat\":\n      return TextureWrap.MirroredRepeat;\n    case \"clamptoedge\":\n      return TextureWrap.ClampToEdge;\n    case \"repeat\":\n      return TextureWrap.Repeat;\n    default:\n      throw new Error(`Unknown texture wrap ${text}`);\n  }\n}\nvar TextureFilter = /* @__PURE__ */(TextureFilter2 => {\n  TextureFilter2[TextureFilter2[\"Nearest\"] = 9728] = \"Nearest\";\n  TextureFilter2[TextureFilter2[\"Linear\"] = 9729] = \"Linear\";\n  TextureFilter2[TextureFilter2[\"MipMap\"] = 9987] = \"MipMap\";\n  TextureFilter2[TextureFilter2[\"MipMapNearestNearest\"] = 9984] = \"MipMapNearestNearest\";\n  TextureFilter2[TextureFilter2[\"MipMapLinearNearest\"] = 9985] = \"MipMapLinearNearest\";\n  TextureFilter2[TextureFilter2[\"MipMapNearestLinear\"] = 9986] = \"MipMapNearestLinear\";\n  TextureFilter2[TextureFilter2[\"MipMapLinearLinear\"] = 9987] = \"MipMapLinearLinear\";\n  return TextureFilter2;\n})(TextureFilter || {});\nvar TextureWrap = /* @__PURE__ */(TextureWrap2 => {\n  TextureWrap2[TextureWrap2[\"MirroredRepeat\"] = 33648] = \"MirroredRepeat\";\n  TextureWrap2[TextureWrap2[\"ClampToEdge\"] = 33071] = \"ClampToEdge\";\n  TextureWrap2[TextureWrap2[\"Repeat\"] = 10497] = \"Repeat\";\n  return TextureWrap2;\n})(TextureWrap || {});\nclass TextureRegion {\n  constructor() {\n    // thats for overrides\n    this.size = null;\n    this.names = null;\n    this.values = null;\n    this.renderObject = null;\n  }\n  get width() {\n    const tex = this.texture;\n    if (tex.trim) {\n      return tex.trim.width;\n    }\n    return tex.orig.width;\n  }\n  get height() {\n    const tex = this.texture;\n    if (tex.trim) {\n      return tex.trim.height;\n    }\n    return tex.orig.height;\n  }\n  get u() {\n    return this.texture._uvs.x0;\n  }\n  get v() {\n    return this.texture._uvs.y0;\n  }\n  get u2() {\n    return this.texture._uvs.x2;\n  }\n  get v2() {\n    return this.texture._uvs.y2;\n  }\n  get offsetX() {\n    const tex = this.texture;\n    return tex.trim ? tex.trim.x : 0;\n  }\n  get offsetY() {\n    return this.spineOffsetY;\n  }\n  get pixiOffsetY() {\n    const tex = this.texture;\n    return tex.trim ? tex.trim.y : 0;\n  }\n  get spineOffsetY() {\n    const tex = this.texture;\n    return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n  }\n  get originalWidth() {\n    return this.texture.orig.width;\n  }\n  get originalHeight() {\n    return this.texture.orig.height;\n  }\n  get x() {\n    return this.texture.frame.x;\n  }\n  get y() {\n    return this.texture.frame.y;\n  }\n  get rotate() {\n    return this.texture.rotate !== 0;\n  }\n  get degrees() {\n    return (360 - this.texture.rotate * 45) % 360;\n  }\n}\nexport { TextureFilter, TextureRegion, TextureWrap, filterFromString, wrapFromString };","map":{"version":3,"names":["filterFromString","text","toLowerCase","TextureFilter","Nearest","Linear","MipMap","MipMapNearestNearest","MipMapLinearNearest","MipMapNearestLinear","MipMapLinearLinear","Error","wrapFromString","TextureWrap","MirroredRepeat","ClampToEdge","Repeat","TextureFilter2","TextureWrap2","TextureRegion","constructor","size","names","values","renderObject","width","tex","texture","trim","orig","height","u","_uvs","x0","v","y0","u2","x2","v2","y2","offsetX","x","offsetY","spineOffsetY","pixiOffsetY","y","originalHeight","originalWidth","frame","rotate","degrees"],"sources":["../../src/core/TextureRegion.ts"],"sourcesContent":["import type { Texture, Rectangle } from '@pixi/core';\n\n/**\n * @public\n */\nexport function filterFromString(text: string): TextureFilter {\n    switch (text.toLowerCase()) {\n        case 'nearest':\n            return TextureFilter.Nearest;\n        case 'linear':\n            return TextureFilter.Linear;\n        case 'mipmap':\n            return TextureFilter.MipMap;\n        case 'mipmapnearestnearest':\n            return TextureFilter.MipMapNearestNearest;\n        case 'mipmaplinearnearest':\n            return TextureFilter.MipMapLinearNearest;\n        case 'mipmapnearestlinear':\n            return TextureFilter.MipMapNearestLinear;\n        case 'mipmaplinearlinear':\n            return TextureFilter.MipMapLinearLinear;\n        default:\n            throw new Error(`Unknown texture filter ${text}`);\n    }\n}\n\n/**\n * @public\n */\nexport function wrapFromString(text: string): TextureWrap {\n    switch (text.toLowerCase()) {\n        case 'mirroredtepeat':\n            return TextureWrap.MirroredRepeat;\n        case 'clamptoedge':\n            return TextureWrap.ClampToEdge;\n        case 'repeat':\n            return TextureWrap.Repeat;\n        default:\n            throw new Error(`Unknown texture wrap ${text}`);\n    }\n}\n\n/**\n * @public\n */\nexport enum TextureFilter {\n    Nearest = 9728, // WebGLRenderingContext.NEAREST\n    Linear = 9729, // WebGLRenderingContext.LINEAR\n    MipMap = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n    MipMapNearestNearest = 9984, // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST\n    MipMapLinearNearest = 9985, // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST\n    MipMapNearestLinear = 9986, // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR\n    MipMapLinearLinear = 9987, // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR\n}\n\n/**\n * @public\n */\nexport enum TextureWrap {\n    MirroredRepeat = 33648, // WebGLRenderingContext.MIRRORED_REPEAT\n    ClampToEdge = 33071, // WebGLRenderingContext.CLAMP_TO_EDGE\n    Repeat = 10497, // WebGLRenderingContext.REPEAT\n}\n\n/**\n * @public\n */\nexport class TextureRegion {\n    texture: Texture;\n\n    // thats for overrides\n    size: Rectangle = null;\n\n    names: string[] = null;\n    values: number[][] = null;\n\n    renderObject: any = null;\n\n    get width(): number {\n        const tex = this.texture;\n\n        if (tex.trim) {\n            return tex.trim.width;\n        }\n\n        return tex.orig.width;\n    }\n\n    get height(): number {\n        const tex = this.texture;\n\n        if (tex.trim) {\n            return tex.trim.height;\n        }\n\n        return tex.orig.height;\n    }\n\n    get u(): number {\n        return (this.texture as any)._uvs.x0;\n    }\n\n    get v(): number {\n        return (this.texture as any)._uvs.y0;\n    }\n\n    get u2(): number {\n        return (this.texture as any)._uvs.x2;\n    }\n\n    get v2(): number {\n        return (this.texture as any)._uvs.y2;\n    }\n\n    get offsetX(): number {\n        const tex = this.texture;\n\n        return tex.trim ? tex.trim.x : 0;\n    }\n\n    get offsetY(): number {\n        // console.warn(\"Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.\");\n        return this.spineOffsetY;\n    }\n\n    get pixiOffsetY(): number {\n        const tex = this.texture;\n\n        return tex.trim ? tex.trim.y : 0;\n    }\n\n    get spineOffsetY(): number {\n        const tex = this.texture;\n\n        return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n    }\n\n    get originalWidth(): number {\n        return this.texture.orig.width;\n    }\n\n    get originalHeight(): number {\n        return this.texture.orig.height;\n    }\n\n    get x(): number {\n        return this.texture.frame.x;\n    }\n\n    get y(): number {\n        return this.texture.frame.y;\n    }\n\n    get rotate(): boolean {\n        return this.texture.rotate !== 0;\n    }\n\n    get degrees() {\n        return (360 - this.texture.rotate * 45) % 360;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}