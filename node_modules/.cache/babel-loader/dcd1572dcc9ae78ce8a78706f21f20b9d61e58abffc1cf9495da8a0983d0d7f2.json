{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Utils } from \"../Utils.js\";\n/** The base class for all attachments. */\nexport class Attachment {\n  constructor(name) {\n    _defineProperty(this, \"name\", void 0);\n    if (!name) throw new Error(\"name cannot be null.\");\n    this.name = name;\n  }\n}\n/** Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n * {@link Slot#deform}. */\nexport class VertexAttachment extends Attachment {\n  constructor(name) {\n    super(name);\n    /** The unique ID for this attachment. */\n    _defineProperty(this, \"id\", VertexAttachment.nextID++);\n    /** The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\n     * the vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#bones}. Will be null\n     * if this attachment has no weights. */\n    _defineProperty(this, \"bones\", null);\n    /** The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are `x,y`\n     * entries for each vertex. For a weighted attachment, the values are `x,y,weight` entries for each bone affecting\n     * each vertex. */\n    _defineProperty(this, \"vertices\", []);\n    /** The maximum number of world vertex values that can be output by\n     * {@link #computeWorldVertices()} using the `count` parameter. */\n    _defineProperty(this, \"worldVerticesLength\", 0);\n    /** Timelines for the timeline attachment are also applied to this attachment.\n     * May be null if no attachment-specific timelines should be applied. */\n    _defineProperty(this, \"timelineAttachment\", this);\n  }\n  /** Transforms the attachment's local {@link #vertices} to world coordinates. If the slot's {@link Slot#deform} is\n   * not empty, it is used to deform the vertices.\n   *\n   * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n   * Runtimes Guide.\n   * @param start The index of the first {@link #vertices} value to transform. Each vertex has 2 values, x and y.\n   * @param count The number of world vertex values to output. Must be <= {@link #worldVerticesLength} - `start`.\n   * @param worldVertices The output world vertices. Must have a length >= `offset` + `count` *\n   *           `stride` / 2.\n   * @param offset The `worldVertices` index to begin writing values.\n   * @param stride The number of `worldVertices` entries between the value pairs written. */\n  computeWorldVertices(slot, start, count, worldVertices, offset, stride) {\n    count = offset + (count >> 1) * stride;\n    let skeleton = slot.bone.skeleton;\n    let deformArray = slot.deform;\n    let vertices = this.vertices;\n    let bones = this.bones;\n    if (!bones) {\n      if (deformArray.length > 0) vertices = deformArray;\n      let bone = slot.bone;\n      let x = bone.worldX;\n      let y = bone.worldY;\n      let a = bone.a,\n        b = bone.b,\n        c = bone.c,\n        d = bone.d;\n      for (let v = start, w = offset; w < count; v += 2, w += stride) {\n        let vx = vertices[v],\n          vy = vertices[v + 1];\n        worldVertices[w] = vx * a + vy * b + x;\n        worldVertices[w + 1] = vx * c + vy * d + y;\n      }\n      return;\n    }\n    let v = 0,\n      skip = 0;\n    for (let i = 0; i < start; i += 2) {\n      let n = bones[v];\n      v += n + 1;\n      skip += n;\n    }\n    let skeletonBones = skeleton.bones;\n    if (deformArray.length == 0) {\n      for (let w = offset, b = skip * 3; w < count; w += stride) {\n        let wx = 0,\n          wy = 0;\n        let n = bones[v++];\n        n += v;\n        for (; v < n; v++, b += 3) {\n          let bone = skeletonBones[bones[v]];\n          let vx = vertices[b],\n            vy = vertices[b + 1],\n            weight = vertices[b + 2];\n          wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n          wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n        }\n        worldVertices[w] = wx;\n        worldVertices[w + 1] = wy;\n      }\n    } else {\n      let deform = deformArray;\n      for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n        let wx = 0,\n          wy = 0;\n        let n = bones[v++];\n        n += v;\n        for (; v < n; v++, b += 3, f += 2) {\n          let bone = skeletonBones[bones[v]];\n          let vx = vertices[b] + deform[f],\n            vy = vertices[b + 1] + deform[f + 1],\n            weight = vertices[b + 2];\n          wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;\n          wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;\n        }\n        worldVertices[w] = wx;\n        worldVertices[w + 1] = wy;\n      }\n    }\n  }\n  /** Does not copy id (generated) or name (set on construction). **/\n  copyTo(attachment) {\n    if (this.bones) {\n      attachment.bones = new Array(this.bones.length);\n      Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\n    } else attachment.bones = null;\n    if (this.vertices) {\n      attachment.vertices = Utils.newFloatArray(this.vertices.length);\n      Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\n    }\n    attachment.worldVerticesLength = this.worldVerticesLength;\n    attachment.timelineAttachment = this.timelineAttachment;\n  }\n}\n_defineProperty(VertexAttachment, \"nextID\", 0);","map":{"version":3,"names":["Utils","Attachment","constructor","name","_defineProperty","Error","VertexAttachment","nextID","computeWorldVertices","slot","start","count","worldVertices","offset","stride","skeleton","bone","deformArray","deform","vertices","bones","length","x","worldX","y","worldY","a","b","c","d","v","w","vx","vy","skip","i","n","skeletonBones","wx","wy","weight","f","copyTo","attachment","Array","arrayCopy","newFloatArray","worldVerticesLength","timelineAttachment"],"sources":["../../src/attachments/Attachment.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}