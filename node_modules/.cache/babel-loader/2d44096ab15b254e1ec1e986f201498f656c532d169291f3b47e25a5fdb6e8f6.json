{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, AttachmentTimeline, RGBATimeline, RGBTimeline, AlphaTimeline, RGBA2Timeline, RGB2Timeline, RotateTimeline, TranslateTimeline, TranslateXTimeline, TranslateYTimeline, ScaleTimeline, ScaleXTimeline, ScaleYTimeline, ShearTimeline, ShearXTimeline, ShearYTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline } from \"./Animation.js\";\nimport { BoneData, TransformMode } from \"./BoneData.js\";\nimport { EventData } from \"./EventData.js\";\nimport { Event } from \"./Event.js\";\nimport { IkConstraintData } from \"./IkConstraintData.js\";\nimport { PathConstraintData, PositionMode, SpacingMode, RotateMode } from \"./PathConstraintData.js\";\nimport { SkeletonData } from \"./SkeletonData.js\";\nimport { Skin } from \"./Skin.js\";\nimport { SlotData, BlendMode } from \"./SlotData.js\";\nimport { TransformConstraintData } from \"./TransformConstraintData.js\";\nimport { Utils, Color } from \"./Utils.js\";\nimport { Sequence, SequenceMode } from \"./attachments/Sequence.js\";\nimport { SequenceTimeline } from \"./Animation.js\";\n/** Loads skeleton data in the Spine JSON format.\n *\n * See [Spine JSON format](http://esotericsoftware.com/spine-json-format) and\n * [JSON and binary data](http://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data) in the Spine\n * Runtimes Guide. */\nexport class SkeletonJson {\n  constructor(attachmentLoader) {\n    _defineProperty(this, \"attachmentLoader\", void 0);\n    /** Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\n     * runtime than were used in Spine.\n     *\n     * See [Scaling](http://esotericsoftware.com/spine-loading-skeleton-data#Scaling) in the Spine Runtimes Guide. */\n    _defineProperty(this, \"scale\", 1);\n    _defineProperty(this, \"linkedMeshes\", new Array());\n    this.attachmentLoader = attachmentLoader;\n  }\n  readSkeletonData(json) {\n    let scale = this.scale;\n    let skeletonData = new SkeletonData();\n    let root = typeof json === \"string\" ? JSON.parse(json) : json;\n    // Skeleton\n    let skeletonMap = root.skeleton;\n    if (skeletonMap) {\n      skeletonData.hash = skeletonMap.hash;\n      skeletonData.version = skeletonMap.spine;\n      skeletonData.x = skeletonMap.x;\n      skeletonData.y = skeletonMap.y;\n      skeletonData.width = skeletonMap.width;\n      skeletonData.height = skeletonMap.height;\n      skeletonData.fps = skeletonMap.fps;\n      skeletonData.imagesPath = skeletonMap.images;\n    }\n    // Bones\n    if (root.bones) {\n      for (let i = 0; i < root.bones.length; i++) {\n        let boneMap = root.bones[i];\n        let parent = null;\n        let parentName = getValue(boneMap, \"parent\", null);\n        if (parentName) parent = skeletonData.findBone(parentName);\n        let data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n        data.length = getValue(boneMap, \"length\", 0) * scale;\n        data.x = getValue(boneMap, \"x\", 0) * scale;\n        data.y = getValue(boneMap, \"y\", 0) * scale;\n        data.rotation = getValue(boneMap, \"rotation\", 0);\n        data.scaleX = getValue(boneMap, \"scaleX\", 1);\n        data.scaleY = getValue(boneMap, \"scaleY\", 1);\n        data.shearX = getValue(boneMap, \"shearX\", 0);\n        data.shearY = getValue(boneMap, \"shearY\", 0);\n        data.transformMode = Utils.enumValue(TransformMode, getValue(boneMap, \"transform\", \"Normal\"));\n        data.skinRequired = getValue(boneMap, \"skin\", false);\n        let color = getValue(boneMap, \"color\", null);\n        if (color) data.color.setFromString(color);\n        skeletonData.bones.push(data);\n      }\n    }\n    // Slots.\n    if (root.slots) {\n      for (let i = 0; i < root.slots.length; i++) {\n        let slotMap = root.slots[i];\n        let boneData = skeletonData.findBone(slotMap.bone);\n        if (!boneData) throw new Error(`Couldn't find bone ${slotMap.bone} for slot ${slotMap.name}`);\n        let data = new SlotData(skeletonData.slots.length, slotMap.name, boneData);\n        let color = getValue(slotMap, \"color\", null);\n        if (color) data.color.setFromString(color);\n        let dark = getValue(slotMap, \"dark\", null);\n        if (dark) data.darkColor = Color.fromString(dark);\n        data.attachmentName = getValue(slotMap, \"attachment\", null);\n        data.blendMode = Utils.enumValue(BlendMode, getValue(slotMap, \"blend\", \"normal\"));\n        skeletonData.slots.push(data);\n      }\n    }\n    // IK constraints\n    if (root.ik) {\n      for (let i = 0; i < root.ik.length; i++) {\n        let constraintMap = root.ik[i];\n        let data = new IkConstraintData(constraintMap.name);\n        data.order = getValue(constraintMap, \"order\", 0);\n        data.skinRequired = getValue(constraintMap, \"skin\", false);\n        for (let ii = 0; ii < constraintMap.bones.length; ii++) {\n          let bone = skeletonData.findBone(constraintMap.bones[ii]);\n          if (!bone) throw new Error(`Couldn't find bone ${constraintMap.bones[ii]} for IK constraint ${constraintMap.name}.`);\n          data.bones.push(bone);\n        }\n        let target = skeletonData.findBone(constraintMap.target);\n        ;\n        if (!target) throw new Error(`Couldn't find target bone ${constraintMap.target} for IK constraint ${constraintMap.name}.`);\n        data.target = target;\n        data.mix = getValue(constraintMap, \"mix\", 1);\n        data.softness = getValue(constraintMap, \"softness\", 0) * scale;\n        data.bendDirection = getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n        data.compress = getValue(constraintMap, \"compress\", false);\n        data.stretch = getValue(constraintMap, \"stretch\", false);\n        data.uniform = getValue(constraintMap, \"uniform\", false);\n        skeletonData.ikConstraints.push(data);\n      }\n    }\n    // Transform constraints.\n    if (root.transform) {\n      for (let i = 0; i < root.transform.length; i++) {\n        let constraintMap = root.transform[i];\n        let data = new TransformConstraintData(constraintMap.name);\n        data.order = getValue(constraintMap, \"order\", 0);\n        data.skinRequired = getValue(constraintMap, \"skin\", false);\n        for (let ii = 0; ii < constraintMap.bones.length; ii++) {\n          let boneName = constraintMap.bones[ii];\n          let bone = skeletonData.findBone(boneName);\n          if (!bone) throw new Error(`Couldn't find bone ${boneName} for transform constraint ${constraintMap.name}.`);\n          data.bones.push(bone);\n        }\n        let targetName = constraintMap.target;\n        let target = skeletonData.findBone(targetName);\n        if (!target) throw new Error(`Couldn't find target bone ${targetName} for transform constraint ${constraintMap.name}.`);\n        data.target = target;\n        data.local = getValue(constraintMap, \"local\", false);\n        data.relative = getValue(constraintMap, \"relative\", false);\n        data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n        data.offsetX = getValue(constraintMap, \"x\", 0) * scale;\n        data.offsetY = getValue(constraintMap, \"y\", 0) * scale;\n        data.offsetScaleX = getValue(constraintMap, \"scaleX\", 0);\n        data.offsetScaleY = getValue(constraintMap, \"scaleY\", 0);\n        data.offsetShearY = getValue(constraintMap, \"shearY\", 0);\n        data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n        data.mixX = getValue(constraintMap, \"mixX\", 1);\n        data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n        data.mixScaleX = getValue(constraintMap, \"mixScaleX\", 1);\n        data.mixScaleY = getValue(constraintMap, \"mixScaleY\", data.mixScaleX);\n        data.mixShearY = getValue(constraintMap, \"mixShearY\", 1);\n        skeletonData.transformConstraints.push(data);\n      }\n    }\n    // Path constraints.\n    if (root.path) {\n      for (let i = 0; i < root.path.length; i++) {\n        let constraintMap = root.path[i];\n        let data = new PathConstraintData(constraintMap.name);\n        data.order = getValue(constraintMap, \"order\", 0);\n        data.skinRequired = getValue(constraintMap, \"skin\", false);\n        for (let ii = 0; ii < constraintMap.bones.length; ii++) {\n          let boneName = constraintMap.bones[ii];\n          let bone = skeletonData.findBone(boneName);\n          if (!bone) throw new Error(`Couldn't find bone ${boneName} for path constraint ${constraintMap.name}.`);\n          data.bones.push(bone);\n        }\n        let targetName = constraintMap.target;\n        let target = skeletonData.findSlot(targetName);\n        if (!target) throw new Error(`Couldn't find target slot ${targetName} for path constraint ${constraintMap.name}.`);\n        data.target = target;\n        data.positionMode = Utils.enumValue(PositionMode, getValue(constraintMap, \"positionMode\", \"Percent\"));\n        data.spacingMode = Utils.enumValue(SpacingMode, getValue(constraintMap, \"spacingMode\", \"Length\"));\n        data.rotateMode = Utils.enumValue(RotateMode, getValue(constraintMap, \"rotateMode\", \"Tangent\"));\n        data.offsetRotation = getValue(constraintMap, \"rotation\", 0);\n        data.position = getValue(constraintMap, \"position\", 0);\n        if (data.positionMode == PositionMode.Fixed) data.position *= scale;\n        data.spacing = getValue(constraintMap, \"spacing\", 0);\n        if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed) data.spacing *= scale;\n        data.mixRotate = getValue(constraintMap, \"mixRotate\", 1);\n        data.mixX = getValue(constraintMap, \"mixX\", 1);\n        data.mixY = getValue(constraintMap, \"mixY\", data.mixX);\n        skeletonData.pathConstraints.push(data);\n      }\n    }\n    // Skins.\n    if (root.skins) {\n      for (let i = 0; i < root.skins.length; i++) {\n        let skinMap = root.skins[i];\n        let skin = new Skin(skinMap.name);\n        if (skinMap.bones) {\n          for (let ii = 0; ii < skinMap.bones.length; ii++) {\n            let boneName = skinMap.bones[ii];\n            let bone = skeletonData.findBone(boneName);\n            if (!bone) throw new Error(`Couldn't find bone ${boneName} for skin ${skinMap.name}.`);\n            skin.bones.push(bone);\n          }\n        }\n        if (skinMap.ik) {\n          for (let ii = 0; ii < skinMap.ik.length; ii++) {\n            let constraintName = skinMap.ik[ii];\n            let constraint = skeletonData.findIkConstraint(constraintName);\n            if (!constraint) throw new Error(`Couldn't find IK constraint ${constraintName} for skin ${skinMap.name}.`);\n            skin.constraints.push(constraint);\n          }\n        }\n        if (skinMap.transform) {\n          for (let ii = 0; ii < skinMap.transform.length; ii++) {\n            let constraintName = skinMap.transform[ii];\n            let constraint = skeletonData.findTransformConstraint(constraintName);\n            if (!constraint) throw new Error(`Couldn't find transform constraint ${constraintName} for skin ${skinMap.name}.`);\n            skin.constraints.push(constraint);\n          }\n        }\n        if (skinMap.path) {\n          for (let ii = 0; ii < skinMap.path.length; ii++) {\n            let constraintName = skinMap.path[ii];\n            let constraint = skeletonData.findPathConstraint(constraintName);\n            if (!constraint) throw new Error(`Couldn't find path constraint ${constraintName} for skin ${skinMap.name}.`);\n            skin.constraints.push(constraint);\n          }\n        }\n        for (let slotName in skinMap.attachments) {\n          let slot = skeletonData.findSlot(slotName);\n          if (!slot) throw new Error(`Couldn't find slot ${slotName} for skin ${skinMap.name}.`);\n          let slotMap = skinMap.attachments[slotName];\n          for (let entryName in slotMap) {\n            let attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n            if (attachment) skin.setAttachment(slot.index, entryName, attachment);\n          }\n        }\n        skeletonData.skins.push(skin);\n        if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n      }\n    }\n    // Linked meshes.\n    for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n      let linkedMesh = this.linkedMeshes[i];\n      let skin = !linkedMesh.skin ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n      if (!skin) throw new Error(`Skin not found: ${linkedMesh.skin}`);\n      let parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n      if (!parent) throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\n      linkedMesh.mesh.timelineAttachment = linkedMesh.inheritTimeline ? parent : linkedMesh.mesh;\n      linkedMesh.mesh.setParentMesh(parent);\n      if (linkedMesh.mesh.region != null) linkedMesh.mesh.updateRegion();\n    }\n    this.linkedMeshes.length = 0;\n    // Events.\n    if (root.events) {\n      for (let eventName in root.events) {\n        let eventMap = root.events[eventName];\n        let data = new EventData(eventName);\n        data.intValue = getValue(eventMap, \"int\", 0);\n        data.floatValue = getValue(eventMap, \"float\", 0);\n        data.stringValue = getValue(eventMap, \"string\", \"\");\n        data.audioPath = getValue(eventMap, \"audio\", null);\n        if (data.audioPath) {\n          data.volume = getValue(eventMap, \"volume\", 1);\n          data.balance = getValue(eventMap, \"balance\", 0);\n        }\n        skeletonData.events.push(data);\n      }\n    }\n    // Animations.\n    if (root.animations) {\n      for (let animationName in root.animations) {\n        let animationMap = root.animations[animationName];\n        this.readAnimation(animationMap, animationName, skeletonData);\n      }\n    }\n    return skeletonData;\n  }\n  readAttachment(map, skin, slotIndex, name, skeletonData) {\n    let scale = this.scale;\n    name = getValue(map, \"name\", name);\n    switch (getValue(map, \"type\", \"region\")) {\n      case \"region\":\n        {\n          let path = getValue(map, \"path\", name);\n          let sequence = this.readSequence(getValue(map, \"sequence\", null));\n          let region = this.attachmentLoader.newRegionAttachment(skin, name, path, sequence);\n          if (!region) return null;\n          region.path = path;\n          region.x = getValue(map, \"x\", 0) * scale;\n          region.y = getValue(map, \"y\", 0) * scale;\n          region.scaleX = getValue(map, \"scaleX\", 1);\n          region.scaleY = getValue(map, \"scaleY\", 1);\n          region.rotation = getValue(map, \"rotation\", 0);\n          region.width = map.width * scale;\n          region.height = map.height * scale;\n          region.sequence = sequence;\n          let color = getValue(map, \"color\", null);\n          if (color) region.color.setFromString(color);\n          if (region.region != null) region.updateRegion();\n          return region;\n        }\n      case \"boundingbox\":\n        {\n          let box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n          if (!box) return null;\n          this.readVertices(map, box, map.vertexCount << 1);\n          let color = getValue(map, \"color\", null);\n          if (color) box.color.setFromString(color);\n          return box;\n        }\n      case \"mesh\":\n      case \"linkedmesh\":\n        {\n          let path = getValue(map, \"path\", name);\n          let sequence = this.readSequence(getValue(map, \"sequence\", null));\n          let mesh = this.attachmentLoader.newMeshAttachment(skin, name, path, sequence);\n          if (!mesh) return null;\n          mesh.path = path;\n          let color = getValue(map, \"color\", null);\n          if (color) mesh.color.setFromString(color);\n          mesh.width = getValue(map, \"width\", 0) * scale;\n          mesh.height = getValue(map, \"height\", 0) * scale;\n          mesh.sequence = sequence;\n          let parent = getValue(map, \"parent\", null);\n          if (parent) {\n            this.linkedMeshes.push(new LinkedMesh(mesh, getValue(map, \"skin\", null), slotIndex, parent, getValue(map, \"timelines\", true)));\n            return mesh;\n          }\n          let uvs = map.uvs;\n          this.readVertices(map, mesh, uvs.length);\n          mesh.triangles = map.triangles;\n          mesh.regionUVs = uvs;\n          if (mesh.region != null) mesh.updateRegion();\n          mesh.edges = getValue(map, \"edges\", null);\n          mesh.hullLength = getValue(map, \"hull\", 0) * 2;\n          return mesh;\n        }\n      case \"path\":\n        {\n          let path = this.attachmentLoader.newPathAttachment(skin, name);\n          if (!path) return null;\n          path.closed = getValue(map, \"closed\", false);\n          path.constantSpeed = getValue(map, \"constantSpeed\", true);\n          let vertexCount = map.vertexCount;\n          this.readVertices(map, path, vertexCount << 1);\n          let lengths = Utils.newArray(vertexCount / 3, 0);\n          for (let i = 0; i < map.lengths.length; i++) lengths[i] = map.lengths[i] * scale;\n          path.lengths = lengths;\n          let color = getValue(map, \"color\", null);\n          if (color) path.color.setFromString(color);\n          return path;\n        }\n      case \"point\":\n        {\n          let point = this.attachmentLoader.newPointAttachment(skin, name);\n          if (!point) return null;\n          point.x = getValue(map, \"x\", 0) * scale;\n          point.y = getValue(map, \"y\", 0) * scale;\n          point.rotation = getValue(map, \"rotation\", 0);\n          let color = getValue(map, \"color\", null);\n          if (color) point.color.setFromString(color);\n          return point;\n        }\n      case \"clipping\":\n        {\n          let clip = this.attachmentLoader.newClippingAttachment(skin, name);\n          if (!clip) return null;\n          let end = getValue(map, \"end\", null);\n          if (end) clip.endSlot = skeletonData.findSlot(end);\n          let vertexCount = map.vertexCount;\n          this.readVertices(map, clip, vertexCount << 1);\n          let color = getValue(map, \"color\", null);\n          if (color) clip.color.setFromString(color);\n          return clip;\n        }\n    }\n    return null;\n  }\n  readSequence(map) {\n    if (map == null) return null;\n    let sequence = new Sequence(getValue(map, \"count\", 0));\n    sequence.start = getValue(map, \"start\", 1);\n    sequence.digits = getValue(map, \"digits\", 0);\n    sequence.setupIndex = getValue(map, \"setup\", 0);\n    return sequence;\n  }\n  readVertices(map, attachment, verticesLength) {\n    let scale = this.scale;\n    attachment.worldVerticesLength = verticesLength;\n    let vertices = map.vertices;\n    if (verticesLength == vertices.length) {\n      let scaledVertices = Utils.toFloatArray(vertices);\n      if (scale != 1) {\n        for (let i = 0, n = vertices.length; i < n; i++) scaledVertices[i] *= scale;\n      }\n      attachment.vertices = scaledVertices;\n      return;\n    }\n    let weights = new Array();\n    let bones = new Array();\n    for (let i = 0, n = vertices.length; i < n;) {\n      let boneCount = vertices[i++];\n      bones.push(boneCount);\n      for (let nn = i + boneCount * 4; i < nn; i += 4) {\n        bones.push(vertices[i]);\n        weights.push(vertices[i + 1] * scale);\n        weights.push(vertices[i + 2] * scale);\n        weights.push(vertices[i + 3]);\n      }\n    }\n    attachment.bones = bones;\n    attachment.vertices = Utils.toFloatArray(weights);\n  }\n  readAnimation(map, name, skeletonData) {\n    let scale = this.scale;\n    let timelines = new Array();\n    // Slot timelines.\n    if (map.slots) {\n      for (let slotName in map.slots) {\n        let slotMap = map.slots[slotName];\n        let slot = skeletonData.findSlot(slotName);\n        if (!slot) throw new Error(\"Slot not found: \" + slotName);\n        let slotIndex = slot.index;\n        for (let timelineName in slotMap) {\n          let timelineMap = slotMap[timelineName];\n          if (!timelineMap) continue;\n          let frames = timelineMap.length;\n          if (timelineName == \"attachment\") {\n            let timeline = new AttachmentTimeline(frames, slotIndex);\n            for (let frame = 0; frame < frames; frame++) {\n              let keyMap = timelineMap[frame];\n              timeline.setFrame(frame, getValue(keyMap, \"time\", 0), getValue(keyMap, \"name\", null));\n            }\n            timelines.push(timeline);\n          } else if (timelineName == \"rgba\") {\n            let timeline = new RGBATimeline(frames, frames << 2, slotIndex);\n            let keyMap = timelineMap[0];\n            let time = getValue(keyMap, \"time\", 0);\n            let color = Color.fromString(keyMap.color);\n            for (let frame = 0, bezier = 0;; frame++) {\n              timeline.setFrame(frame, time, color.r, color.g, color.b, color.a);\n              let nextMap = timelineMap[frame + 1];\n              if (!nextMap) {\n                timeline.shrink(bezier);\n                break;\n              }\n              let time2 = getValue(nextMap, \"time\", 0);\n              let newColor = Color.fromString(nextMap.color);\n              let curve = keyMap.curve;\n              if (curve) {\n                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n              }\n              time = time2;\n              color = newColor;\n              keyMap = nextMap;\n            }\n            timelines.push(timeline);\n          } else if (timelineName == \"rgb\") {\n            let timeline = new RGBTimeline(frames, frames * 3, slotIndex);\n            let keyMap = timelineMap[0];\n            let time = getValue(keyMap, \"time\", 0);\n            let color = Color.fromString(keyMap.color);\n            for (let frame = 0, bezier = 0;; frame++) {\n              timeline.setFrame(frame, time, color.r, color.g, color.b);\n              let nextMap = timelineMap[frame + 1];\n              if (!nextMap) {\n                timeline.shrink(bezier);\n                break;\n              }\n              let time2 = getValue(nextMap, \"time\", 0);\n              let newColor = Color.fromString(nextMap.color);\n              let curve = keyMap.curve;\n              if (curve) {\n                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n              }\n              time = time2;\n              color = newColor;\n              keyMap = nextMap;\n            }\n            timelines.push(timeline);\n          } else if (timelineName == \"alpha\") {\n            timelines.push(readTimeline1(timelineMap, new AlphaTimeline(frames, frames, slotIndex), 0, 1));\n          } else if (timelineName == \"rgba2\") {\n            let timeline = new RGBA2Timeline(frames, frames * 7, slotIndex);\n            let keyMap = timelineMap[0];\n            let time = getValue(keyMap, \"time\", 0);\n            let color = Color.fromString(keyMap.light);\n            let color2 = Color.fromString(keyMap.dark);\n            for (let frame = 0, bezier = 0;; frame++) {\n              timeline.setFrame(frame, time, color.r, color.g, color.b, color.a, color2.r, color2.g, color2.b);\n              let nextMap = timelineMap[frame + 1];\n              if (!nextMap) {\n                timeline.shrink(bezier);\n                break;\n              }\n              let time2 = getValue(nextMap, \"time\", 0);\n              let newColor = Color.fromString(nextMap.light);\n              let newColor2 = Color.fromString(nextMap.dark);\n              let curve = keyMap.curve;\n              if (curve) {\n                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color.a, newColor.a, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.r, newColor2.r, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.g, newColor2.g, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 6, time, time2, color2.b, newColor2.b, 1);\n              }\n              time = time2;\n              color = newColor;\n              color2 = newColor2;\n              keyMap = nextMap;\n            }\n            timelines.push(timeline);\n          } else if (timelineName == \"rgb2\") {\n            let timeline = new RGB2Timeline(frames, frames * 6, slotIndex);\n            let keyMap = timelineMap[0];\n            let time = getValue(keyMap, \"time\", 0);\n            let color = Color.fromString(keyMap.light);\n            let color2 = Color.fromString(keyMap.dark);\n            for (let frame = 0, bezier = 0;; frame++) {\n              timeline.setFrame(frame, time, color.r, color.g, color.b, color2.r, color2.g, color2.b);\n              let nextMap = timelineMap[frame + 1];\n              if (!nextMap) {\n                timeline.shrink(bezier);\n                break;\n              }\n              let time2 = getValue(nextMap, \"time\", 0);\n              let newColor = Color.fromString(nextMap.light);\n              let newColor2 = Color.fromString(nextMap.dark);\n              let curve = keyMap.curve;\n              if (curve) {\n                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, color.r, newColor.r, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, color.g, newColor.g, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, color.b, newColor.b, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, color2.r, newColor2.r, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, color2.g, newColor2.g, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, color2.b, newColor2.b, 1);\n              }\n              time = time2;\n              color = newColor;\n              color2 = newColor2;\n              keyMap = nextMap;\n            }\n            timelines.push(timeline);\n          }\n        }\n      }\n    }\n    // Bone timelines.\n    if (map.bones) {\n      for (let boneName in map.bones) {\n        let boneMap = map.bones[boneName];\n        let bone = skeletonData.findBone(boneName);\n        if (!bone) throw new Error(\"Bone not found: \" + boneName);\n        let boneIndex = bone.index;\n        for (let timelineName in boneMap) {\n          let timelineMap = boneMap[timelineName];\n          let frames = timelineMap.length;\n          if (frames == 0) continue;\n          if (timelineName === \"rotate\") {\n            timelines.push(readTimeline1(timelineMap, new RotateTimeline(frames, frames, boneIndex), 0, 1));\n          } else if (timelineName === \"translate\") {\n            let timeline = new TranslateTimeline(frames, frames << 1, boneIndex);\n            timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, scale));\n          } else if (timelineName === \"translatex\") {\n            let timeline = new TranslateXTimeline(frames, frames, boneIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n          } else if (timelineName === \"translatey\") {\n            let timeline = new TranslateYTimeline(frames, frames, boneIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 0, scale));\n          } else if (timelineName === \"scale\") {\n            let timeline = new ScaleTimeline(frames, frames << 1, boneIndex);\n            timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 1, 1));\n          } else if (timelineName === \"scalex\") {\n            let timeline = new ScaleXTimeline(frames, frames, boneIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n          } else if (timelineName === \"scaley\") {\n            let timeline = new ScaleYTimeline(frames, frames, boneIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 1, 1));\n          } else if (timelineName === \"shear\") {\n            let timeline = new ShearTimeline(frames, frames << 1, boneIndex);\n            timelines.push(readTimeline2(timelineMap, timeline, \"x\", \"y\", 0, 1));\n          } else if (timelineName === \"shearx\") {\n            let timeline = new ShearXTimeline(frames, frames, boneIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n          } else if (timelineName === \"sheary\") {\n            let timeline = new ShearYTimeline(frames, frames, boneIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 0, 1));\n          }\n        }\n      }\n    }\n    // IK constraint timelines.\n    if (map.ik) {\n      for (let constraintName in map.ik) {\n        let constraintMap = map.ik[constraintName];\n        let keyMap = constraintMap[0];\n        if (!keyMap) continue;\n        let constraint = skeletonData.findIkConstraint(constraintName);\n        if (!constraint) throw new Error(\"IK Constraint not found: \" + constraintName);\n        let constraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n        let timeline = new IkConstraintTimeline(constraintMap.length, constraintMap.length << 1, constraintIndex);\n        let time = getValue(keyMap, \"time\", 0);\n        let mix = getValue(keyMap, \"mix\", 1);\n        let softness = getValue(keyMap, \"softness\", 0) * scale;\n        for (let frame = 0, bezier = 0;; frame++) {\n          timeline.setFrame(frame, time, mix, softness, getValue(keyMap, \"bendPositive\", true) ? 1 : -1, getValue(keyMap, \"compress\", false), getValue(keyMap, \"stretch\", false));\n          let nextMap = constraintMap[frame + 1];\n          if (!nextMap) {\n            timeline.shrink(bezier);\n            break;\n          }\n          let time2 = getValue(nextMap, \"time\", 0);\n          let mix2 = getValue(nextMap, \"mix\", 1);\n          let softness2 = getValue(nextMap, \"softness\", 0) * scale;\n          let curve = keyMap.curve;\n          if (curve) {\n            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mix, mix2, 1);\n            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, softness, softness2, scale);\n          }\n          time = time2;\n          mix = mix2;\n          softness = softness2;\n          keyMap = nextMap;\n        }\n        timelines.push(timeline);\n      }\n    }\n    // Transform constraint timelines.\n    if (map.transform) {\n      for (let constraintName in map.transform) {\n        let timelineMap = map.transform[constraintName];\n        let keyMap = timelineMap[0];\n        if (!keyMap) continue;\n        let constraint = skeletonData.findTransformConstraint(constraintName);\n        if (!constraint) throw new Error(\"Transform constraint not found: \" + constraintName);\n        let constraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n        let timeline = new TransformConstraintTimeline(timelineMap.length, timelineMap.length * 6, constraintIndex);\n        let time = getValue(keyMap, \"time\", 0);\n        let mixRotate = getValue(keyMap, \"mixRotate\", 1);\n        let mixX = getValue(keyMap, \"mixX\", 1);\n        let mixY = getValue(keyMap, \"mixY\", mixX);\n        let mixScaleX = getValue(keyMap, \"mixScaleX\", 1);\n        let mixScaleY = getValue(keyMap, \"mixScaleY\", mixScaleX);\n        let mixShearY = getValue(keyMap, \"mixShearY\", 1);\n        for (let frame = 0, bezier = 0;; frame++) {\n          timeline.setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY);\n          let nextMap = timelineMap[frame + 1];\n          if (!nextMap) {\n            timeline.shrink(bezier);\n            break;\n          }\n          let time2 = getValue(nextMap, \"time\", 0);\n          let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n          let mixX2 = getValue(nextMap, \"mixX\", 1);\n          let mixY2 = getValue(nextMap, \"mixY\", mixX2);\n          let mixScaleX2 = getValue(nextMap, \"mixScaleX\", 1);\n          let mixScaleY2 = getValue(nextMap, \"mixScaleY\", mixScaleX2);\n          let mixShearY2 = getValue(nextMap, \"mixShearY\", 1);\n          let curve = keyMap.curve;\n          if (curve) {\n            bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n            bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n            bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n            bezier = readCurve(curve, timeline, bezier, frame, 3, time, time2, mixScaleX, mixScaleX2, 1);\n            bezier = readCurve(curve, timeline, bezier, frame, 4, time, time2, mixScaleY, mixScaleY2, 1);\n            bezier = readCurve(curve, timeline, bezier, frame, 5, time, time2, mixShearY, mixShearY2, 1);\n          }\n          time = time2;\n          mixRotate = mixRotate2;\n          mixX = mixX2;\n          mixY = mixY2;\n          mixScaleX = mixScaleX2;\n          mixScaleY = mixScaleY2;\n          mixScaleX = mixScaleX2;\n          keyMap = nextMap;\n        }\n        timelines.push(timeline);\n      }\n    }\n    // Path constraint timelines.\n    if (map.path) {\n      for (let constraintName in map.path) {\n        let constraintMap = map.path[constraintName];\n        let constraint = skeletonData.findPathConstraint(constraintName);\n        if (!constraint) throw new Error(\"Path constraint not found: \" + constraintName);\n        let constraintIndex = skeletonData.pathConstraints.indexOf(constraint);\n        for (let timelineName in constraintMap) {\n          let timelineMap = constraintMap[timelineName];\n          let keyMap = timelineMap[0];\n          if (!keyMap) continue;\n          let frames = timelineMap.length;\n          if (timelineName === \"position\") {\n            let timeline = new PathConstraintPositionTimeline(frames, frames, constraintIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.positionMode == PositionMode.Fixed ? scale : 1));\n          } else if (timelineName === \"spacing\") {\n            let timeline = new PathConstraintSpacingTimeline(frames, frames, constraintIndex);\n            timelines.push(readTimeline1(timelineMap, timeline, 0, constraint.spacingMode == SpacingMode.Length || constraint.spacingMode == SpacingMode.Fixed ? scale : 1));\n          } else if (timelineName === \"mix\") {\n            let timeline = new PathConstraintMixTimeline(frames, frames * 3, constraintIndex);\n            let time = getValue(keyMap, \"time\", 0);\n            let mixRotate = getValue(keyMap, \"mixRotate\", 1);\n            let mixX = getValue(keyMap, \"mixX\", 1);\n            let mixY = getValue(keyMap, \"mixY\", mixX);\n            for (let frame = 0, bezier = 0;; frame++) {\n              timeline.setFrame(frame, time, mixRotate, mixX, mixY);\n              let nextMap = timelineMap[frame + 1];\n              if (!nextMap) {\n                timeline.shrink(bezier);\n                break;\n              }\n              let time2 = getValue(nextMap, \"time\", 0);\n              let mixRotate2 = getValue(nextMap, \"mixRotate\", 1);\n              let mixX2 = getValue(nextMap, \"mixX\", 1);\n              let mixY2 = getValue(nextMap, \"mixY\", mixX2);\n              let curve = keyMap.curve;\n              if (curve) {\n                bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, mixRotate, mixRotate2, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, mixX, mixX2, 1);\n                bezier = readCurve(curve, timeline, bezier, frame, 2, time, time2, mixY, mixY2, 1);\n              }\n              time = time2;\n              mixRotate = mixRotate2;\n              mixX = mixX2;\n              mixY = mixY2;\n              keyMap = nextMap;\n            }\n            timelines.push(timeline);\n          }\n        }\n      }\n    }\n    // Attachment timelines.\n    if (map.attachments) {\n      for (let attachmentsName in map.attachments) {\n        let attachmentsMap = map.attachments[attachmentsName];\n        let skin = skeletonData.findSkin(attachmentsName);\n        if (!skin) throw new Error(\"Skin not found: \" + attachmentsName);\n        for (let slotMapName in attachmentsMap) {\n          let slotMap = attachmentsMap[slotMapName];\n          let slot = skeletonData.findSlot(slotMapName);\n          if (!slot) throw new Error(\"Slot not found: \" + slotMapName);\n          let slotIndex = slot.index;\n          for (let attachmentMapName in slotMap) {\n            let attachmentMap = slotMap[attachmentMapName];\n            let attachment = skin.getAttachment(slotIndex, attachmentMapName);\n            for (let timelineMapName in attachmentMap) {\n              let timelineMap = attachmentMap[timelineMapName];\n              let keyMap = timelineMap[0];\n              if (!keyMap) continue;\n              if (timelineMapName == \"deform\") {\n                let weighted = attachment.bones;\n                let vertices = attachment.vertices;\n                let deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n                let timeline = new DeformTimeline(timelineMap.length, timelineMap.length, slotIndex, attachment);\n                let time = getValue(keyMap, \"time\", 0);\n                for (let frame = 0, bezier = 0;; frame++) {\n                  let deform;\n                  let verticesValue = getValue(keyMap, \"vertices\", null);\n                  if (!verticesValue) deform = weighted ? Utils.newFloatArray(deformLength) : vertices;else {\n                    deform = Utils.newFloatArray(deformLength);\n                    let start = getValue(keyMap, \"offset\", 0);\n                    Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n                    if (scale != 1) {\n                      for (let i = start, n = i + verticesValue.length; i < n; i++) deform[i] *= scale;\n                    }\n                    if (!weighted) {\n                      for (let i = 0; i < deformLength; i++) deform[i] += vertices[i];\n                    }\n                  }\n                  timeline.setFrame(frame, time, deform);\n                  let nextMap = timelineMap[frame + 1];\n                  if (!nextMap) {\n                    timeline.shrink(bezier);\n                    break;\n                  }\n                  let time2 = getValue(nextMap, \"time\", 0);\n                  let curve = keyMap.curve;\n                  if (curve) bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, 0, 1, 1);\n                  time = time2;\n                  keyMap = nextMap;\n                }\n                timelines.push(timeline);\n              } else if (timelineMapName == \"sequence\") {\n                let timeline = new SequenceTimeline(timelineMap.length, slotIndex, attachment);\n                let lastDelay = 0;\n                for (let frame = 0; frame < timelineMap.length; frame++) {\n                  let delay = getValue(keyMap, \"delay\", lastDelay);\n                  let time = getValue(keyMap, \"time\", 0);\n                  let mode = SequenceMode[getValue(keyMap, \"mode\", \"hold\")];\n                  let index = getValue(keyMap, \"index\", 0);\n                  timeline.setFrame(frame, time, mode, index, delay);\n                  lastDelay = delay;\n                  keyMap = timelineMap[frame + 1];\n                }\n                timelines.push(timeline);\n              }\n            }\n          }\n        }\n      }\n    }\n    // Draw order timelines.\n    if (map.drawOrder) {\n      let timeline = new DrawOrderTimeline(map.drawOrder.length);\n      let slotCount = skeletonData.slots.length;\n      let frame = 0;\n      for (let i = 0; i < map.drawOrder.length; i++, frame++) {\n        let drawOrderMap = map.drawOrder[i];\n        let drawOrder = null;\n        let offsets = getValue(drawOrderMap, \"offsets\", null);\n        if (offsets) {\n          drawOrder = Utils.newArray(slotCount, -1);\n          let unchanged = Utils.newArray(slotCount - offsets.length, 0);\n          let originalIndex = 0,\n            unchangedIndex = 0;\n          for (let ii = 0; ii < offsets.length; ii++) {\n            let offsetMap = offsets[ii];\n            let slot = skeletonData.findSlot(offsetMap.slot);\n            if (!slot) throw new Error(\"Slot not found: \" + slot);\n            let slotIndex = slot.index;\n            // Collect unchanged items.\n            while (originalIndex != slotIndex) unchanged[unchangedIndex++] = originalIndex++;\n            // Set changed items.\n            drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n          }\n          // Collect remaining unchanged items.\n          while (originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;\n          // Fill in unchanged items.\n          for (let ii = slotCount - 1; ii >= 0; ii--) if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n        }\n        timeline.setFrame(frame, getValue(drawOrderMap, \"time\", 0), drawOrder);\n      }\n      timelines.push(timeline);\n    }\n    // Event timelines.\n    if (map.events) {\n      let timeline = new EventTimeline(map.events.length);\n      let frame = 0;\n      for (let i = 0; i < map.events.length; i++, frame++) {\n        let eventMap = map.events[i];\n        let eventData = skeletonData.findEvent(eventMap.name);\n        if (!eventData) throw new Error(\"Event not found: \" + eventMap.name);\n        let event = new Event(Utils.toSinglePrecision(getValue(eventMap, \"time\", 0)), eventData);\n        event.intValue = getValue(eventMap, \"int\", eventData.intValue);\n        event.floatValue = getValue(eventMap, \"float\", eventData.floatValue);\n        event.stringValue = getValue(eventMap, \"string\", eventData.stringValue);\n        if (event.data.audioPath) {\n          event.volume = getValue(eventMap, \"volume\", 1);\n          event.balance = getValue(eventMap, \"balance\", 0);\n        }\n        timeline.setFrame(frame, event);\n      }\n      timelines.push(timeline);\n    }\n    let duration = 0;\n    for (let i = 0, n = timelines.length; i < n; i++) duration = Math.max(duration, timelines[i].getDuration());\n    skeletonData.animations.push(new Animation(name, timelines, duration));\n  }\n}\nclass LinkedMesh {\n  constructor(mesh, skin, slotIndex, parent, inheritDeform) {\n    _defineProperty(this, \"parent\", void 0);\n    _defineProperty(this, \"skin\", void 0);\n    _defineProperty(this, \"slotIndex\", void 0);\n    _defineProperty(this, \"mesh\", void 0);\n    _defineProperty(this, \"inheritTimeline\", void 0);\n    this.mesh = mesh;\n    this.skin = skin;\n    this.slotIndex = slotIndex;\n    this.parent = parent;\n    this.inheritTimeline = inheritDeform;\n  }\n}\nfunction readTimeline1(keys, timeline, defaultValue, scale) {\n  let keyMap = keys[0];\n  let time = getValue(keyMap, \"time\", 0);\n  let value = getValue(keyMap, \"value\", defaultValue) * scale;\n  let bezier = 0;\n  for (let frame = 0;; frame++) {\n    timeline.setFrame(frame, time, value);\n    let nextMap = keys[frame + 1];\n    if (!nextMap) {\n      timeline.shrink(bezier);\n      return timeline;\n    }\n    let time2 = getValue(nextMap, \"time\", 0);\n    let value2 = getValue(nextMap, \"value\", defaultValue) * scale;\n    if (keyMap.curve) bezier = readCurve(keyMap.curve, timeline, bezier, frame, 0, time, time2, value, value2, scale);\n    time = time2;\n    value = value2;\n    keyMap = nextMap;\n  }\n}\nfunction readTimeline2(keys, timeline, name1, name2, defaultValue, scale) {\n  let keyMap = keys[0];\n  let time = getValue(keyMap, \"time\", 0);\n  let value1 = getValue(keyMap, name1, defaultValue) * scale;\n  let value2 = getValue(keyMap, name2, defaultValue) * scale;\n  let bezier = 0;\n  for (let frame = 0;; frame++) {\n    timeline.setFrame(frame, time, value1, value2);\n    let nextMap = keys[frame + 1];\n    if (!nextMap) {\n      timeline.shrink(bezier);\n      return timeline;\n    }\n    let time2 = getValue(nextMap, \"time\", 0);\n    let nvalue1 = getValue(nextMap, name1, defaultValue) * scale;\n    let nvalue2 = getValue(nextMap, name2, defaultValue) * scale;\n    let curve = keyMap.curve;\n    if (curve) {\n      bezier = readCurve(curve, timeline, bezier, frame, 0, time, time2, value1, nvalue1, scale);\n      bezier = readCurve(curve, timeline, bezier, frame, 1, time, time2, value2, nvalue2, scale);\n    }\n    time = time2;\n    value1 = nvalue1;\n    value2 = nvalue2;\n    keyMap = nextMap;\n  }\n}\nfunction readCurve(curve, timeline, bezier, frame, value, time1, time2, value1, value2, scale) {\n  if (curve == \"stepped\") {\n    timeline.setStepped(frame);\n    return bezier;\n  }\n  let i = value << 2;\n  let cx1 = curve[i];\n  let cy1 = curve[i + 1] * scale;\n  let cx2 = curve[i + 2];\n  let cy2 = curve[i + 3] * scale;\n  timeline.setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2);\n  return bezier + 1;\n}\nfunction getValue(map, property, defaultValue) {\n  return map[property] !== undefined ? map[property] : defaultValue;\n}","map":{"version":3,"names":["Animation","AttachmentTimeline","RGBATimeline","RGBTimeline","AlphaTimeline","RGBA2Timeline","RGB2Timeline","RotateTimeline","TranslateTimeline","TranslateXTimeline","TranslateYTimeline","ScaleTimeline","ScaleXTimeline","ScaleYTimeline","ShearTimeline","ShearXTimeline","ShearYTimeline","IkConstraintTimeline","TransformConstraintTimeline","PathConstraintPositionTimeline","PathConstraintSpacingTimeline","PathConstraintMixTimeline","DeformTimeline","DrawOrderTimeline","EventTimeline","BoneData","TransformMode","EventData","Event","IkConstraintData","PathConstraintData","PositionMode","SpacingMode","RotateMode","SkeletonData","Skin","SlotData","BlendMode","TransformConstraintData","Utils","Color","Sequence","SequenceMode","SequenceTimeline","SkeletonJson","constructor","attachmentLoader","_defineProperty","Array","readSkeletonData","json","scale","skeletonData","root","JSON","parse","skeletonMap","skeleton","hash","version","spine","x","y","width","height","fps","imagesPath","images","bones","i","length","boneMap","parent","parentName","getValue","findBone","data","name","rotation","scaleX","scaleY","shearX","shearY","transformMode","enumValue","skinRequired","color","setFromString","push","slots","slotMap","boneData","bone","Error","dark","darkColor","fromString","attachmentName","blendMode","ik","constraintMap","order","ii","target","mix","softness","bendDirection","compress","stretch","uniform","ikConstraints","transform","boneName","targetName","local","relative","offsetRotation","offsetX","offsetY","offsetScaleX","offsetScaleY","offsetShearY","mixRotate","mixX","mixY","mixScaleX","mixScaleY","mixShearY","transformConstraints","path","findSlot","positionMode","spacingMode","rotateMode","position","Fixed","spacing","Length","pathConstraints","skins","skinMap","skin","constraintName","constraint","findIkConstraint","constraints","findTransformConstraint","findPathConstraint","slotName","attachments","slot","entryName","attachment","readAttachment","index","setAttachment","defaultSkin","n","linkedMeshes","linkedMesh","findSkin","getAttachment","slotIndex","mesh","timelineAttachment","inheritTimeline","setParentMesh","region","updateRegion","events","eventName","eventMap","intValue","floatValue","stringValue","audioPath","volume","balance","animations","animationName","animationMap","readAnimation","map","sequence","readSequence","newRegionAttachment","box","newBoundingBoxAttachment","readVertices","vertexCount","newMeshAttachment","LinkedMesh","uvs","triangles","regionUVs","edges","hullLength","newPathAttachment","closed","constantSpeed","lengths","newArray","point","newPointAttachment","clip","newClippingAttachment","end","endSlot","start","digits","setupIndex","verticesLength","worldVerticesLength","vertices","scaledVertices","toFloatArray","weights","boneCount","nn","timelines","timelineName","timelineMap","frames","timeline","frame","keyMap","setFrame","time","bezier","r","g","b","a","nextMap","shrink","time2","newColor","curve","readCurve","readTimeline1","light","color2","newColor2","boneIndex","readTimeline2","constraintIndex","indexOf","mix2","softness2","mixRotate2","mixX2","mixY2","mixScaleX2","mixScaleY2","mixShearY2","attachmentsName","attachmentsMap","slotMapName","attachmentMapName","attachmentMap","timelineMapName","weighted","deformLength","deform","verticesValue","newFloatArray","arrayCopy","lastDelay","delay","mode","drawOrder","slotCount","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","offset","eventData","findEvent","event","toSinglePrecision","duration","Math","max","getDuration","inheritDeform","keys","defaultValue","value","value2","name1","name2","value1","nvalue1","nvalue2","time1","setStepped","cx1","cy1","cx2","cy2","setBezier","property","undefined"],"sources":["../src/SkeletonJson.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}