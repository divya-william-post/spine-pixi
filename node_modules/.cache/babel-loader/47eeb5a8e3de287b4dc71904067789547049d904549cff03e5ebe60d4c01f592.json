{"ast":null,"code":"class SkeletonData {\n  constructor() {\n    /** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\n    this.name = null;\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n    this.bones = new Array();\n    // Ordered parents first.\n    /** The skeleton's slots. */\n    this.slots = new Array();\n    // Setup pose draw order.\n    this.skins = new Array();\n    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n     *\n     * See {@link Skeleton#getAttachmentByName()}.\n     * May be null. */\n    this.defaultSkin = null;\n    /** The skeleton's events. */\n    this.events = new Array();\n    /** The skeleton's animations. */\n    this.animations = new Array();\n    /** The skeleton's IK constraints. */\n    this.ikConstraints = new Array();\n    /** The skeleton's transform constraints. */\n    this.transformConstraints = new Array();\n    /** The skeleton's path constraints. */\n    this.pathConstraints = new Array();\n    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n    this.x = 0;\n    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n    this.y = 0;\n    /** The width of the skeleton's axis aligned bounding box in the setup pose. */\n    this.width = 0;\n    /** The height of the skeleton's axis aligned bounding box in the setup pose. */\n    this.height = 0;\n    /** The Spine version used to export the skeleton data, or null. */\n    this.version = null;\n    /** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\n    this.hash = null;\n    // Nonessential\n    /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\n    this.fps = 0;\n    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n    this.imagesPath = null;\n    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n    this.audioPath = null;\n  }\n  /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n   * multiple times.\n   * @returns May be null. */\n  findBone(boneName) {\n    if (!boneName) throw new Error(\"boneName cannot be null.\");\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      if (bone.name == boneName) return bone;\n    }\n    return null;\n  }\n  /** removed from spine-ts runtime **/\n  findBoneIndex(boneName) {\n    if (!boneName) throw new Error(\"boneName cannot be null.\");\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) if (bones[i].name == boneName) return i;\n    return -1;\n  }\n  /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n   * multiple times.\n   * @returns May be null. */\n  findSlot(slotName) {\n    if (!slotName) throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++) {\n      const slot = slots[i];\n      if (slot.name == slotName) return slot;\n    }\n    return null;\n  }\n  /** removed from spine-ts runtime **/\n  findSlotIndex(slotName) {\n    if (!slotName) throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++) if (slots[i].name == slotName) return i;\n    return -1;\n  }\n  /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n   * multiple times.\n   * @returns May be null. */\n  findSkin(skinName) {\n    if (!skinName) throw new Error(\"skinName cannot be null.\");\n    const skins = this.skins;\n    for (let i = 0, n = skins.length; i < n; i++) {\n      const skin = skins[i];\n      if (skin.name == skinName) return skin;\n    }\n    return null;\n  }\n  /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n   * multiple times.\n   * @returns May be null. */\n  findEvent(eventDataName) {\n    if (!eventDataName) throw new Error(\"eventDataName cannot be null.\");\n    const events = this.events;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      if (event.name == eventDataName) return event;\n    }\n    return null;\n  }\n  /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n   * call it multiple times.\n   * @returns May be null. */\n  findAnimation(animationName) {\n    if (!animationName) throw new Error(\"animationName cannot be null.\");\n    const animations = this.animations;\n    for (let i = 0, n = animations.length; i < n; i++) {\n      const animation = animations[i];\n      if (animation.name == animationName) return animation;\n    }\n    return null;\n  }\n  /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n   * than to call it multiple times.\n   * @return May be null. */\n  findIkConstraint(constraintName) {\n    if (!constraintName) throw new Error(\"constraintName cannot be null.\");\n    const ikConstraints = this.ikConstraints;\n    for (let i = 0, n = ikConstraints.length; i < n; i++) {\n      const constraint = ikConstraints[i];\n      if (constraint.name == constraintName) return constraint;\n    }\n    return null;\n  }\n  /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n   * this method than to call it multiple times.\n   * @return May be null. */\n  findTransformConstraint(constraintName) {\n    if (!constraintName) throw new Error(\"constraintName cannot be null.\");\n    const transformConstraints = this.transformConstraints;\n    for (let i = 0, n = transformConstraints.length; i < n; i++) {\n      const constraint = transformConstraints[i];\n      if (constraint.name == constraintName) return constraint;\n    }\n    return null;\n  }\n  /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n   * than to call it multiple times.\n   * @return May be null. */\n  findPathConstraint(constraintName) {\n    if (!constraintName) throw new Error(\"constraintName cannot be null.\");\n    const pathConstraints = this.pathConstraints;\n    for (let i = 0, n = pathConstraints.length; i < n; i++) {\n      const constraint = pathConstraints[i];\n      if (constraint.name == constraintName) return constraint;\n    }\n    return null;\n  }\n  /** removed from spine-ts runtime **/\n  findPathConstraintIndex(pathConstraintName) {\n    if (pathConstraintName == null) throw new Error(\"pathConstraintName cannot be null.\");\n    const pathConstraints = this.pathConstraints;\n    for (let i = 0, n = pathConstraints.length; i < n; i++) if (pathConstraints[i].name == pathConstraintName) return i;\n    return -1;\n  }\n}\nexport { SkeletonData };","map":{"version":3,"names":["SkeletonData","constructor","name","bones","Array","slots","skins","defaultSkin","events","animations","ikConstraints","transformConstraints","pathConstraints","x","y","width","height","version","hash","fps","imagesPath","audioPath","findBone","boneName","Error","i","n","length","bone","findBoneIndex","findSlot","slotName","slot","findSlotIndex","findSkin","skinName","skin","findEvent","eventDataName","event","findAnimation","animationName","animation","findIkConstraint","constraintName","constraint","findTransformConstraint","findPathConstraint","findPathConstraintIndex","pathConstraintName"],"sources":["../../src/core/SkeletonData.ts"],"sourcesContent":["import type { ISkeletonData } from '@pixi-spine/base';\nimport type { Animation } from './Animation';\nimport type { BoneData } from './BoneData';\nimport type { SlotData } from './SlotData';\nimport type { Skin } from './Skin';\nimport type { EventData } from './EventData';\nimport type { IkConstraintData } from './IkConstraintData';\nimport type { TransformConstraintData } from './TransformConstraintData';\nimport type { PathConstraintData } from './PathConstraintData';\n\n/** Stores the setup pose and all of the stateless data for a skeleton.\n *\n * See [Data objects](http://esotericsoftware.com/spine-runtime-architecture#Data-objects) in the Spine Runtimes\n * Guide.\n * @public\n * */\nexport class SkeletonData implements ISkeletonData<BoneData, SlotData, Skin, Animation, EventData, IkConstraintData, TransformConstraintData, PathConstraintData> {\n    /** The skeleton's name, which by default is the name of the skeleton data file, if possible. May be null. */\n    name: string | null = null;\n\n    /** The skeleton's bones, sorted parent first. The root bone is always the first bone. */\n    bones = new Array<BoneData>(); // Ordered parents first.\n\n    /** The skeleton's slots. */\n    slots = new Array<SlotData>(); // Setup pose draw order.\n    skins = new Array<Skin>();\n\n    /** The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n     *\n     * See {@link Skeleton#getAttachmentByName()}.\n     * May be null. */\n    defaultSkin: Skin | null = null;\n\n    /** The skeleton's events. */\n    events = new Array<EventData>();\n\n    /** The skeleton's animations. */\n    animations = new Array<Animation>();\n\n    /** The skeleton's IK constraints. */\n    ikConstraints = new Array<IkConstraintData>();\n\n    /** The skeleton's transform constraints. */\n    transformConstraints = new Array<TransformConstraintData>();\n\n    /** The skeleton's path constraints. */\n    pathConstraints = new Array<PathConstraintData>();\n\n    /** The X coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n    x = 0;\n\n    /** The Y coordinate of the skeleton's axis aligned bounding box in the setup pose. */\n    y = 0;\n\n    /** The width of the skeleton's axis aligned bounding box in the setup pose. */\n    width = 0;\n\n    /** The height of the skeleton's axis aligned bounding box in the setup pose. */\n    height = 0;\n\n    /** The Spine version used to export the skeleton data, or null. */\n    version: string | null = null;\n\n    /** The skeleton data hash. This value will change if any of the skeleton data has changed. May be null. */\n    hash: string | null = null;\n\n    // Nonessential\n    /** The dopesheet FPS in Spine. Available only when nonessential data was exported. */\n    fps = 0;\n\n    /** The path to the images directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n    imagesPath: string | null = null;\n\n    /** The path to the audio directory as defined in Spine. Available only when nonessential data was exported. May be null. */\n    audioPath: string | null = null;\n\n    /** Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findBone(boneName: string) {\n        if (!boneName) throw new Error('boneName cannot be null.');\n        const bones = this.bones;\n\n        for (let i = 0, n = bones.length; i < n; i++) {\n            const bone = bones[i];\n\n            if (bone.name == boneName) return bone;\n        }\n\n        return null;\n    }\n\n    /** removed from spine-ts runtime **/\n    findBoneIndex(boneName: string) {\n        if (!boneName) throw new Error('boneName cannot be null.');\n        const bones = this.bones;\n\n        for (let i = 0, n = bones.length; i < n; i++) if (bones[i].name == boneName) return i;\n\n        return -1;\n    }\n\n    /** Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findSlot(slotName: string) {\n        if (!slotName) throw new Error('slotName cannot be null.');\n        const slots = this.slots;\n\n        for (let i = 0, n = slots.length; i < n; i++) {\n            const slot = slots[i];\n\n            if (slot.name == slotName) return slot;\n        }\n\n        return null;\n    }\n\n    /** removed from spine-ts runtime **/\n    findSlotIndex(slotName: string) {\n        if (!slotName) throw new Error('slotName cannot be null.');\n        const slots = this.slots;\n\n        for (let i = 0, n = slots.length; i < n; i++) if (slots[i].name == slotName) return i;\n\n        return -1;\n    }\n\n    /** Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findSkin(skinName: string) {\n        if (!skinName) throw new Error('skinName cannot be null.');\n        const skins = this.skins;\n\n        for (let i = 0, n = skins.length; i < n; i++) {\n            const skin = skins[i];\n\n            if (skin.name == skinName) return skin;\n        }\n\n        return null;\n    }\n\n    /** Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\n     * multiple times.\n     * @returns May be null. */\n    findEvent(eventDataName: string) {\n        if (!eventDataName) throw new Error('eventDataName cannot be null.');\n        const events = this.events;\n\n        for (let i = 0, n = events.length; i < n; i++) {\n            const event = events[i];\n\n            if (event.name == eventDataName) return event;\n        }\n\n        return null;\n    }\n\n    /** Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\n     * call it multiple times.\n     * @returns May be null. */\n    findAnimation(animationName: string) {\n        if (!animationName) throw new Error('animationName cannot be null.');\n        const animations = this.animations;\n\n        for (let i = 0, n = animations.length; i < n; i++) {\n            const animation = animations[i];\n\n            if (animation.name == animationName) return animation;\n        }\n\n        return null;\n    }\n\n    /** Finds an IK constraint by comparing each IK constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findIkConstraint(constraintName: string) {\n        if (!constraintName) throw new Error('constraintName cannot be null.');\n        const ikConstraints = this.ikConstraints;\n\n        for (let i = 0, n = ikConstraints.length; i < n; i++) {\n            const constraint = ikConstraints[i];\n\n            if (constraint.name == constraintName) return constraint;\n        }\n\n        return null;\n    }\n\n    /** Finds a transform constraint by comparing each transform constraint's name. It is more efficient to cache the results of\n     * this method than to call it multiple times.\n     * @return May be null. */\n    findTransformConstraint(constraintName: string) {\n        if (!constraintName) throw new Error('constraintName cannot be null.');\n        const transformConstraints = this.transformConstraints;\n\n        for (let i = 0, n = transformConstraints.length; i < n; i++) {\n            const constraint = transformConstraints[i];\n\n            if (constraint.name == constraintName) return constraint;\n        }\n\n        return null;\n    }\n\n    /** Finds a path constraint by comparing each path constraint's name. It is more efficient to cache the results of this method\n     * than to call it multiple times.\n     * @return May be null. */\n    findPathConstraint(constraintName: string) {\n        if (!constraintName) throw new Error('constraintName cannot be null.');\n        const pathConstraints = this.pathConstraints;\n\n        for (let i = 0, n = pathConstraints.length; i < n; i++) {\n            const constraint = pathConstraints[i];\n\n            if (constraint.name == constraintName) return constraint;\n        }\n\n        return null;\n    }\n\n    /** removed from spine-ts runtime **/ findPathConstraintIndex(pathConstraintName: string) {\n        if (pathConstraintName == null) throw new Error('pathConstraintName cannot be null.');\n        const pathConstraints = this.pathConstraints;\n\n        for (let i = 0, n = pathConstraints.length; i < n; i++) if (pathConstraints[i].name == pathConstraintName) return i;\n\n        return -1;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}