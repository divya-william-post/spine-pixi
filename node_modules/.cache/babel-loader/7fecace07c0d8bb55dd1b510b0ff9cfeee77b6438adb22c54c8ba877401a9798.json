{"ast":null,"code":"// Map keyboard key codes to controller's state keys\nconst keyMap = {\n  Space: 'space',\n  KeyW: 'up',\n  ArrowUp: 'up',\n  KeyA: 'left',\n  ArrowLeft: 'left',\n  KeyS: 'down',\n  ArrowDown: 'down',\n  KeyD: 'right',\n  ArrowRight: 'right'\n};\n\n// Class for handling keyboard inputs.\nexport class Controller {\n  constructor() {\n    // The controller's state.\n    this.keys = {\n      up: {\n        pressed: false,\n        doubleTap: false,\n        timestamp: 0\n      },\n      left: {\n        pressed: false,\n        doubleTap: false,\n        timestamp: 0\n      },\n      down: {\n        pressed: false,\n        doubleTap: false,\n        timestamp: 0\n      },\n      right: {\n        pressed: false,\n        doubleTap: false,\n        timestamp: 0\n      },\n      space: {\n        pressed: false,\n        doubleTap: false,\n        timestamp: 0\n      }\n    };\n\n    // Register event listeners for keydown and keyup events.\n    window.addEventListener('keydown', event => this.keydownHandler(event));\n    window.addEventListener('keyup', event => this.keyupHandler(event));\n  }\n  keydownHandler(event) {\n    const key = keyMap[event.code];\n    if (!key) return;\n    const now = Date.now();\n\n    // If not already in the double-tap state, toggle the double tap state if the key was pressed twice within 300ms.\n    this.keys[key].doubleTap = this.keys[key].doubleTap || now - this.keys[key].timestamp < 300;\n\n    // Toggle on the key pressed state.\n    this.keys[key].pressed = true;\n  }\n  keyupHandler(event) {\n    const key = keyMap[event.code];\n    if (!key) return;\n    const now = Date.now();\n\n    // Reset the key pressed state.\n    this.keys[key].pressed = false;\n\n    // Reset double tap only if the key is in the double-tap state.\n    if (this.keys[key].doubleTap) this.keys[key].doubleTap = false;\n    // Otherwise, update the timestamp to track the time difference till the next potential key down.\n    else this.keys[key].timestamp = now;\n  }\n}","map":{"version":3,"names":["keyMap","Space","KeyW","ArrowUp","KeyA","ArrowLeft","KeyS","ArrowDown","KeyD","ArrowRight","Controller","constructor","keys","up","pressed","doubleTap","timestamp","left","down","right","space","window","addEventListener","event","keydownHandler","keyupHandler","key","code","now","Date"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/components/Controller.js"],"sourcesContent":["// Map keyboard key codes to controller's state keys\nconst keyMap = {\n    Space: 'space',\n    KeyW: 'up',\n    ArrowUp: 'up',\n    KeyA: 'left',\n    ArrowLeft: 'left',\n    KeyS: 'down',\n    ArrowDown: 'down',\n    KeyD: 'right',\n    ArrowRight: 'right',\n};\n\n// Class for handling keyboard inputs.\nexport class Controller\n{\n    constructor()\n    {\n        // The controller's state.\n        this.keys = {\n            up: { pressed: false, doubleTap: false, timestamp: 0 },\n            left: { pressed: false, doubleTap: false, timestamp: 0 },\n            down: { pressed: false, doubleTap: false, timestamp: 0 },\n            right: { pressed: false, doubleTap: false, timestamp: 0 },\n            space: { pressed: false, doubleTap: false, timestamp: 0 },\n        };\n\n        // Register event listeners for keydown and keyup events.\n        window.addEventListener('keydown', (event) => this.keydownHandler(event));\n        window.addEventListener('keyup', (event) => this.keyupHandler(event));\n    }\n\n    keydownHandler(event)\n    {\n        const key = keyMap[event.code];\n\n        if (!key) return;\n\n        const now = Date.now();\n\n        // If not already in the double-tap state, toggle the double tap state if the key was pressed twice within 300ms.\n        this.keys[key].doubleTap = this.keys[key].doubleTap || now - this.keys[key].timestamp < 300;\n\n        // Toggle on the key pressed state.\n        this.keys[key].pressed = true;\n    }\n\n    keyupHandler(event)\n    {\n        const key = keyMap[event.code];\n\n        if (!key) return;\n\n        const now = Date.now();\n\n        // Reset the key pressed state.\n        this.keys[key].pressed = false;\n\n        // Reset double tap only if the key is in the double-tap state.\n        if (this.keys[key].doubleTap) this.keys[key].doubleTap = false;\n        // Otherwise, update the timestamp to track the time difference till the next potential key down.\n        else this.keys[key].timestamp = now;\n    }\n}\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAG;EACXC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE,MAAM;EACjBC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE,MAAM;EACjBC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE;AAChB,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,CACvB;EACIC,WAAWA,CAAA,EACX;IACI;IACA,IAAI,CAACC,IAAI,GAAG;MACRC,EAAE,EAAE;QAAEC,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAE,CAAC;MACtDC,IAAI,EAAE;QAAEH,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAE,CAAC;MACxDE,IAAI,EAAE;QAAEJ,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAE,CAAC;MACxDG,KAAK,EAAE;QAAEL,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAE,CAAC;MACzDI,KAAK,EAAE;QAAEN,OAAO,EAAE,KAAK;QAAEC,SAAS,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAE;IAC5D,CAAC;;IAED;IACAK,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,CAAC;IACzEF,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK,IAAI,CAACE,YAAY,CAACF,KAAK,CAAC,CAAC;EACzE;EAEAC,cAAcA,CAACD,KAAK,EACpB;IACI,MAAMG,GAAG,GAAG1B,MAAM,CAACuB,KAAK,CAACI,IAAI,CAAC;IAE9B,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;;IAEtB;IACA,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAC,CAACX,SAAS,GAAG,IAAI,CAACH,IAAI,CAACc,GAAG,CAAC,CAACX,SAAS,IAAIa,GAAG,GAAG,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAC,CAACV,SAAS,GAAG,GAAG;;IAE3F;IACA,IAAI,CAACJ,IAAI,CAACc,GAAG,CAAC,CAACZ,OAAO,GAAG,IAAI;EACjC;EAEAW,YAAYA,CAACF,KAAK,EAClB;IACI,MAAMG,GAAG,GAAG1B,MAAM,CAACuB,KAAK,CAACI,IAAI,CAAC;IAE9B,IAAI,CAACD,GAAG,EAAE;IAEV,MAAME,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;;IAEtB;IACA,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAC,CAACZ,OAAO,GAAG,KAAK;;IAE9B;IACA,IAAI,IAAI,CAACF,IAAI,CAACc,GAAG,CAAC,CAACX,SAAS,EAAE,IAAI,CAACH,IAAI,CAACc,GAAG,CAAC,CAACX,SAAS,GAAG,KAAK;IAC9D;IAAA,KACK,IAAI,CAACH,IAAI,CAACc,GAAG,CAAC,CAACV,SAAS,GAAGY,GAAG;EACvC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}