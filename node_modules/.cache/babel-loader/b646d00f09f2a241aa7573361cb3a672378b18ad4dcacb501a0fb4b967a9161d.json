{"ast":null,"code":"import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color, Utils } from '@pixi-spine/base';\nclass PathAttachment extends VertexAttachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Path;\n    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\n    this.lengths = [];\n    /** If true, the start and end knots are connected. */\n    this.closed = false;\n    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n     * calculations are performed but calculating positions along the path is less accurate. */\n    this.constantSpeed = false;\n    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n     * rendered at runtime. */\n    this.color = new Color(1, 1, 1, 1);\n  }\n  copy() {\n    const copy = new PathAttachment(this.name);\n    this.copyTo(copy);\n    copy.lengths = new Array(this.lengths.length);\n    Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n    copy.closed = closed;\n    copy.constantSpeed = this.constantSpeed;\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n}\nexport { PathAttachment };","map":{"version":3,"names":["PathAttachment","VertexAttachment","constructor","name","type","AttachmentType","Path","lengths","closed","constantSpeed","color","Color","copy","copyTo","Array","length","Utils","arrayCopy","setFromColor"],"sources":["../../../src/core/attachments/PathAttachment.ts"],"sourcesContent":["import { Attachment, VertexAttachment } from './Attachment';\nimport { AttachmentType, Color, Utils } from '@pixi-spine/base';\n\n/**\n * @public\n */\nexport class PathAttachment extends VertexAttachment {\n    type = AttachmentType.Path;\n\n    /** The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve. */\n    lengths: Array<number> = [];\n\n    /** If true, the start and end knots are connected. */\n    closed = false;\n\n    /** If true, additional calculations are performed to make calculating positions along the path more accurate. If false, fewer\n     * calculations are performed but calculating positions along the path is less accurate. */\n    constantSpeed = false;\n\n    /** The color of the path as it was in Spine. Available only when nonessential data was exported. Paths are not usually\n     * rendered at runtime. */\n    color = new Color(1, 1, 1, 1);\n\n    constructor(name: string) {\n        super(name);\n    }\n\n    copy(): Attachment {\n        const copy = new PathAttachment(this.name);\n\n        this.copyTo(copy);\n        copy.lengths = new Array<number>(this.lengths.length);\n        Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n        copy.closed = closed;\n        copy.constantSpeed = this.constantSpeed;\n        copy.color.setFromColor(this.color);\n\n        return copy;\n    }\n}\n"],"mappings":";;AAMO,MAAMA,cAAA,SAAuBC,gBAAiB;EAiBjDC,YAAYC,IAAc;IACtB,MAAMA,IAAI;IAjBd,KAAAC,IAAA,GAAOC,cAAe,CAAAC,IAAA;IAGtB;IAAA,KAAAC,OAAA,GAAyB,EAAC;IAG1B;IAAS,KAAAC,MAAA;IAIT;AAAA;IAAgB,KAAAC,aAAA;IAIhB;AAAA;IAAA,KAAAC,KAAA,GAAQ,IAAIC,KAAA,CAAM,CAAG,KAAG,GAAG,CAAC;EAAA;EAM5BC,IAAmBA,CAAA;IACf,MAAMA,IAAO,OAAIZ,cAAe,MAAKG,IAAI;IAEzC,KAAKU,MAAA,CAAOD,IAAI;IAChBA,IAAA,CAAKL,OAAU,OAAIO,KAAc,MAAKP,OAAA,CAAQQ,MAAM;IAC9CC,KAAA,CAAAC,SAAA,CAAU,KAAKV,OAAS,KAAGK,IAAA,CAAKL,OAAS,KAAG,IAAK,CAAAA,OAAA,CAAQQ,MAAM;IACrEH,IAAA,CAAKJ,MAAS,GAAAA,MAAA;IACdI,IAAA,CAAKH,aAAA,GAAgB,IAAK,CAAAA,aAAA;IACrBG,IAAA,CAAAF,KAAA,CAAMQ,YAAa,MAAKR,KAAK;IAE3B,OAAAE,IAAA;EAAA;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}