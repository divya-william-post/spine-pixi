{"ast":null,"code":"import { Utils } from '@pixi-spine/base';\nconst _Sequence = class {\n  constructor(count) {\n    this.id = _Sequence.nextID();\n    this.start = 0;\n    this.digits = 0;\n    /** The index of the region to show for the setup pose. */\n    this.setupIndex = 0;\n    this.regions = new Array(count);\n  }\n  copy() {\n    const copy = new _Sequence(this.regions.length);\n    Utils.arrayCopy(this.regions, 0, copy.regions, 0, this.regions.length);\n    copy.start = this.start;\n    copy.digits = this.digits;\n    copy.setupIndex = this.setupIndex;\n    return copy;\n  }\n  apply(slot, attachment) {\n    let index = slot.sequenceIndex;\n    if (index == -1) index = this.setupIndex;\n    if (index >= this.regions.length) index = this.regions.length - 1;\n    const region = this.regions[index];\n    if (attachment.region != region) {\n      attachment.region = region;\n    }\n  }\n  getPath(basePath, index) {\n    let result = basePath;\n    const frame = (this.start + index).toString();\n    for (let i = this.digits - frame.length; i > 0; i--) result += \"0\";\n    result += frame;\n    return result;\n  }\n  static nextID() {\n    return _Sequence._nextID++;\n  }\n};\nlet Sequence = _Sequence;\nSequence._nextID = 0;\nvar SequenceMode = /* @__PURE__ */(SequenceMode2 => {\n  SequenceMode2[SequenceMode2[\"hold\"] = 0] = \"hold\";\n  SequenceMode2[SequenceMode2[\"once\"] = 1] = \"once\";\n  SequenceMode2[SequenceMode2[\"loop\"] = 2] = \"loop\";\n  SequenceMode2[SequenceMode2[\"pingpong\"] = 3] = \"pingpong\";\n  SequenceMode2[SequenceMode2[\"onceReverse\"] = 4] = \"onceReverse\";\n  SequenceMode2[SequenceMode2[\"loopReverse\"] = 5] = \"loopReverse\";\n  SequenceMode2[SequenceMode2[\"pingpongReverse\"] = 6] = \"pingpongReverse\";\n  return SequenceMode2;\n})(SequenceMode || {});\nconst SequenceModeValues = [0 /* hold */, 1 /* once */, 2 /* loop */, 3 /* pingpong */, 4 /* onceReverse */, 5 /* loopReverse */, 6 /* pingpongReverse */];\nexport { Sequence, SequenceMode, SequenceModeValues };","map":{"version":3,"names":["_Sequence","constructor","count","id","nextID","start","digits","setupIndex","regions","Array","copy","length","Utils","arrayCopy","apply","slot","attachment","index","sequenceIndex","region","getPath","basePath","result","frame","toString","i","_nextID","Sequence","SequenceMode","SequenceMode2","SequenceModeValues"],"sources":["../../../src/core/attachments/Sequence.ts"],"sourcesContent":["import { Utils, TextureRegion, IHasTextureRegion, ISequence } from '@pixi-spine/base';\nimport type { Slot } from '../Slot';\n\n/**\n * @public\n */\nexport class Sequence implements ISequence {\n    private static _nextID = 0;\n\n    id = Sequence.nextID();\n    regions: TextureRegion[];\n    start = 0;\n    digits = 0;\n    /** The index of the region to show for the setup pose. */\n    setupIndex = 0;\n\n    constructor(count: number) {\n        this.regions = new Array<TextureRegion>(count);\n    }\n\n    copy(): Sequence {\n        const copy = new Sequence(this.regions.length);\n\n        Utils.arrayCopy(this.regions, 0, copy.regions, 0, this.regions.length);\n        copy.start = this.start;\n        copy.digits = this.digits;\n        copy.setupIndex = this.setupIndex;\n\n        return copy;\n    }\n\n    apply(slot: Slot, attachment: IHasTextureRegion) {\n        let index = slot.sequenceIndex;\n\n        if (index == -1) index = this.setupIndex;\n        if (index >= this.regions.length) index = this.regions.length - 1;\n        const region = this.regions[index];\n\n        if (attachment.region != region) {\n            attachment.region = region;\n            // attachment.updateRegion();\n        }\n    }\n\n    getPath(basePath: string, index: number): string {\n        let result = basePath;\n        const frame = (this.start + index).toString();\n\n        for (let i = this.digits - frame.length; i > 0; i--) result += '0';\n        result += frame;\n\n        return result;\n    }\n\n    private static nextID(): number {\n        return Sequence._nextID++;\n    }\n}\n\n/**\n * @public\n */\nexport enum SequenceMode {\n    hold = 0,\n    once = 1,\n    loop = 2,\n    pingpong = 3,\n    onceReverse = 4,\n    loopReverse = 5,\n    pingpongReverse = 6,\n}\n\n/**\n * @public\n */\nexport const SequenceModeValues = [\n    SequenceMode.hold,\n    SequenceMode.once,\n    SequenceMode.loop,\n    SequenceMode.pingpong,\n    SequenceMode.onceReverse,\n    SequenceMode.loopReverse,\n    SequenceMode.pingpongReverse,\n];\n"],"mappings":";AAMO,MAAMA,SAAA,GAAN,MAAoC;EAUvCC,YAAYC,KAAe;IAP3B,KAAAC,EAAA,GAAKH,SAAA,CAASI,MAAO;IAEb,KAAAC,KAAA;IACC,KAAAC,MAAA;IAET;IAAa,KAAAC,UAAA;IAGJ,KAAAC,OAAA,GAAU,IAAIC,KAAA,CAAqBP,KAAK;EAAA;EAGjDQ,IAAiBA,CAAA;IACb,MAAMA,IAAO,OAAIV,SAAS,MAAKQ,OAAA,CAAQG,MAAM;IAEvCC,KAAA,CAAAC,SAAA,CAAU,KAAKL,OAAS,KAAGE,IAAA,CAAKF,OAAS,KAAG,IAAK,CAAAA,OAAA,CAAQG,MAAM;IACrED,IAAA,CAAKL,KAAA,GAAQ,IAAK,CAAAA,KAAA;IAClBK,IAAA,CAAKJ,MAAA,GAAS,IAAK,CAAAA,MAAA;IACnBI,IAAA,CAAKH,UAAA,GAAa,IAAK,CAAAA,UAAA;IAEhB,OAAAG,IAAA;EAAA;EAGXI,MAAMC,IAAA,EAAYC,UAA+B;IAC7C,IAAIC,KAAA,GAAQF,IAAK,CAAAG,aAAA;IAEjB,IAAID,KAAS,QAAIA,KAAA,GAAQ,IAAK,CAAAV,UAAA;IAC1B,IAAAU,KAAA,IAAS,KAAKT,OAAQ,CAAAG,MAAA,EAAgBM,KAAA,QAAKT,OAAA,CAAQG,MAAS;IAC1D,MAAAQ,MAAA,GAAS,IAAK,CAAAX,OAAA,CAAQS,KAAK;IAE7B,IAAAD,UAAA,CAAWG,MAAA,IAAUA,MAAQ;MAC7BH,UAAA,CAAWG,MAAS,GAAAA,MAAA;IAAA;EAExB;EAGJC,QAAQC,QAAA,EAAkBJ,KAAuB;IAC7C,IAAIK,MAAS,GAAAD,QAAA;IACb,MAAME,KAAS,SAAKlB,KAAQ,GAAAY,KAAA,EAAOO,QAAS;IAE5C,SAASC,CAAA,GAAI,IAAK,CAAAnB,MAAA,GAASiB,KAAM,CAAAZ,MAAA,EAAQc,CAAA,GAAI,CAAG,EAAAA,CAAA,IAAeH,MAAA;IACrDA,MAAA,IAAAC,KAAA;IAEH,OAAAD,MAAA;EAAA;EAGX,OAAelB,MAAiBA,CAAA;IAC5B,OAAOJ,SAAS,CAAA0B,OAAA;EAAA;AAExB;AAnDO,IAAMC,QAAN,GAAA3B,SAAA;AAAM2B,QAAA,CACMD,OAAU;AAuDjB,IAAAE,YAAA,mBAAAC,aAAL;EACHA,aAAA,CAAAA,aAAA,WAAO,CAAP;EACAA,aAAA,CAAAA,aAAA,WAAO,CAAP;EACAA,aAAA,CAAAA,aAAA,WAAO,CAAP;EACAA,aAAA,CAAAA,aAAA,eAAW,CAAX;EACAA,aAAA,CAAAA,aAAA,kBAAc,CAAd;EACAA,aAAA,CAAAA,aAAA,kBAAc,CAAd;EACAA,aAAA,CAAAA,aAAA,sBAAkB,CAAlB;EAPQ,OAAAA,aAAA;AAAA,GAAAD,YAAA;AAaL,MAAME,kBAAqB,IAC9B,cACA,cACA,cACA,kBACA,qBACA,qBACA,wBACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}