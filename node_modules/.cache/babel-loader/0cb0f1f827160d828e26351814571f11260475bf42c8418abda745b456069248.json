{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { PathAttachment } from \"./attachments/PathAttachment.js\";\nimport { RotateMode, SpacingMode, PositionMode } from \"./PathConstraintData.js\";\nimport { Utils, MathUtils } from \"./Utils.js\";\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a {@link PathAttachment}.\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide. */\nexport class PathConstraint {\n  constructor(data, skeleton) {\n    /** The path constraint's setup pose data. */\n    _defineProperty(this, \"data\", void 0);\n    /** The bones that will be modified by this path constraint. */\n    _defineProperty(this, \"bones\", void 0);\n    /** The slot whose path attachment will be used to constrained the bones. */\n    _defineProperty(this, \"target\", void 0);\n    /** The position along the path. */\n    _defineProperty(this, \"position\", 0);\n    /** The spacing between bones. */\n    _defineProperty(this, \"spacing\", 0);\n    _defineProperty(this, \"mixRotate\", 0);\n    _defineProperty(this, \"mixX\", 0);\n    _defineProperty(this, \"mixY\", 0);\n    _defineProperty(this, \"spaces\", new Array());\n    _defineProperty(this, \"positions\", new Array());\n    _defineProperty(this, \"world\", new Array());\n    _defineProperty(this, \"curves\", new Array());\n    _defineProperty(this, \"lengths\", new Array());\n    _defineProperty(this, \"segments\", new Array());\n    _defineProperty(this, \"active\", false);\n    if (!data) throw new Error(\"data cannot be null.\");\n    if (!skeleton) throw new Error(\"skeleton cannot be null.\");\n    this.data = data;\n    this.bones = new Array();\n    for (let i = 0, n = data.bones.length; i < n; i++) {\n      let bone = skeleton.findBone(data.bones[i].name);\n      if (!bone) throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\n      this.bones.push(bone);\n    }\n    let target = skeleton.findSlot(data.target.name);\n    if (!target) throw new Error(`Couldn't find target bone ${data.target.name}`);\n    this.target = target;\n    this.position = data.position;\n    this.spacing = data.spacing;\n    this.mixRotate = data.mixRotate;\n    this.mixX = data.mixX;\n    this.mixY = data.mixY;\n  }\n  isActive() {\n    return this.active;\n  }\n  update() {\n    let attachment = this.target.getAttachment();\n    if (!(attachment instanceof PathAttachment)) return;\n    let mixRotate = this.mixRotate,\n      mixX = this.mixX,\n      mixY = this.mixY;\n    if (mixRotate == 0 && mixX == 0 && mixY == 0) return;\n    let data = this.data;\n    let tangents = data.rotateMode == RotateMode.Tangent,\n      scale = data.rotateMode == RotateMode.ChainScale;\n    let bones = this.bones;\n    let boneCount = bones.length,\n      spacesCount = tangents ? boneCount : boneCount + 1;\n    let spaces = Utils.setArraySize(this.spaces, spacesCount),\n      lengths = scale ? this.lengths = Utils.setArraySize(this.lengths, boneCount) : [];\n    let spacing = this.spacing;\n    switch (data.spacingMode) {\n      case SpacingMode.Percent:\n        if (scale) {\n          for (let i = 0, n = spacesCount - 1; i < n; i++) {\n            let bone = bones[i];\n            let setupLength = bone.data.length;\n            if (setupLength < PathConstraint.epsilon) lengths[i] = 0;else {\n              let x = setupLength * bone.a,\n                y = setupLength * bone.c;\n              lengths[i] = Math.sqrt(x * x + y * y);\n            }\n          }\n        }\n        Utils.arrayFill(spaces, 1, spacesCount, spacing);\n        break;\n      case SpacingMode.Proportional:\n        let sum = 0;\n        for (let i = 0, n = spacesCount - 1; i < n;) {\n          let bone = bones[i];\n          let setupLength = bone.data.length;\n          if (setupLength < PathConstraint.epsilon) {\n            if (scale) lengths[i] = 0;\n            spaces[++i] = spacing;\n          } else {\n            let x = setupLength * bone.a,\n              y = setupLength * bone.c;\n            let length = Math.sqrt(x * x + y * y);\n            if (scale) lengths[i] = length;\n            spaces[++i] = length;\n            sum += length;\n          }\n        }\n        if (sum > 0) {\n          sum = spacesCount / sum * spacing;\n          for (let i = 1; i < spacesCount; i++) spaces[i] *= sum;\n        }\n        break;\n      default:\n        let lengthSpacing = data.spacingMode == SpacingMode.Length;\n        for (let i = 0, n = spacesCount - 1; i < n;) {\n          let bone = bones[i];\n          let setupLength = bone.data.length;\n          if (setupLength < PathConstraint.epsilon) {\n            if (scale) lengths[i] = 0;\n            spaces[++i] = spacing;\n          } else {\n            let x = setupLength * bone.a,\n              y = setupLength * bone.c;\n            let length = Math.sqrt(x * x + y * y);\n            if (scale) lengths[i] = length;\n            spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\n          }\n        }\n    }\n    let positions = this.computeWorldPositions(attachment, spacesCount, tangents);\n    let boneX = positions[0],\n      boneY = positions[1],\n      offsetRotation = data.offsetRotation;\n    let tip = false;\n    if (offsetRotation == 0) tip = data.rotateMode == RotateMode.Chain;else {\n      tip = false;\n      let p = this.target.bone;\n      offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n    }\n    for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n      let bone = bones[i];\n      bone.worldX += (boneX - bone.worldX) * mixX;\n      bone.worldY += (boneY - bone.worldY) * mixY;\n      let x = positions[p],\n        y = positions[p + 1],\n        dx = x - boneX,\n        dy = y - boneY;\n      if (scale) {\n        let length = lengths[i];\n        if (length != 0) {\n          let s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\n          bone.a *= s;\n          bone.c *= s;\n        }\n      }\n      boneX = x;\n      boneY = y;\n      if (mixRotate > 0) {\n        let a = bone.a,\n          b = bone.b,\n          c = bone.c,\n          d = bone.d,\n          r = 0,\n          cos = 0,\n          sin = 0;\n        if (tangents) r = positions[p - 1];else if (spaces[i + 1] == 0) r = positions[p + 2];else r = Math.atan2(dy, dx);\n        r -= Math.atan2(c, a);\n        if (tip) {\n          cos = Math.cos(r);\n          sin = Math.sin(r);\n          let length = bone.data.length;\n          boneX += (length * (cos * a - sin * c) - dx) * mixRotate;\n          boneY += (length * (sin * a + cos * c) - dy) * mixRotate;\n        } else {\n          r += offsetRotation;\n        }\n        if (r > MathUtils.PI) r -= MathUtils.PI2;else if (r < -MathUtils.PI)\n          //\n          r += MathUtils.PI2;\n        r *= mixRotate;\n        cos = Math.cos(r);\n        sin = Math.sin(r);\n        bone.a = cos * a - sin * c;\n        bone.b = cos * b - sin * d;\n        bone.c = sin * a + cos * c;\n        bone.d = sin * b + cos * d;\n      }\n      bone.updateAppliedTransform();\n    }\n  }\n  computeWorldPositions(path, spacesCount, tangents) {\n    let target = this.target;\n    let position = this.position;\n    let spaces = this.spaces,\n      out = Utils.setArraySize(this.positions, spacesCount * 3 + 2),\n      world = this.world;\n    let closed = path.closed;\n    let verticesLength = path.worldVerticesLength,\n      curveCount = verticesLength / 6,\n      prevCurve = PathConstraint.NONE;\n    if (!path.constantSpeed) {\n      let lengths = path.lengths;\n      curveCount -= closed ? 1 : 2;\n      let pathLength = lengths[curveCount];\n      if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\n      let multiplier;\n      switch (this.data.spacingMode) {\n        case SpacingMode.Percent:\n          multiplier = pathLength;\n          break;\n        case SpacingMode.Proportional:\n          multiplier = pathLength / spacesCount;\n          break;\n        default:\n          multiplier = 1;\n      }\n      world = Utils.setArraySize(this.world, 8);\n      for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n        let space = spaces[i] * multiplier;\n        position += space;\n        let p = position;\n        if (closed) {\n          p %= pathLength;\n          if (p < 0) p += pathLength;\n          curve = 0;\n        } else if (p < 0) {\n          if (prevCurve != PathConstraint.BEFORE) {\n            prevCurve = PathConstraint.BEFORE;\n            path.computeWorldVertices(target, 2, 4, world, 0, 2);\n          }\n          this.addBeforePosition(p, world, 0, out, o);\n          continue;\n        } else if (p > pathLength) {\n          if (prevCurve != PathConstraint.AFTER) {\n            prevCurve = PathConstraint.AFTER;\n            path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n          }\n          this.addAfterPosition(p - pathLength, world, 0, out, o);\n          continue;\n        }\n        // Determine curve containing position.\n        for (;; curve++) {\n          let length = lengths[curve];\n          if (p > length) continue;\n          if (curve == 0) p /= length;else {\n            let prev = lengths[curve - 1];\n            p = (p - prev) / (length - prev);\n          }\n          break;\n        }\n        if (curve != prevCurve) {\n          prevCurve = curve;\n          if (closed && curve == curveCount) {\n            path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n            path.computeWorldVertices(target, 0, 4, world, 4, 2);\n          } else path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n        }\n        this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || i > 0 && space == 0);\n      }\n      return out;\n    }\n    // World vertices.\n    if (closed) {\n      verticesLength += 2;\n      world = Utils.setArraySize(this.world, verticesLength);\n      path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n      path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n      world[verticesLength - 2] = world[0];\n      world[verticesLength - 1] = world[1];\n    } else {\n      curveCount--;\n      verticesLength -= 4;\n      world = Utils.setArraySize(this.world, verticesLength);\n      path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n    }\n    // Curve lengths.\n    let curves = Utils.setArraySize(this.curves, curveCount);\n    let pathLength = 0;\n    let x1 = world[0],\n      y1 = world[1],\n      cx1 = 0,\n      cy1 = 0,\n      cx2 = 0,\n      cy2 = 0,\n      x2 = 0,\n      y2 = 0;\n    let tmpx = 0,\n      tmpy = 0,\n      dddfx = 0,\n      dddfy = 0,\n      ddfx = 0,\n      ddfy = 0,\n      dfx = 0,\n      dfy = 0;\n    for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n      cx1 = world[w];\n      cy1 = world[w + 1];\n      cx2 = world[w + 2];\n      cy2 = world[w + 3];\n      x2 = world[w + 4];\n      y2 = world[w + 5];\n      tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n      tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n      dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n      dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n      ddfx = tmpx * 2 + dddfx;\n      ddfy = tmpy * 2 + dddfy;\n      dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n      dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      dfx += ddfx;\n      dfy += ddfy;\n      ddfx += dddfx;\n      ddfy += dddfy;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      dfx += ddfx;\n      dfy += ddfy;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      dfx += ddfx + dddfx;\n      dfy += ddfy + dddfy;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      curves[i] = pathLength;\n      x1 = x2;\n      y1 = y2;\n    }\n    if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\n    let multiplier;\n    switch (this.data.spacingMode) {\n      case SpacingMode.Percent:\n        multiplier = pathLength;\n        break;\n      case SpacingMode.Proportional:\n        multiplier = pathLength / spacesCount;\n        break;\n      default:\n        multiplier = 1;\n    }\n    let segments = this.segments;\n    let curveLength = 0;\n    for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n      let space = spaces[i] * multiplier;\n      position += space;\n      let p = position;\n      if (closed) {\n        p %= pathLength;\n        if (p < 0) p += pathLength;\n        curve = 0;\n      } else if (p < 0) {\n        this.addBeforePosition(p, world, 0, out, o);\n        continue;\n      } else if (p > pathLength) {\n        this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n        continue;\n      }\n      // Determine curve containing position.\n      for (;; curve++) {\n        let length = curves[curve];\n        if (p > length) continue;\n        if (curve == 0) p /= length;else {\n          let prev = curves[curve - 1];\n          p = (p - prev) / (length - prev);\n        }\n        break;\n      }\n      // Curve segment lengths.\n      if (curve != prevCurve) {\n        prevCurve = curve;\n        let ii = curve * 6;\n        x1 = world[ii];\n        y1 = world[ii + 1];\n        cx1 = world[ii + 2];\n        cy1 = world[ii + 3];\n        cx2 = world[ii + 4];\n        cy2 = world[ii + 5];\n        x2 = world[ii + 6];\n        y2 = world[ii + 7];\n        tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n        tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n        dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n        dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n        ddfx = tmpx * 2 + dddfx;\n        ddfy = tmpy * 2 + dddfy;\n        dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n        dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n        curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n        segments[0] = curveLength;\n        for (ii = 1; ii < 8; ii++) {\n          dfx += ddfx;\n          dfy += ddfy;\n          ddfx += dddfx;\n          ddfy += dddfy;\n          curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n          segments[ii] = curveLength;\n        }\n        dfx += ddfx;\n        dfy += ddfy;\n        curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n        segments[8] = curveLength;\n        dfx += ddfx + dddfx;\n        dfy += ddfy + dddfy;\n        curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n        segments[9] = curveLength;\n        segment = 0;\n      }\n      // Weight by segment length.\n      p *= curveLength;\n      for (;; segment++) {\n        let length = segments[segment];\n        if (p > length) continue;\n        if (segment == 0) p /= length;else {\n          let prev = segments[segment - 1];\n          p = segment + (p - prev) / (length - prev);\n        }\n        break;\n      }\n      this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || i > 0 && space == 0);\n    }\n    return out;\n  }\n  addBeforePosition(p, temp, i, out, o) {\n    let x1 = temp[i],\n      y1 = temp[i + 1],\n      dx = temp[i + 2] - x1,\n      dy = temp[i + 3] - y1,\n      r = Math.atan2(dy, dx);\n    out[o] = x1 + p * Math.cos(r);\n    out[o + 1] = y1 + p * Math.sin(r);\n    out[o + 2] = r;\n  }\n  addAfterPosition(p, temp, i, out, o) {\n    let x1 = temp[i + 2],\n      y1 = temp[i + 3],\n      dx = x1 - temp[i],\n      dy = y1 - temp[i + 1],\n      r = Math.atan2(dy, dx);\n    out[o] = x1 + p * Math.cos(r);\n    out[o + 1] = y1 + p * Math.sin(r);\n    out[o + 2] = r;\n  }\n  addCurvePosition(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {\n    if (p == 0 || isNaN(p)) {\n      out[o] = x1;\n      out[o + 1] = y1;\n      out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n      return;\n    }\n    let tt = p * p,\n      ttt = tt * p,\n      u = 1 - p,\n      uu = u * u,\n      uuu = uu * u;\n    let ut = u * p,\n      ut3 = ut * 3,\n      uut3 = u * ut3,\n      utt3 = ut3 * p;\n    let x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt,\n      y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n    out[o] = x;\n    out[o + 1] = y;\n    if (tangents) {\n      if (p < 0.001) out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);else out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n    }\n  }\n}\n_defineProperty(PathConstraint, \"NONE\", -1);\n_defineProperty(PathConstraint, \"BEFORE\", -2);\n_defineProperty(PathConstraint, \"AFTER\", -3);\n_defineProperty(PathConstraint, \"epsilon\", 0.00001);","map":{"version":3,"names":["PathAttachment","RotateMode","SpacingMode","PositionMode","Utils","MathUtils","PathConstraint","constructor","data","skeleton","_defineProperty","Array","Error","bones","i","n","length","bone","findBone","name","push","target","findSlot","position","spacing","mixRotate","mixX","mixY","isActive","active","update","attachment","getAttachment","tangents","rotateMode","Tangent","scale","ChainScale","boneCount","spacesCount","spaces","setArraySize","lengths","spacingMode","Percent","setupLength","epsilon","x","a","y","c","Math","sqrt","arrayFill","Proportional","sum","lengthSpacing","Length","positions","computeWorldPositions","boneX","boneY","offsetRotation","tip","Chain","p","d","b","degRad","worldX","worldY","dx","dy","s","r","cos","sin","atan2","PI","PI2","updateAppliedTransform","path","out","world","closed","verticesLength","worldVerticesLength","curveCount","prevCurve","NONE","constantSpeed","pathLength","positionMode","multiplier","o","curve","space","BEFORE","computeWorldVertices","addBeforePosition","AFTER","addAfterPosition","prev","addCurvePosition","curves","x1","y1","cx1","cy1","cx2","cy2","x2","y2","tmpx","tmpy","dddfx","dddfy","ddfx","ddfy","dfx","dfy","w","segments","curveLength","segment","ii","temp","isNaN","tt","ttt","u","uu","uuu","ut","ut3","uut3","utt3"],"sources":["../src/PathConstraint.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}