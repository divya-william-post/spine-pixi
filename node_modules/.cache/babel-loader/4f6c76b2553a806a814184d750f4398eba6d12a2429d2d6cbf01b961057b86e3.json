{"ast":null,"code":"import { TransformMode, Color } from '@pixi-spine/base';\nclass BoneData {\n  constructor(index, name, parent) {\n    /** The index of the bone in {@link Skeleton#getBones()}. */\n    this.index = 0;\n    /** @returns May be null. */\n    this.parent = null;\n    /** The bone's length. */\n    this.length = 0;\n    /** The local x translation. */\n    this.x = 0;\n    /** The local y translation. */\n    this.y = 0;\n    /** The local rotation. */\n    this.rotation = 0;\n    /** The local scaleX. */\n    this.scaleX = 1;\n    /** The local scaleY. */\n    this.scaleY = 1;\n    /** The local shearX. */\n    this.shearX = 0;\n    /** The local shearX. */\n    this.shearY = 0;\n    /** The transform mode for how parent world transforms affect this bone. */\n    this.transformMode = TransformMode.Normal;\n    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n     * bone.\n     * @see Skin#bones */\n    this.skinRequired = false;\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n     * rendered at runtime. */\n    this.color = new Color();\n    if (index < 0) throw new Error(\"index must be >= 0.\");\n    if (!name) throw new Error(\"name cannot be null.\");\n    this.index = index;\n    this.name = name;\n    this.parent = parent;\n  }\n}\nexport { BoneData };","map":{"version":3,"names":["BoneData","constructor","index","name","parent","length","x","y","rotation","scaleX","scaleY","shearX","shearY","transformMode","TransformMode","Normal","skinRequired","color","Color","Error"],"sources":["../../src/core/BoneData.ts"],"sourcesContent":["import { Color, TransformMode } from '@pixi-spine/base';\n\n/** Stores the setup pose for a {@link Bone}.\n * @public\n * */\nexport class BoneData {\n    /** The index of the bone in {@link Skeleton#getBones()}. */\n    index = 0;\n\n    /** The name of the bone, which is unique across all bones in the skeleton. */\n    name: string;\n\n    /** @returns May be null. */\n    parent: BoneData | null = null;\n\n    /** The bone's length. */\n    length = 0;\n\n    /** The local x translation. */\n    x = 0;\n\n    /** The local y translation. */\n    y = 0;\n\n    /** The local rotation. */\n    rotation = 0;\n\n    /** The local scaleX. */\n    scaleX = 1;\n\n    /** The local scaleY. */\n    scaleY = 1;\n\n    /** The local shearX. */\n    shearX = 0;\n\n    /** The local shearX. */\n    shearY = 0;\n\n    /** The transform mode for how parent world transforms affect this bone. */\n    transformMode = TransformMode.Normal;\n\n    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n     * bone.\n     * @see Skin#bones */\n    skinRequired = false;\n\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n     * rendered at runtime. */\n    color = new Color();\n\n    constructor(index: number, name: string, parent: BoneData | null) {\n        if (index < 0) throw new Error('index must be >= 0.');\n        if (!name) throw new Error('name cannot be null.');\n        this.index = index;\n        this.name = name;\n        this.parent = parent;\n    }\n}\n"],"mappings":";AAKO,MAAMA,QAAS;EA8ClBC,YAAYC,KAAe,EAAAC,IAAA,EAAcC,MAAyB;IA5ClE;IAAQ,KAAAF,KAAA;IAMR;IAA0B,KAAAE,MAAA;IAG1B;IAAS,KAAAC,MAAA;IAGT;IAAI,KAAAC,CAAA;IAGJ;IAAI,KAAAC,CAAA;IAGJ;IAAW,KAAAC,QAAA;IAGX;IAAS,KAAAC,MAAA;IAGT;IAAS,KAAAC,MAAA;IAGT;IAAS,KAAAC,MAAA;IAGT;IAAS,KAAAC,MAAA;IAGT;IAAA,KAAAC,aAAA,GAAgBC,aAAc,CAAAC,MAAA;IAK9B;AAAA;AAAA;IAAe,KAAAC,YAAA;IAIf;AAAA;IAAA,KAAAC,KAAA,GAAQ,IAAIC,KAAM;IAGd,IAAIhB,KAAQ,MAAS,UAAIiB,KAAA,CAAM,qBAAqB;IACpD,IAAI,CAAChB,IAAA,EAAY,UAAIgB,KAAA,CAAM,sBAAsB;IACjD,KAAKjB,KAAQ,GAAAA,KAAA;IACb,KAAKC,IAAO,GAAAA,IAAA;IACZ,KAAKC,MAAS,GAAAA,MAAA;EAAA;AAEtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}