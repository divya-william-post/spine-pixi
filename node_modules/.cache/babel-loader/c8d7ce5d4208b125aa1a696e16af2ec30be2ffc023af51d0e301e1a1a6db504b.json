{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { MeshAttachment } from \"./attachments/MeshAttachment.js\";\n/** Stores an entry in the skin consisting of the slot index, name, and attachment **/\nexport class SkinEntry {\n  constructor(slotIndex = 0, name, attachment) {\n    _defineProperty(this, \"slotIndex\", void 0);\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"attachment\", void 0);\n    this.slotIndex = slotIndex;\n    this.name = name;\n    this.attachment = attachment;\n  }\n}\n/** Stores attachments by slot index and attachment name.\n *\n * See SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n * [Runtime skins](http://esotericsoftware.com/spine-runtime-skins) in the Spine Runtimes Guide. */\nexport class Skin {\n  constructor(name) {\n    /** The skin's name, which is unique across all skins in the skeleton. */\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"attachments\", new Array());\n    _defineProperty(this, \"bones\", Array());\n    _defineProperty(this, \"constraints\", new Array());\n    if (!name) throw new Error(\"name cannot be null.\");\n    this.name = name;\n  }\n  /** Adds an attachment to the skin for the specified slot index and name. */\n  setAttachment(slotIndex, name, attachment) {\n    if (!attachment) throw new Error(\"attachment cannot be null.\");\n    let attachments = this.attachments;\n    if (slotIndex >= attachments.length) attachments.length = slotIndex + 1;\n    if (!attachments[slotIndex]) attachments[slotIndex] = {};\n    attachments[slotIndex][name] = attachment;\n  }\n  /** Adds all attachments, bones, and constraints from the specified skin to this skin. */\n  addSkin(skin) {\n    for (let i = 0; i < skin.bones.length; i++) {\n      let bone = skin.bones[i];\n      let contained = false;\n      for (let ii = 0; ii < this.bones.length; ii++) {\n        if (this.bones[ii] == bone) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained) this.bones.push(bone);\n    }\n    for (let i = 0; i < skin.constraints.length; i++) {\n      let constraint = skin.constraints[i];\n      let contained = false;\n      for (let ii = 0; ii < this.constraints.length; ii++) {\n        if (this.constraints[ii] == constraint) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained) this.constraints.push(constraint);\n    }\n    let attachments = skin.getAttachments();\n    for (let i = 0; i < attachments.length; i++) {\n      var attachment = attachments[i];\n      this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n    }\n  }\n  /** Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\n   * copied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals. */\n  copySkin(skin) {\n    for (let i = 0; i < skin.bones.length; i++) {\n      let bone = skin.bones[i];\n      let contained = false;\n      for (let ii = 0; ii < this.bones.length; ii++) {\n        if (this.bones[ii] == bone) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained) this.bones.push(bone);\n    }\n    for (let i = 0; i < skin.constraints.length; i++) {\n      let constraint = skin.constraints[i];\n      let contained = false;\n      for (let ii = 0; ii < this.constraints.length; ii++) {\n        if (this.constraints[ii] == constraint) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained) this.constraints.push(constraint);\n    }\n    let attachments = skin.getAttachments();\n    for (let i = 0; i < attachments.length; i++) {\n      var attachment = attachments[i];\n      if (!attachment.attachment) continue;\n      if (attachment.attachment instanceof MeshAttachment) {\n        attachment.attachment = attachment.attachment.newLinkedMesh();\n        this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n      } else {\n        attachment.attachment = attachment.attachment.copy();\n        this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n      }\n    }\n  }\n  /** Returns the attachment for the specified slot index and name, or null. */\n  getAttachment(slotIndex, name) {\n    let dictionary = this.attachments[slotIndex];\n    return dictionary ? dictionary[name] : null;\n  }\n  /** Removes the attachment in the skin for the specified slot index and name, if any. */\n  removeAttachment(slotIndex, name) {\n    let dictionary = this.attachments[slotIndex];\n    if (dictionary) delete dictionary[name];\n  }\n  /** Returns all attachments in this skin. */\n  getAttachments() {\n    let entries = new Array();\n    for (var i = 0; i < this.attachments.length; i++) {\n      let slotAttachments = this.attachments[i];\n      if (slotAttachments) {\n        for (let name in slotAttachments) {\n          let attachment = slotAttachments[name];\n          if (attachment) entries.push(new SkinEntry(i, name, attachment));\n        }\n      }\n    }\n    return entries;\n  }\n  /** Returns all attachments in this skin for the specified slot index. */\n  getAttachmentsForSlot(slotIndex, attachments) {\n    let slotAttachments = this.attachments[slotIndex];\n    if (slotAttachments) {\n      for (let name in slotAttachments) {\n        let attachment = slotAttachments[name];\n        if (attachment) attachments.push(new SkinEntry(slotIndex, name, attachment));\n      }\n    }\n  }\n  /** Clears all attachments, bones, and constraints. */\n  clear() {\n    this.attachments.length = 0;\n    this.bones.length = 0;\n    this.constraints.length = 0;\n  }\n  /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n  attachAll(skeleton, oldSkin) {\n    let slotIndex = 0;\n    for (let i = 0; i < skeleton.slots.length; i++) {\n      let slot = skeleton.slots[i];\n      let slotAttachment = slot.getAttachment();\n      if (slotAttachment && slotIndex < oldSkin.attachments.length) {\n        let dictionary = oldSkin.attachments[slotIndex];\n        for (let key in dictionary) {\n          let skinAttachment = dictionary[key];\n          if (slotAttachment == skinAttachment) {\n            let attachment = this.getAttachment(slotIndex, key);\n            if (attachment) slot.setAttachment(attachment);\n            break;\n          }\n        }\n      }\n      slotIndex++;\n    }\n  }\n}","map":{"version":3,"names":["MeshAttachment","SkinEntry","constructor","slotIndex","name","attachment","_defineProperty","Skin","Array","Error","setAttachment","attachments","length","addSkin","skin","i","bones","bone","contained","ii","push","constraints","constraint","getAttachments","copySkin","newLinkedMesh","copy","getAttachment","dictionary","removeAttachment","entries","slotAttachments","getAttachmentsForSlot","clear","attachAll","skeleton","oldSkin","slots","slot","slotAttachment","key","skinAttachment"],"sources":["../src/Skin.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}