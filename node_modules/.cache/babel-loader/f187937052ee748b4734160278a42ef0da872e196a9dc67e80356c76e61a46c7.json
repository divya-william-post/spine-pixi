{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nexport async function initSpine() {\n  var app = new PIXI.Application();\n  await app.init({\n    width: 1200,\n    height: 700,\n    resolution: 1,\n    autoDensity: true,\n    resizeTo: window,\n    backgroundColor: 0x2c3e50\n  });\n  document.body.appendChild(app.view);\n\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  PIXI.Assets.add({\n    alias: \"sky\",\n    src: \"https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png\"\n  });\n  PIXI.Assets.add({\n    alias: \"background\",\n    src: './starsky.jpg'\n  });\n  PIXI.Assets.add({\n    alias: \"midground\",\n    src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png'\n  });\n  PIXI.Assets.add({\n    alias: \"platform\",\n    src: './platform.png'\n  });\n  await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\"]);\n  const sky = PIXI.Sprite.from('background');\n  sky.width = app.screen.width;\n  sky.height = app.screen.height;\n  app.stage.addChild(sky);\n  const platform = PIXI.Sprite.from('platform');\n  platform.y = 580;\n  platform.width = app.screen.width;\n  platform.height = 250;\n  app.stage.addChild(platform);\n\n  // Create the spine display object\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.3\n  });\n\n  // Set the default mix time to use when transitioning\n  // from one animation to another.\n  spineboy.state.data.defaultMix = 0.2;\n\n  // Center the Spine object on screen.\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = 590;\n\n  // Add the display object to the stage.\n  // app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  let isDragging = false;\n  const bones = spineboy.skeleton.bones;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(0, \"idle\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  app.stage.on(\"pointerdown\", e => {\n    isDragging = true;\n    setBonePosition(e);\n    spineboy.state.setAnimation(0, \"shoot\", false);\n  });\n  app.stage.on(\"globalpointermove\", e => {\n    if (isDragging) setBonePosition(e);\n    spineboy.state.setAnimation(1, \"aim\", true);\n  });\n  app.stage.on(\"pointerup\", e => isDragging = false);\n  const setBonePosition = e => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(e.data.global.x - spineboy.x, e.data.global.y - spineboy.y);\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n  };\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n  // Add variables for movement, speed.\n  let moveLeft = false;\n  let moveRight = false;\n  const speed = 5;\n\n  // Handle the case that the keyboard keys specified below are pressed.\n  function onKeyDown(key) {\n    spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = true;\n      spineboy.skeleton.scaleX = -1;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = true;\n      spineboy.skeleton.scaleX = 1;\n    } else if (key.code === \"ArrowUp\" || key.code === \"KeyW\") {\n      spineboy.state.setAnimation(0, \"jump\", false);\n    }\n  }\n\n  // Handle when the keys are released, if they were pressed.\n  function onKeyUp(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = false;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = false;\n    } else if (key.code === \"ArrowUp\" || key.code === \"KeyW\") {\n      spineboy.state.setAnimation(0, \"walk\", true); // Optional: set jump animation\n    }\n  }\n\n  // Add event listeners so that the window will correctly handle input.\n  // window.addEventListener(\"keydown\", onKeyDown);\n  // window.addEventListener(\"keyup\", onKeyUp);\n\n  // Update the application to move Spineboy if input is detected.\n  app.ticker.add(() => {\n    if (moveLeft) {\n      spineboy.x -= speed;\n    }\n    if (moveRight) {\n      spineboy.x += speed;\n    }\n  });\n  const controlBoneNames = [\"gun\"];\n  const controlBones = [];\n  let dragObject = null;\n  let control = null;\n  let lastX = -1,\n    lastY = -1;\n  const endDrag = () => dragObject = null;\n  app.stage.on('pointerup', endDrag).on('pointerupoutside', endDrag).on('pointermove', ({\n    x,\n    y\n  }) => {\n    if (dragObject) {\n      dragObject.x += x - lastX;\n      dragObject.y += y - lastY;\n      lastX = x;\n      lastY = y;\n    }\n  });\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n  for (var i = 0; i < controlBoneNames.length; i++) {\n    const bone = spineboy.skeleton.findBone(controlBoneNames[i]);\n    const point = {\n      x: bone.worldX,\n      y: bone.worldY\n    };\n    spineboy.skeletonToPixiWorldCoordinates(point);\n    control = new PIXI.Graphics().circle(0, 0, 6).fill('#ff00ff');\n    control.x = point.x;\n    control.y = point.y;\n    controlBones.push({\n      bone,\n      control\n    });\n    control.interactive = \"static\";\n    control.on('pointerdown', ({\n      x,\n      y\n    }) => {\n      dragObject = control;\n      lastX = x;\n      lastY = y;\n    });\n  }\n  const point = {\n    x: 0,\n    y: 0\n  };\n  spineboy.beforeUpdateWorldTransforms = () => {\n    for (let {\n      bone,\n      control\n    } of controlBones) {\n      point.x = control.x;\n      point.y = control.y;\n      spineboy.pixiWorldCoordinatesToBone(point, bone);\n      bone.x = point.x;\n      bone.y = point.y;\n    }\n  };\n  function run() {\n    spineboy.state.setAnimation(0, \"run\", true);\n  }\n  function shoot() {\n    spineboy.state.setAnimation(1, \"aim\", true);\n    spineboy.state.setAnimation(0, \"shoot\", true);\n  }\n  function jump() {\n    spineboy.state.setAnimation(0, \"jump\", true);\n  }\n  function hoverboard() {\n    spineboy.state.setAnimation(0, \"hoverboard\", true);\n  }\n  function turnLeft() {\n    spineboy.skeleton.scaleX = -1;\n  }\n  function turnRight() {\n    spineboy.skeleton.scaleX = 1;\n  }\n  function addControlBones() {\n    app.stage.addChild(control);\n  }\n  function removeControlBones() {\n    app.stage.removeControlBones(control);\n  }\n  return {\n    run,\n    shoot,\n    jump,\n    hoverboard,\n    turnLeft,\n    turnRight,\n    addControlBones,\n    removeControlBones\n  };\n}","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","height","resolution","autoDensity","resizeTo","window","backgroundColor","document","body","appendChild","view","Assets","add","alias","src","load","sky","Sprite","from","screen","stage","addChild","platform","y","spineboy","spine","Spine","skeleton","atlas","scale","state","data","defaultMix","x","innerWidth","hitArea","Rectangle","eventMode","isDragging","bones","setAnimation","on","e","setBonePosition","position","Vector2","global","crosshairBone","findBone","parent","worldToLocal","Promise","resolve","requestAnimationFrame","moveLeft","moveRight","speed","onKeyDown","key","code","scaleX","onKeyUp","ticker","controlBoneNames","controlBones","dragObject","control","lastX","lastY","endDrag","i","length","bone","point","worldX","worldY","skeletonToPixiWorldCoordinates","Graphics","circle","fill","push","interactive","beforeUpdateWorldTransforms","pixiWorldCoordinatesToBone","run","shoot","jump","hoverboard","turnLeft","turnRight","addControlBones","removeControlBones"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\nexport async function initSpine () {\n    var app = new PIXI.Application();\n    await app.init({\n        width: 1200,\n        height: 700,\n        resolution: 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n    })\n    document.body.appendChild(app.view);\n\n    // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    PIXI.Assets.add({alias: \"sky\", src: \"https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png\" });\n    PIXI.Assets.add({alias: \"background\", src: './starsky.jpg' });\n    PIXI.Assets.add({alias: \"midground\", src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png' });\n    PIXI.Assets.add({alias: \"platform\", src: './platform.png' });\n   \n    await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\"]);\n\n    const sky = PIXI.Sprite.from('background');\n    sky.width = app.screen.width;\n    sky.height = app.screen.height;\n    app.stage.addChild(sky);\n    const platform = PIXI.Sprite.from('platform');\n    platform.y = 580;\n    platform.width =  app.screen.width;\n    platform.height = 250;\n    app.stage.addChild(platform);\n\n\n    // Create the spine display object\n    const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n        scale: 0.3,\n    });\n\n    // Set the default mix time to use when transitioning\n    // from one animation to another.\n    spineboy.state.data.defaultMix = 0.2;\n\n    // Center the Spine object on screen.\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = 590;\n\n    // Add the display object to the stage.\n    // app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n    let isDragging = false;\n    const bones = spineboy.skeleton.bones;\n  \n    // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n    spineboy.state.setAnimation(0, \"idle\", true);\n\n    // Add the display object to the stage.\n    app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n\n    app.stage.on(\"pointerdown\", (e) => {\n        isDragging = true;\n        setBonePosition(e);\n        spineboy.state.setAnimation(0, \"shoot\", false);\n    });\n\n    app.stage.on(\"globalpointermove\", (e) => {\n        if (isDragging) setBonePosition(e);\n        spineboy.state.setAnimation(1, \"aim\", true);\n    });\n\n    app.stage.on(\"pointerup\", (e) => (isDragging = false));\n\n    const setBonePosition = (e) => {\n        // Transform the mouse/touch coordinates to Spineboy's coordinate\n        // system origin. `position` is then relative to Spineboy's root\n        // bone.\n        const position = new spine.Vector2(\n            e.data.global.x - spineboy.x,\n            e.data.global.y - spineboy.y\n        );\n\n        // Find the crosshair bone.\n        const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n        // Take the mouse position, which is relative to the root bone,\n        // and transform it to the crosshair bone's parent root bone\n        // coordinate system via `worldToLocal()`. `position` is relative\n        // to the crosshair bone's parent bone after this\n        crosshairBone.parent.worldToLocal(position);\n\n        // Set the crosshair bone's position to the mouse position\n        crosshairBone.x = position.x;\n        crosshairBone.y = position.y;\n    };\n\n\n    // wait a frame as pixi bounds do not work until rendered\n    await new Promise((resolve) => requestAnimationFrame(resolve));\n    // Add variables for movement, speed.\n    let moveLeft = false;\n    let moveRight = false;\n    const speed = 5;\n\n\n    // Handle the case that the keyboard keys specified below are pressed.\n    function onKeyDown(key) {\n      spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n      if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n        moveLeft = true;\n        spineboy.skeleton.scaleX = -1;\n      } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n        moveRight = true;\n        spineboy.skeleton.scaleX = 1;\n      } else if ((key.code === \"ArrowUp\" || key.code === \"KeyW\")) {\n          spineboy.state.setAnimation(0, \"jump\", false); \n      }\n    }\n\n    // Handle when the keys are released, if they were pressed.\n    function onKeyUp(key) {\n      if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n        moveLeft = false;\n      } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n        moveRight = false;\n      } else if ((key.code === \"ArrowUp\" || key.code === \"KeyW\")) {\n          spineboy.state.setAnimation(0, \"walk\", true); // Optional: set jump animation\n      }\n    }\n\n    // Add event listeners so that the window will correctly handle input.\n    // window.addEventListener(\"keydown\", onKeyDown);\n    // window.addEventListener(\"keyup\", onKeyUp);\n\n    // Update the application to move Spineboy if input is detected.\n    app.ticker.add(() => {\n      if (moveLeft) {\n        spineboy.x -= speed;\n      }\n      if (moveRight) {\n        spineboy.x += speed;\n      }\n    });\n\n    const controlBoneNames = [\n      \"gun\"\n    ];\n    const controlBones = [];\n    let dragObject = null;\n    let control = null\n    let lastX = -1, lastY = -1;\n        const endDrag = () => (dragObject = null);\n        app.stage\n          .on('pointerup', endDrag)\n          .on('pointerupoutside', endDrag)\n          .on('pointermove', ({ x, y }) => {\n            if (dragObject) {\n                dragObject.x += x - lastX;\n                dragObject.y += y - lastY;\n                lastX = x;\n                lastY = y;\n            }\n          });\n\n    // wait a frame as pixi bounds do not work until rendered\n    await new Promise((resolve) => requestAnimationFrame(resolve));\n\n    for (var i = 0; i < controlBoneNames.length; i++) {\n      const bone = spineboy.skeleton.findBone(controlBoneNames[i]);\n      const point = { x: bone.worldX, y: bone.worldY };\n      spineboy.skeletonToPixiWorldCoordinates(point);\n\n      control = new PIXI.Graphics()\n        .circle(0, 0, 6)\n        .fill('#ff00ff')\n      control.x = point.x;\n      control.y = point.y;\n      controlBones.push({ bone, control });\n\n      control.interactive = \"static\";\n      control.on('pointerdown', ({ x, y }) => {\n        dragObject = control;\n        lastX = x;\n        lastY = y;\n      })\n    }\n\n    const point = { x: 0, y: 0 };\n    spineboy.beforeUpdateWorldTransforms = () => {\n      for (let { bone, control } of controlBones) {\n        point.x = control.x;\n        point.y = control.y;\n        spineboy.pixiWorldCoordinatesToBone(point, bone);\n        bone.x = point.x;\n        bone.y = point.y;\n      }\n    };\n\n    function run(){\n      spineboy.state.setAnimation(0, \"run\", true);\n    }\n    function shoot(){\n      spineboy.state.setAnimation(1, \"aim\", true);\n      spineboy.state.setAnimation(0, \"shoot\", true);\n    }\n    function jump(){\n      spineboy.state.setAnimation(0, \"jump\", true);\n    }\n    function hoverboard(){\n      spineboy.state.setAnimation(0, \"hoverboard\", true);\n    }\n    function turnLeft(){\n      spineboy.skeleton.scaleX = -1;\n    }\n    function turnRight(){\n      spineboy.skeleton.scaleX = 1;\n    }\n\n    function addControlBones(){\n      app.stage.addChild(control);\n    }\n    function removeControlBones(){\n      app.stage.removeControlBones(control);\n    }\n    return {run, shoot, jump, hoverboard, turnLeft, turnRight, addControlBones, removeControlBones}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}