{"ast":null,"code":"class AnimationStateData {\n  constructor(skeletonData) {\n    this.animationToMixTime = {};\n    /** The mix duration to use when no mix duration has been defined between two animations. */\n    this.defaultMix = 0;\n    if (!skeletonData) throw new Error(\"skeletonData cannot be null.\");\n    this.skeletonData = skeletonData;\n  }\n  /** Sets a mix duration by animation name.\n   *\n   * See {@link #setMixWith()}. */\n  setMix(fromName, toName, duration) {\n    const from = this.skeletonData.findAnimation(fromName);\n    if (!from) throw new Error(`Animation not found: ${fromName}`);\n    const to = this.skeletonData.findAnimation(toName);\n    if (!to) throw new Error(`Animation not found: ${toName}`);\n    this.setMixWith(from, to, duration);\n  }\n  /** Sets the mix duration when changing from the specified animation to the other.\n   *\n   * See {@link TrackEntry#mixDuration}. */\n  setMixWith(from, to, duration) {\n    if (!from) throw new Error(\"from cannot be null.\");\n    if (!to) throw new Error(\"to cannot be null.\");\n    const key = `${from.name}.${to.name}`;\n    this.animationToMixTime[key] = duration;\n  }\n  /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\n   * no mix duration has been set. */\n  getMix(from, to) {\n    const key = `${from.name}.${to.name}`;\n    const value = this.animationToMixTime[key];\n    return value === void 0 ? this.defaultMix : value;\n  }\n}\nexport { AnimationStateData };","map":{"version":3,"names":["AnimationStateData","constructor","skeletonData","animationToMixTime","defaultMix","Error","setMix","fromName","toName","duration","from","findAnimation","to","setMixWith","key","name","getMix","value"],"sources":["../../src/core/AnimationStateData.ts"],"sourcesContent":["import type { SkeletonData } from './SkeletonData';\nimport type { IAnimationStateData, StringMap } from '@pixi-spine/base';\nimport type { Animation } from './Animation';\n\n/** Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed.\n * @public\n * */\nexport class AnimationStateData implements IAnimationStateData<SkeletonData, Animation> {\n    /** The SkeletonData to look up animations when they are specified by name. */\n    skeletonData: SkeletonData;\n\n    animationToMixTime: StringMap<number> = {};\n\n    /** The mix duration to use when no mix duration has been defined between two animations. */\n    defaultMix = 0;\n\n    constructor(skeletonData: SkeletonData) {\n        if (!skeletonData) throw new Error('skeletonData cannot be null.');\n        this.skeletonData = skeletonData;\n    }\n\n    /** Sets a mix duration by animation name.\n     *\n     * See {@link #setMixWith()}. */\n    setMix(fromName: string, toName: string, duration: number) {\n        const from = this.skeletonData.findAnimation(fromName);\n\n        if (!from) throw new Error(`Animation not found: ${fromName}`);\n        const to = this.skeletonData.findAnimation(toName);\n\n        if (!to) throw new Error(`Animation not found: ${toName}`);\n        this.setMixWith(from, to, duration);\n    }\n\n    /** Sets the mix duration when changing from the specified animation to the other.\n     *\n     * See {@link TrackEntry#mixDuration}. */\n    setMixWith(from: Animation, to: Animation, duration: number) {\n        if (!from) throw new Error('from cannot be null.');\n        if (!to) throw new Error('to cannot be null.');\n        const key = `${from.name}.${to.name}`;\n\n        this.animationToMixTime[key] = duration;\n    }\n\n    /** Returns the mix duration to use when changing from the specified animation to the other, or the {@link #defaultMix} if\n     * no mix duration has been set. */\n    getMix(from: Animation, to: Animation) {\n        const key = `${from.name}.${to.name}`;\n        const value = this.animationToMixTime[key];\n\n        return value === undefined ? this.defaultMix : value;\n    }\n}\n"],"mappings":"AAOO,MAAMA,kBAA2E;EASpFC,YAAYC,YAA4B;IALxC,KAAAC,kBAAA,GAAwC,EAAC;IAGzC;IAAa,KAAAC,UAAA;IAGT,IAAI,CAACF,YAAA,EAAoB,UAAIG,KAAA,CAAM,8BAA8B;IACjE,KAAKH,YAAe,GAAAA,YAAA;EAAA;EACxB;AAAA;AAAA;EAKAI,OAAOC,QAAkB,EAAAC,MAAA,EAAgBC,QAAkB;IACvD,MAAMC,IAAO,QAAKR,YAAa,CAAAS,aAAA,CAAcJ,QAAQ;IAErD,IAAI,CAACG,IAAA,EAAY,UAAIL,KAAM,yBAAwBE,QAAU;IAC7D,MAAMK,EAAK,QAAKV,YAAa,CAAAS,aAAA,CAAcH,MAAM;IAEjD,IAAI,CAACI,EAAA,EAAU,UAAIP,KAAM,yBAAwBG,MAAQ;IACpD,KAAAK,UAAA,CAAWH,IAAM,EAAAE,EAAA,EAAIH,QAAQ;EAAA;EACtC;AAAA;AAAA;EAKAI,WAAWH,IAAiB,EAAAE,EAAA,EAAeH,QAAkB;IACzD,IAAI,CAACC,IAAA,EAAY,UAAIL,KAAA,CAAM,sBAAsB;IACjD,IAAI,CAACO,EAAA,EAAU,UAAIP,KAAA,CAAM,oBAAoB;IAC7C,MAAMS,GAAM,MAAGJ,IAAK,CAAAK,IAAA,IAAQH,EAAG,CAAAG,IAAA;IAE1B,KAAAZ,kBAAA,CAAmBW,GAAG,CAAI,GAAAL,QAAA;EAAA;EACnC;AAAA;EAIAO,OAAON,IAAA,EAAiBE,EAAe;IACnC,MAAME,GAAM,MAAGJ,IAAK,CAAAK,IAAA,IAAQH,EAAG,CAAAG,IAAA;IACzB,MAAAE,KAAA,GAAQ,IAAK,CAAAd,kBAAA,CAAmBW,GAAG;IAElC,OAAAG,KAAA,KAAU,KAAY,SAAKb,UAAa,GAAAa,KAAA;EAAA;AAEvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}