{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { VertexAttachment } from \"./attachments/Attachment.js\";\nimport { Color } from \"./Utils.js\";\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\n * across multiple skeletons. */\nexport class Slot {\n  constructor(data, bone) {\n    /** The slot's setup pose data. */\n    _defineProperty(this, \"data\", void 0);\n    /** The bone this slot belongs to. */\n    _defineProperty(this, \"bone\", void 0);\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n     * color tinting. */\n    _defineProperty(this, \"color\", void 0);\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used. */\n    _defineProperty(this, \"darkColor\", null);\n    _defineProperty(this, \"attachment\", null);\n    _defineProperty(this, \"attachmentState\", 0);\n    /** The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the\n     * {@link Sequence#getSetupIndex()}. */\n    _defineProperty(this, \"sequenceIndex\", -1);\n    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\n     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n     *\n     * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\n    _defineProperty(this, \"deform\", new Array());\n    if (!data) throw new Error(\"data cannot be null.\");\n    if (!bone) throw new Error(\"bone cannot be null.\");\n    this.data = data;\n    this.bone = bone;\n    this.color = new Color();\n    this.darkColor = !data.darkColor ? null : new Color();\n    this.setToSetupPose();\n  }\n  /** The skeleton this slot belongs to. */\n  getSkeleton() {\n    return this.bone.skeleton;\n  }\n  /** The current attachment for the slot, or null if the slot has no attachment. */\n  getAttachment() {\n    return this.attachment;\n  }\n  /** Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.\n   * The deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the\n   * specified attachment. */\n  setAttachment(attachment) {\n    if (this.attachment == attachment) return;\n    if (!(attachment instanceof VertexAttachment) || !(this.attachment instanceof VertexAttachment) || attachment.timelineAttachment != this.attachment.timelineAttachment) {\n      this.deform.length = 0;\n    }\n    this.attachment = attachment;\n    this.sequenceIndex = -1;\n  }\n  /** Sets this slot to the setup pose. */\n  setToSetupPose() {\n    this.color.setFromColor(this.data.color);\n    if (this.darkColor) this.darkColor.setFromColor(this.data.darkColor);\n    if (!this.data.attachmentName) this.attachment = null;else {\n      this.attachment = null;\n      this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n    }\n  }\n}","map":{"version":3,"names":["VertexAttachment","Color","Slot","constructor","data","bone","_defineProperty","Array","Error","color","darkColor","setToSetupPose","getSkeleton","skeleton","getAttachment","attachment","setAttachment","timelineAttachment","deform","length","sequenceIndex","setFromColor","attachmentName","index"],"sources":["../src/Slot.ts"],"sourcesContent":[null],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAqBA,gBAAgB,QAAQ,6BAA6B;AAI1E,SAASC,KAAK,QAAQ,YAAY;AAElC;;;AAGA,OAAM,MAAOC,IAAI;EA6BhBC,YAAaC,IAAc,EAAEC,IAAU;IA5BvC;IAAAC,eAAA;IAGA;IAAAA,eAAA;IAGA;;IAAAA,eAAA;IAIA;;IAAAA,eAAA,oBAE0B,IAAI;IAAAA,eAAA,qBAEE,IAAI;IAAAA,eAAA,0BAEV,CAAC;IAE3B;;IAAAA,eAAA,wBAEwB,CAAC,CAAC;IAE1B;;;;IAAAA,eAAA,iBAIS,IAAIC,KAAK,EAAU;IAG3B,IAAI,CAACH,IAAI,EAAE,MAAM,IAAII,KAAK,CAAC,sBAAsB,CAAC;IAClD,IAAI,CAACH,IAAI,EAAE,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;IAClD,IAAI,CAACJ,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACI,KAAK,GAAG,IAAIR,KAAK,EAAE;IACxB,IAAI,CAACS,SAAS,GAAG,CAACN,IAAI,CAACM,SAAS,GAAG,IAAI,GAAG,IAAIT,KAAK,EAAE;IACrD,IAAI,CAACU,cAAc,EAAE;EACtB;EAEA;EACAC,WAAWA,CAAA;IACV,OAAO,IAAI,CAACP,IAAI,CAACQ,QAAQ;EAC1B;EAEA;EACAC,aAAaA,CAAA;IACZ,OAAO,IAAI,CAACC,UAAU;EACvB;EAEA;;;EAGAC,aAAaA,CAAED,UAA6B;IAC3C,IAAI,IAAI,CAACA,UAAU,IAAIA,UAAU,EAAE;IACnC,IAAI,EAAEA,UAAU,YAAYf,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAACe,UAAU,YAAYf,gBAAgB,CAAC,IACxEe,UAAW,CAACE,kBAAkB,IAAuB,IAAI,CAACF,UAAW,CAACE,kBAAkB,EAAE;MAChH,IAAI,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC;;IAEvB,IAAI,CAACJ,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACK,aAAa,GAAG,CAAC,CAAC;EACxB;EAEA;EACAT,cAAcA,CAAA;IACb,IAAI,CAACF,KAAK,CAACY,YAAY,CAAC,IAAI,CAACjB,IAAI,CAACK,KAAK,CAAC;IACxC,IAAI,IAAI,CAACC,SAAS,EAAE,IAAI,CAACA,SAAS,CAACW,YAAY,CAAC,IAAI,CAACjB,IAAI,CAACM,SAAU,CAAC;IACrE,IAAI,CAAC,IAAI,CAACN,IAAI,CAACkB,cAAc,EAC5B,IAAI,CAACP,UAAU,GAAG,IAAI,CAAC,KACnB;MACJ,IAAI,CAACA,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,aAAa,CAAC,IAAI,CAACX,IAAI,CAACQ,QAAQ,CAACC,aAAa,CAAC,IAAI,CAACV,IAAI,CAACmB,KAAK,EAAE,IAAI,CAACnB,IAAI,CAACkB,cAAc,CAAC,CAAC;;EAEjG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}