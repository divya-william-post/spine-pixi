{"ast":null,"code":"import { Attachment } from './Attachment.mjs';\nimport { AttachmentType, Color, Utils } from '@pixi-spine/base';\nconst _RegionAttachment = class extends Attachment {\n  constructor(name, path) {\n    super(name);\n    this.type = AttachmentType.Region;\n    /** The local x translation. */\n    this.x = 0;\n    /** The local y translation. */\n    this.y = 0;\n    /** The local scaleX. */\n    this.scaleX = 1;\n    /** The local scaleY. */\n    this.scaleY = 1;\n    /** The local rotation. */\n    this.rotation = 0;\n    /** The width of the region attachment in Spine. */\n    this.width = 0;\n    /** The height of the region attachment in Spine. */\n    this.height = 0;\n    /** The color to tint the region attachment. */\n    this.color = new Color(1, 1, 1, 1);\n    this.rendererObject = null;\n    this.region = null;\n    this.sequence = null;\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n     *\n     * See {@link #updateOffset()}. */\n    this.offset = Utils.newFloatArray(8);\n    this.uvs = Utils.newFloatArray(8);\n    this.tempColor = new Color(1, 1, 1, 1);\n    this.path = path;\n  }\n  /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\n  updateRegion() {\n    if (!this.region) throw new Error(\"Region not set.\");\n    const region = this.region;\n    const regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n    const regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n    const localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n    const localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n    const localX2 = localX + this.region.width * regionScaleX;\n    const localY2 = localY + this.region.height * regionScaleY;\n    const radians = this.rotation * Math.PI / 180;\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n    const x = this.x;\n    const y = this.y;\n    const localXCos = localX * cos + x;\n    const localXSin = localX * sin;\n    const localYCos = localY * cos + y;\n    const localYSin = localY * sin;\n    const localX2Cos = localX2 * cos + x;\n    const localX2Sin = localX2 * sin;\n    const localY2Cos = localY2 * cos + y;\n    const localY2Sin = localY2 * sin;\n    const offset = this.offset;\n    offset[0] = localXCos - localYSin;\n    offset[1] = localYCos + localXSin;\n    offset[2] = localXCos - localY2Sin;\n    offset[3] = localY2Cos + localXSin;\n    offset[4] = localX2Cos - localY2Sin;\n    offset[5] = localY2Cos + localX2Sin;\n    offset[6] = localX2Cos - localYSin;\n    offset[7] = localYCos + localX2Sin;\n    const uvs = this.uvs;\n    if (region.degrees == 90) {\n      uvs[2] = region.u;\n      uvs[3] = region.v2;\n      uvs[4] = region.u;\n      uvs[5] = region.v;\n      uvs[6] = region.u2;\n      uvs[7] = region.v;\n      uvs[0] = region.u2;\n      uvs[1] = region.v2;\n    } else {\n      uvs[0] = region.u;\n      uvs[1] = region.v2;\n      uvs[2] = region.u;\n      uvs[3] = region.v;\n      uvs[4] = region.u2;\n      uvs[5] = region.v;\n      uvs[6] = region.u2;\n      uvs[7] = region.v2;\n    }\n  }\n  /** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\n   * be changed.\n   * <p>\n   * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n   * Runtimes Guide.\n   * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\n   * @param offset The <code>worldVertices</code> index to begin writing values.\n   * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */\n  computeWorldVertices(slot, worldVertices, offset, stride) {\n    if (this.sequence != null) this.sequence.apply(slot, this);\n    const bone = slot.bone;\n    const vertexOffset = this.offset;\n    const mat = bone.matrix;\n    const x = mat.tx;\n    const y = mat.ty;\n    const a = mat.a;\n    const b = mat.c;\n    const c = mat.b;\n    const d = mat.d;\n    let offsetX = 0;\n    let offsetY = 0;\n    offsetX = vertexOffset[0];\n    offsetY = vertexOffset[1];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[2];\n    offsetY = vertexOffset[3];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[4];\n    offsetY = vertexOffset[5];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[6];\n    offsetY = vertexOffset[7];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n  }\n  copy() {\n    const copy = new _RegionAttachment(this.name, this.path);\n    copy.region = this.region;\n    copy.rendererObject = this.rendererObject;\n    copy.x = this.x;\n    copy.y = this.y;\n    copy.scaleX = this.scaleX;\n    copy.scaleY = this.scaleY;\n    copy.rotation = this.rotation;\n    copy.width = this.width;\n    copy.height = this.height;\n    Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n    Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n    copy.color.setFromColor(this.color);\n    copy.sequence = this.sequence != null ? this.sequence.copy() : null;\n    return copy;\n  }\n};\nlet RegionAttachment = _RegionAttachment;\nRegionAttachment.X1 = 0;\nRegionAttachment.Y1 = 1;\nRegionAttachment.C1R = 2;\nRegionAttachment.C1G = 3;\nRegionAttachment.C1B = 4;\nRegionAttachment.C1A = 5;\nRegionAttachment.U1 = 6;\nRegionAttachment.V1 = 7;\nRegionAttachment.X2 = 8;\nRegionAttachment.Y2 = 9;\nRegionAttachment.C2R = 10;\nRegionAttachment.C2G = 11;\nRegionAttachment.C2B = 12;\nRegionAttachment.C2A = 13;\nRegionAttachment.U2 = 14;\nRegionAttachment.V2 = 15;\nRegionAttachment.X3 = 16;\nRegionAttachment.Y3 = 17;\nRegionAttachment.C3R = 18;\nRegionAttachment.C3G = 19;\nRegionAttachment.C3B = 20;\nRegionAttachment.C3A = 21;\nRegionAttachment.U3 = 22;\nRegionAttachment.V3 = 23;\nRegionAttachment.X4 = 24;\nRegionAttachment.Y4 = 25;\nRegionAttachment.C4R = 26;\nRegionAttachment.C4G = 27;\nRegionAttachment.C4B = 28;\nRegionAttachment.C4A = 29;\nRegionAttachment.U4 = 30;\nRegionAttachment.V4 = 31;\nexport { RegionAttachment };","map":{"version":3,"names":["_RegionAttachment","Attachment","constructor","name","path","type","AttachmentType","Region","x","y","scaleX","scaleY","rotation","width","height","color","Color","rendererObject","region","sequence","offset","Utils","newFloatArray","uvs","tempColor","updateRegion","Error","regionScaleX","originalWidth","regionScaleY","originalHeight","localX","offsetX","localY","offsetY","localX2","localY2","radians","Math","PI","cos","sin","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","degrees","u","v2","v","u2","computeWorldVertices","slot","worldVertices","stride","apply","bone","vertexOffset","mat","matrix","tx","ty","a","b","c","d","copy","arrayCopy","setFromColor","RegionAttachment","X1","Y1","C1R","C1G","C1B","C1A","U1","V1","X2","Y2","C2R","C2G","C2B","C2A","U2","V2","X3","Y3","C3R","C3G","C3B","C3A","U3","V3","X4","Y4","C4R","C4G","C4B","C4A","U4","V4"],"sources":["../../../src/core/attachments/RegionAttachment.ts"],"sourcesContent":["import { Attachment } from './Attachment';\nimport { AttachmentType, NumberArrayLike, Color, TextureRegion, Utils, IHasTextureRegion, IRegionAttachment } from '@pixi-spine/base';\nimport type { Sequence } from './Sequence';\nimport type { Slot } from '../Slot';\n\n/**\n * @public\n */\nexport class RegionAttachment extends Attachment implements IRegionAttachment, IHasTextureRegion {\n    type = AttachmentType.Region;\n\n    /** The local x translation. */\n    x = 0;\n\n    /** The local y translation. */\n    y = 0;\n\n    /** The local scaleX. */\n    scaleX = 1;\n\n    /** The local scaleY. */\n    scaleY = 1;\n\n    /** The local rotation. */\n    rotation = 0;\n\n    /** The width of the region attachment in Spine. */\n    width = 0;\n\n    /** The height of the region attachment in Spine. */\n    height = 0;\n\n    /** The color to tint the region attachment. */\n    color = new Color(1, 1, 1, 1);\n\n    /** The name of the texture region for this attachment. */\n    path: string;\n\n    private rendererObject: any = null;\n    region: TextureRegion | null = null;\n    sequence: Sequence | null = null;\n\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n     *\n     * See {@link #updateOffset()}. */\n    offset = Utils.newFloatArray(8);\n\n    uvs = Utils.newFloatArray(8);\n\n    tempColor = new Color(1, 1, 1, 1);\n\n    constructor(name: string, path: string) {\n        super(name);\n        this.path = path;\n    }\n\n    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\n    updateRegion(): void {\n        if (!this.region) throw new Error('Region not set.');\n        const region = this.region;\n        const regionScaleX = (this.width / this.region.originalWidth) * this.scaleX;\n        const regionScaleY = (this.height / this.region.originalHeight) * this.scaleY;\n        const localX = (-this.width / 2) * this.scaleX + this.region.offsetX * regionScaleX;\n        const localY = (-this.height / 2) * this.scaleY + this.region.offsetY * regionScaleY;\n        const localX2 = localX + this.region.width * regionScaleX;\n        const localY2 = localY + this.region.height * regionScaleY;\n        const radians = (this.rotation * Math.PI) / 180;\n        const cos = Math.cos(radians);\n        const sin = Math.sin(radians);\n        const x = this.x;\n        const y = this.y;\n        const localXCos = localX * cos + x;\n        const localXSin = localX * sin;\n        const localYCos = localY * cos + y;\n        const localYSin = localY * sin;\n        const localX2Cos = localX2 * cos + x;\n        const localX2Sin = localX2 * sin;\n        const localY2Cos = localY2 * cos + y;\n        const localY2Sin = localY2 * sin;\n        const offset = this.offset;\n\n        offset[0] = localXCos - localYSin;\n        offset[1] = localYCos + localXSin;\n        offset[2] = localXCos - localY2Sin;\n        offset[3] = localY2Cos + localXSin;\n        offset[4] = localX2Cos - localY2Sin;\n        offset[5] = localY2Cos + localX2Sin;\n        offset[6] = localX2Cos - localYSin;\n        offset[7] = localYCos + localX2Sin;\n\n        const uvs = this.uvs;\n\n        if (region.degrees == 90) {\n            uvs[2] = region.u;\n            uvs[3] = region.v2;\n            uvs[4] = region.u;\n            uvs[5] = region.v;\n            uvs[6] = region.u2;\n            uvs[7] = region.v;\n            uvs[0] = region.u2;\n            uvs[1] = region.v2;\n        } else {\n            uvs[0] = region.u;\n            uvs[1] = region.v2;\n            uvs[2] = region.u;\n            uvs[3] = region.v;\n            uvs[4] = region.u2;\n            uvs[5] = region.v;\n            uvs[6] = region.u2;\n            uvs[7] = region.v2;\n        }\n    }\n\n    /** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\n     * be changed.\n     * <p>\n     * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n     * Runtimes Guide.\n     * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\n     * @param offset The <code>worldVertices</code> index to begin writing values.\n     * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */\n    computeWorldVertices(slot: Slot, worldVertices: NumberArrayLike, offset: number, stride: number) {\n        if (this.sequence != null) this.sequence.apply(slot, this);\n\n        const bone = slot.bone;\n        const vertexOffset = this.offset;\n        const mat = bone.matrix;\n        const x = mat.tx;\n        const y = mat.ty;\n        const a = mat.a;\n        const b = mat.c;\n        const c = mat.b;\n        const d = mat.d;\n        let offsetX = 0;\n        let offsetY = 0;\n\n        offsetX = vertexOffset[0];\n        offsetY = vertexOffset[1];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // br\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n\n        offsetX = vertexOffset[2];\n        offsetY = vertexOffset[3];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n\n        offsetX = vertexOffset[4];\n        offsetY = vertexOffset[5];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n        offset += stride;\n\n        offsetX = vertexOffset[6];\n        offsetY = vertexOffset[7];\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    }\n\n    copy(): Attachment {\n        const copy = new RegionAttachment(this.name, this.path);\n\n        copy.region = this.region;\n        copy.rendererObject = this.rendererObject;\n        copy.x = this.x;\n        copy.y = this.y;\n        copy.scaleX = this.scaleX;\n        copy.scaleY = this.scaleY;\n        copy.rotation = this.rotation;\n        copy.width = this.width;\n        copy.height = this.height;\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n        copy.color.setFromColor(this.color);\n        copy.sequence = this.sequence != null ? this.sequence.copy() : null;\n\n        return copy;\n    }\n\n    static X1 = 0;\n    static Y1 = 1;\n    static C1R = 2;\n    static C1G = 3;\n    static C1B = 4;\n    static C1A = 5;\n    static U1 = 6;\n    static V1 = 7;\n\n    static X2 = 8;\n    static Y2 = 9;\n    static C2R = 10;\n    static C2G = 11;\n    static C2B = 12;\n    static C2A = 13;\n    static U2 = 14;\n    static V2 = 15;\n\n    static X3 = 16;\n    static Y3 = 17;\n    static C3R = 18;\n    static C3G = 19;\n    static C3B = 20;\n    static C3A = 21;\n    static U3 = 22;\n    static V3 = 23;\n\n    static X4 = 24;\n    static Y4 = 25;\n    static C4R = 26;\n    static C4G = 27;\n    static C4B = 28;\n    static C4A = 29;\n    static U4 = 30;\n    static V4 = 31;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}