{"ast":null,"code":"import \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nclass BinaryInput {\n  constructor(data, strings = new Array(), index = 0, buffer = new DataView(data.buffer)) {\n    this.strings = strings;\n    this.index = index;\n    this.buffer = buffer;\n  }\n  readByte() {\n    return this.buffer.getInt8(this.index++);\n  }\n  readUnsignedByte() {\n    return this.buffer.getUint8(this.index++);\n  }\n  readShort() {\n    const value = this.buffer.getInt16(this.index);\n    this.index += 2;\n    return value;\n  }\n  readInt32() {\n    const value = this.buffer.getInt32(this.index);\n    this.index += 4;\n    return value;\n  }\n  readInt(optimizePositive) {\n    let b = this.readByte();\n    let result = b & 127;\n    if ((b & 128) != 0) {\n      b = this.readByte();\n      result |= (b & 127) << 7;\n      if ((b & 128) != 0) {\n        b = this.readByte();\n        result |= (b & 127) << 14;\n        if ((b & 128) != 0) {\n          b = this.readByte();\n          result |= (b & 127) << 21;\n          if ((b & 128) != 0) {\n            b = this.readByte();\n            result |= (b & 127) << 28;\n          }\n        }\n      }\n    }\n    return optimizePositive ? result : result >>> 1 ^ -(result & 1);\n  }\n  readStringRef() {\n    const index = this.readInt(true);\n    return index == 0 ? null : this.strings[index - 1];\n  }\n  readString() {\n    let byteCount = this.readInt(true);\n    switch (byteCount) {\n      case 0:\n        return null;\n      case 1:\n        return \"\";\n    }\n    byteCount--;\n    let chars = \"\";\n    for (let i = 0; i < byteCount;) {\n      const b = this.readUnsignedByte();\n      switch (b >> 4) {\n        case 12:\n        case 13:\n          chars += String.fromCharCode((b & 31) << 6 | this.readByte() & 63);\n          i += 2;\n          break;\n        case 14:\n          chars += String.fromCharCode((b & 15) << 12 | (this.readByte() & 63) << 6 | this.readByte() & 63);\n          i += 3;\n          break;\n        default:\n          chars += String.fromCharCode(b);\n          i++;\n      }\n    }\n    return chars;\n  }\n  readFloat() {\n    const value = this.buffer.getFloat32(this.index);\n    this.index += 4;\n    return value;\n  }\n  readBoolean() {\n    return this.readByte() != 0;\n  }\n}\nexport { BinaryInput };","map":{"version":3,"names":["BinaryInput","constructor","data","strings","Array","index","buffer","DataView","readByte","getInt8","readUnsignedByte","getUint8","readShort","value","getInt16","readInt32","getInt32","readInt","optimizePositive","b","result","readStringRef","readString","byteCount","chars","i","String","fromCharCode","readFloat","getFloat32","readBoolean"],"sources":["../../src/core/BinaryInput.ts"],"sourcesContent":["/**\n * @public\n */\nexport class BinaryInput {\n    constructor(data: Uint8Array, public strings = new Array<string>(), private index: number = 0, private buffer = new DataView(data.buffer)) {}\n\n    readByte(): number {\n        return this.buffer.getInt8(this.index++);\n    }\n\n    readUnsignedByte(): number {\n        return this.buffer.getUint8(this.index++);\n    }\n\n    readShort(): number {\n        const value = this.buffer.getInt16(this.index);\n\n        this.index += 2;\n\n        return value;\n    }\n\n    readInt32(): number {\n        const value = this.buffer.getInt32(this.index);\n\n        this.index += 4;\n\n        return value;\n    }\n\n    readInt(optimizePositive: boolean) {\n        let b = this.readByte();\n        let result = b & 0x7f;\n\n        if ((b & 0x80) != 0) {\n            b = this.readByte();\n            result |= (b & 0x7f) << 7;\n            if ((b & 0x80) != 0) {\n                b = this.readByte();\n                result |= (b & 0x7f) << 14;\n                if ((b & 0x80) != 0) {\n                    b = this.readByte();\n                    result |= (b & 0x7f) << 21;\n                    if ((b & 0x80) != 0) {\n                        b = this.readByte();\n                        result |= (b & 0x7f) << 28;\n                    }\n                }\n            }\n        }\n\n        return optimizePositive ? result : (result >>> 1) ^ -(result & 1);\n    }\n\n    readStringRef(): string | null {\n        const index = this.readInt(true);\n\n        return index == 0 ? null : this.strings[index - 1];\n    }\n\n    readString(): string | null {\n        let byteCount = this.readInt(true);\n\n        switch (byteCount) {\n            case 0:\n                return null;\n            case 1:\n                return '';\n        }\n        byteCount--;\n        let chars = '';\n\n        for (let i = 0; i < byteCount; ) {\n            const b = this.readUnsignedByte();\n\n            switch (b >> 4) {\n                case 12:\n                case 13:\n                    chars += String.fromCharCode(((b & 0x1f) << 6) | (this.readByte() & 0x3f));\n                    i += 2;\n                    break;\n                case 14:\n                    chars += String.fromCharCode(((b & 0x0f) << 12) | ((this.readByte() & 0x3f) << 6) | (this.readByte() & 0x3f));\n                    i += 3;\n                    break;\n                default:\n                    chars += String.fromCharCode(b);\n                    i++;\n            }\n        }\n\n        return chars;\n    }\n\n    readFloat(): number {\n        const value = this.buffer.getFloat32(this.index);\n\n        this.index += 4;\n\n        return value;\n    }\n\n    readBoolean(): boolean {\n        return this.readByte() != 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}