{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nexport async function initSpine() {\n  const app = new PIXI.Application();\n  await app.init({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    resolution: window.devicePixelRatio || 1,\n    autoDensity: true,\n    resizeTo: window,\n    backgroundColor: 0x2c3e50,\n    hello: true\n  });\n  document.body.appendChild(app.view);\n\n  // Load Spineboy assets\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.5\n  });\n  spineboy.state.data.defaultMix = 0.2;\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n  spineboy.state.setAnimation(0, \"walk\", true);\n  app.stage.addChild(spineboy);\n\n  // Control bones setup\n  const controlBoneNames = [\"crosshair\"]; // Control bones\n  const controlBones = []; // This will hold control bone references\n\n  // Add control graphics for each control bone\n  for (const name of controlBoneNames) {\n    const bone = spineboy.skeleton.findBone(name);\n    if (bone) {\n      const point = {\n        x: bone.worldX,\n        y: bone.worldY\n      };\n      spineboy.skeletonToPixiWorldCoordinates(point);\n      const control = new PIXI.Graphics().circle(0, 0, 6).fill('#ff00ff');\n      control.x = point.x;\n      control.y = point.y;\n      controlBones.push({\n        bone,\n        control\n      });\n      app.stage.addChild(control);\n    }\n  }\n  let moveLeft = false,\n    moveRight = false,\n    speed = 5;\n  const easing = 0.05; // Easing factor for smoother following\n\n  // Update the application to move Spineboy and sack if input is detected\n  app.ticker.add(() => {\n    if (moveLeft) {\n      spineboy.x -= speed;\n    }\n    if (moveRight) {\n      spineboy.x += speed;\n    }\n\n    // Update control bones' positions\n    for (let {\n      bone,\n      control\n    } of controlBones) {\n      const point = {\n        x: control.x,\n        y: control.y\n      };\n      spineboy.pixiWorldCoordinatesToBone(point, bone);\n      bone.x = point.x;\n      bone.y = point.y;\n    }\n  });\n\n  // Load Sack assets\n  PIXI.Assets.add({\n    alias: \"sackData\",\n    src: \"./sack-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"sackAtlas\",\n    src: \"./sack-pma.atlas\"\n  });\n  await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n  const sack = spine.Spine.from({\n    skeleton: \"sackData\",\n    atlas: \"sackAtlas\",\n    scale: 0.2\n  });\n  sack.state.setAnimation(0, \"cape-follow-example\", true);\n  sack.x = spineboy.x - 100; // Start the sack slightly behind Spineboy\n  sack.y = spineboy.y;\n  app.stage.addChild(sack);\n\n  // Update the sack's position to follow Spineboy\n  const sackFollowDistance = 100; // Distance behind Spineboy\n  app.ticker.add(() => {\n    let targetX = spineboy.x - (spineboy.skeleton.scaleX === 1 ? sackFollowDistance : -sackFollowDistance);\n    sack.x += (targetX - sack.x) * easing; // Easing effect\n    sack.y += (spineboy.y - sack.y) * easing; // Follow Y position\n  });\n\n  // Handle input events\n  function onKeyDown(key) {\n    spineboy.state.setAnimation(0, \"walk\", true);\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = true;\n      spineboy.skeleton.scaleX = -1;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = true;\n      spineboy.skeleton.scaleX = 1;\n    }\n  }\n  function onKeyUp(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = false;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = false;\n    }\n  }\n  window.addEventListener(\"keydown\", onKeyDown);\n  window.addEventListener(\"keyup\", onKeyUp);\n}\n\n// Call initSpine to start the application\ninitSpine();","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","window","innerWidth","height","innerHeight","resolution","devicePixelRatio","autoDensity","resizeTo","backgroundColor","hello","document","body","appendChild","view","Assets","add","alias","src","load","spineboy","spine","Spine","from","skeleton","atlas","scale","state","data","defaultMix","x","y","getBounds","setAnimation","stage","addChild","controlBoneNames","controlBones","name","bone","findBone","point","worldX","worldY","skeletonToPixiWorldCoordinates","control","Graphics","circle","fill","push","moveLeft","moveRight","speed","easing","ticker","pixiWorldCoordinatesToBone","sack","sackFollowDistance","targetX","scaleX","onKeyDown","key","code","onKeyUp","addEventListener"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\nexport async function initSpine() {\n    const app = new PIXI.Application();\n    await app.init({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n        hello: true,\n    });\n    document.body.appendChild(app.view);\n\n    // Load Spineboy assets\n    PIXI.Assets.add({ alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({ alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n    const spineboy = spine.Spine.from({ skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", scale: 0.5 });\n    spineboy.state.data.defaultMix = 0.2;\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n    spineboy.state.setAnimation(0, \"walk\", true);\n    app.stage.addChild(spineboy);\n\n    // Control bones setup\n    const controlBoneNames = [\"crosshair\"]; // Control bones\n    const controlBones = []; // This will hold control bone references\n\n    // Add control graphics for each control bone\n    for (const name of controlBoneNames) {\n        const bone = spineboy.skeleton.findBone(name);\n        if (bone) {\n            const point = { x: bone.worldX, y: bone.worldY };\n            spineboy.skeletonToPixiWorldCoordinates(point);\n\n            const control = new PIXI.Graphics()\n                .circle(0, 0, 6)\n                .fill('#ff00ff');\n            control.x = point.x;\n            control.y = point.y;\n            controlBones.push({ bone, control });\n            app.stage.addChild(control);\n        }\n    }\n\n    let moveLeft = false, moveRight = false, speed = 5;\n    const easing = 0.05; // Easing factor for smoother following\n\n    // Update the application to move Spineboy and sack if input is detected\n    app.ticker.add(() => {\n        if (moveLeft) {\n            spineboy.x -= speed;\n        }\n        if (moveRight) {\n            spineboy.x += speed;\n        }\n\n        // Update control bones' positions\n        for (let { bone, control } of controlBones) {\n            const point = { x: control.x, y: control.y };\n            spineboy.pixiWorldCoordinatesToBone(point, bone);\n            bone.x = point.x;\n            bone.y = point.y;\n        }\n    });\n\n    // Load Sack assets\n    PIXI.Assets.add({ alias: \"sackData\", src: \"./sack-pro.skel\" });\n    PIXI.Assets.add({ alias: \"sackAtlas\", src: \"./sack-pma.atlas\" });\n    await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n\n    const sack = spine.Spine.from({ skeleton: \"sackData\", atlas: \"sackAtlas\", scale: 0.2 });\n    sack.state.setAnimation(0, \"cape-follow-example\", true);\n    sack.x = spineboy.x - 100; // Start the sack slightly behind Spineboy\n    sack.y = spineboy.y;\n    app.stage.addChild(sack);\n\n    // Update the sack's position to follow Spineboy\n    const sackFollowDistance = 100; // Distance behind Spineboy\n    app.ticker.add(() => {\n        let targetX = spineboy.x - (spineboy.skeleton.scaleX === 1 ? sackFollowDistance : -sackFollowDistance);\n        sack.x += (targetX - sack.x) * easing; // Easing effect\n        sack.y += (spineboy.y - sack.y) * easing; // Follow Y position\n    });\n    \n    // Handle input events\n    function onKeyDown(key) {\n        spineboy.state.setAnimation(0, \"walk\", true);\n        if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n            moveLeft = true;\n            spineboy.skeleton.scaleX = -1;\n        } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n            moveRight = true;\n            spineboy.skeleton.scaleX = 1;\n        }\n    }\n    function onKeyUp(key) {\n        if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n            moveLeft = false;\n        } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n            moveRight = false;\n        }\n    }\n    window.addEventListener(\"keydown\", onKeyDown);\n    window.addEventListener(\"keyup\", onKeyUp);\n}\n\n// Call initSpine to start the application\ninitSpine();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}