{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color } from \"./Utils.js\";\n/** Stores the setup pose for a {@link Bone}. */\nexport class BoneData {\n  constructor(index, name, parent) {\n    /** The index of the bone in {@link Skeleton#getBones()}. */\n    _defineProperty(this, \"index\", 0);\n    /** The name of the bone, which is unique across all bones in the skeleton. */\n    _defineProperty(this, \"name\", void 0);\n    /** @returns May be null. */\n    _defineProperty(this, \"parent\", null);\n    /** The bone's length. */\n    _defineProperty(this, \"length\", 0);\n    /** The local x translation. */\n    _defineProperty(this, \"x\", 0);\n    /** The local y translation. */\n    _defineProperty(this, \"y\", 0);\n    /** The local rotation. */\n    _defineProperty(this, \"rotation\", 0);\n    /** The local scaleX. */\n    _defineProperty(this, \"scaleX\", 1);\n    /** The local scaleY. */\n    _defineProperty(this, \"scaleY\", 1);\n    /** The local shearX. */\n    _defineProperty(this, \"shearX\", 0);\n    /** The local shearX. */\n    _defineProperty(this, \"shearY\", 0);\n    /** The transform mode for how parent world transforms affect this bone. */\n    _defineProperty(this, \"transformMode\", TransformMode.Normal);\n    /** When true, {@link Skeleton#updateWorldTransform()} only updates this bone if the {@link Skeleton#skin} contains this\n      * bone.\n      * @see Skin#bones */\n    _defineProperty(this, \"skinRequired\", false);\n    /** The color of the bone as it was in Spine. Available only when nonessential data was exported. Bones are not usually\n     * rendered at runtime. */\n    _defineProperty(this, \"color\", new Color());\n    if (index < 0) throw new Error(\"index must be >= 0.\");\n    if (!name) throw new Error(\"name cannot be null.\");\n    this.index = index;\n    this.name = name;\n    this.parent = parent;\n  }\n}\n/** Determines how a bone inherits world transforms from parent bones. */\nexport var TransformMode;\n(function (TransformMode) {\n  TransformMode[TransformMode[\"Normal\"] = 0] = \"Normal\";\n  TransformMode[TransformMode[\"OnlyTranslation\"] = 1] = \"OnlyTranslation\";\n  TransformMode[TransformMode[\"NoRotationOrReflection\"] = 2] = \"NoRotationOrReflection\";\n  TransformMode[TransformMode[\"NoScale\"] = 3] = \"NoScale\";\n  TransformMode[TransformMode[\"NoScaleOrReflection\"] = 4] = \"NoScaleOrReflection\";\n})(TransformMode || (TransformMode = {}));","map":{"version":3,"names":["Color","BoneData","constructor","index","name","parent","_defineProperty","TransformMode","Normal","Error"],"sources":["../src/BoneData.ts"],"sourcesContent":[null],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAASA,KAAK,QAAQ,YAAY;AAElC;AACA,OAAM,MAAOC,QAAQ;EA8CpBC,YAAaC,KAAa,EAAEC,IAAY,EAAEC,MAAuB;IA7CjE;IAAAC,eAAA,gBACgB,CAAC;IAEjB;IAAAA,eAAA;IAGA;IAAAA,eAAA,iBAC0B,IAAI;IAE9B;IAAAA,eAAA,iBACiB,CAAC;IAElB;IAAAA,eAAA,YACI,CAAC;IAEL;IAAAA,eAAA,YACI,CAAC;IAEL;IAAAA,eAAA,mBACW,CAAC;IAEZ;IAAAA,eAAA,iBACS,CAAC;IAEV;IAAAA,eAAA,iBACS,CAAC;IAEV;IAAAA,eAAA,iBACS,CAAC;IAEV;IAAAA,eAAA,iBACS,CAAC;IAEV;IAAAA,eAAA,wBACgBC,aAAa,CAACC,MAAM;IAEpC;;;IAAAF,eAAA,uBAGe,KAAK;IAEpB;;IAAAA,eAAA,gBAEQ,IAAIN,KAAK,EAAE;IAGlB,IAAIG,KAAK,GAAG,CAAC,EAAE,MAAM,IAAIM,KAAK,CAAC,qBAAqB,CAAC;IACrD,IAAI,CAACL,IAAI,EAAE,MAAM,IAAIK,KAAK,CAAC,sBAAsB,CAAC;IAClD,IAAI,CAACN,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;AAGD;AACA,WAAYE,aAA+F;AAA3G,WAAYA,aAAa;EAAGA,aAAA,CAAAA,aAAA,0BAAM;EAAEA,aAAA,CAAAA,aAAA,4CAAe;EAAEA,aAAA,CAAAA,aAAA,0DAAsB;EAAEA,aAAA,CAAAA,aAAA,4BAAO;EAAEA,aAAA,CAAAA,aAAA,oDAAmB;AAAC,CAAC,EAA/FA,aAAa,KAAbA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}