{"ast":null,"code":"import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color, MathUtils } from '@pixi-spine/base';\nclass PointAttachment extends VertexAttachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Point;\n    this.x = 0;\n    this.y = 0;\n    this.rotation = 0;\n    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n     * are not usually rendered at runtime. */\n    this.color = new Color(0.38, 0.94, 0, 1);\n  }\n  computeWorldPosition(bone, point) {\n    const mat = bone.matrix;\n    point.x = this.x * mat.a + this.y * mat.c + bone.worldX;\n    point.y = this.x * mat.b + this.y * mat.d + bone.worldY;\n    return point;\n  }\n  computeWorldRotation(bone) {\n    const mat = bone.matrix;\n    const cos = MathUtils.cosDeg(this.rotation);\n    const sin = MathUtils.sinDeg(this.rotation);\n    const x = cos * mat.a + sin * mat.c;\n    const y = cos * mat.b + sin * mat.d;\n    return Math.atan2(y, x) * MathUtils.radDeg;\n  }\n  copy() {\n    const copy = new PointAttachment(this.name);\n    copy.x = this.x;\n    copy.y = this.y;\n    copy.rotation = this.rotation;\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n}\nexport { PointAttachment };","map":{"version":3,"names":["PointAttachment","VertexAttachment","constructor","name","type","AttachmentType","Point","x","y","rotation","color","Color","computeWorldPosition","bone","point","mat","matrix","a","c","worldX","b","d","worldY","computeWorldRotation","cos","MathUtils","cosDeg","sin","sinDeg","Math","atan2","radDeg","copy","setFromColor"],"sources":["../../../src/core/attachments/PointAttachment.ts"],"sourcesContent":["import { Attachment, VertexAttachment } from './Attachment';\nimport { AttachmentType, Color, MathUtils, Vector2 } from '@pixi-spine/base';\nimport type { Bone } from '../Bone';\n\n/**\n * @public\n */\nexport class PointAttachment extends VertexAttachment {\n    type = AttachmentType.Point;\n\n    x = 0;\n    y = 0;\n    rotation = 0;\n\n    /** The color of the point attachment as it was in Spine. Available only when nonessential data was exported. Point attachments\n     * are not usually rendered at runtime. */\n    color = new Color(0.38, 0.94, 0, 1);\n\n    constructor(name: string) {\n        super(name);\n    }\n\n    computeWorldPosition(bone: Bone, point: Vector2) {\n        const mat = bone.matrix;\n\n        point.x = this.x * mat.a + this.y * mat.c + bone.worldX;\n        point.y = this.x * mat.b + this.y * mat.d + bone.worldY;\n\n        return point;\n    }\n\n    computeWorldRotation(bone: Bone) {\n        const mat = bone.matrix;\n        const cos = MathUtils.cosDeg(this.rotation);\n        const sin = MathUtils.sinDeg(this.rotation);\n        const x = cos * mat.a + sin * mat.c;\n        const y = cos * mat.b + sin * mat.d;\n\n        return Math.atan2(y, x) * MathUtils.radDeg;\n    }\n\n    copy(): Attachment {\n        const copy = new PointAttachment(this.name);\n\n        copy.x = this.x;\n        copy.y = this.y;\n        copy.rotation = this.rotation;\n        copy.color.setFromColor(this.color);\n\n        return copy;\n    }\n}\n"],"mappings":";;AAOO,MAAMA,eAAA,SAAwBC,gBAAiB;EAWlDC,YAAYC,IAAc;IACtB,MAAMA,IAAI;IAXd,KAAAC,IAAA,GAAOC,cAAe,CAAAC,KAAA;IAElB,KAAAC,CAAA;IACA,KAAAC,CAAA;IACO,KAAAC,QAAA;IAIX;AAAA;IAAA,KAAAC,KAAA,GAAQ,IAAIC,KAAA,CAAM,IAAM,QAAM,GAAG,CAAC;EAAA;EAMlCC,qBAAqBC,IAAA,EAAYC,KAAgB;IAC7C,MAAMC,GAAA,GAAMF,IAAK,CAAAG,MAAA;IAEXF,KAAA,CAAAP,CAAA,GAAI,KAAKA,CAAI,GAAAQ,GAAA,CAAIE,CAAA,GAAI,IAAK,CAAAT,CAAA,GAAIO,GAAI,CAAAG,CAAA,GAAIL,IAAK,CAAAM,MAAA;IAC3CL,KAAA,CAAAN,CAAA,GAAI,KAAKD,CAAI,GAAAQ,GAAA,CAAIK,CAAA,GAAI,IAAK,CAAAZ,CAAA,GAAIO,GAAI,CAAAM,CAAA,GAAIR,IAAK,CAAAS,MAAA;IAE1C,OAAAR,KAAA;EAAA;EAGXS,qBAAqBV,IAAY;IAC7B,MAAME,GAAA,GAAMF,IAAK,CAAAG,MAAA;IACjB,MAAMQ,GAAM,GAAAC,SAAA,CAAUC,MAAO,MAAKjB,QAAQ;IAC1C,MAAMkB,GAAM,GAAAF,SAAA,CAAUG,MAAO,MAAKnB,QAAQ;IAC1C,MAAMF,CAAI,GAAAiB,GAAA,GAAMT,GAAI,CAAAE,CAAA,GAAIU,GAAA,GAAMZ,GAAI,CAAAG,CAAA;IAClC,MAAMV,CAAI,GAAAgB,GAAA,GAAMT,GAAI,CAAAK,CAAA,GAAIO,GAAA,GAAMZ,GAAI,CAAAM,CAAA;IAElC,OAAOQ,IAAK,CAAAC,KAAA,CAAMtB,CAAG,EAAAD,CAAC,IAAIkB,SAAU,CAAAM,MAAA;EAAA;EAGxCC,IAAmBA,CAAA;IACf,MAAMA,IAAO,OAAIhC,eAAgB,MAAKG,IAAI;IAE1C6B,IAAA,CAAKzB,CAAA,GAAI,IAAK,CAAAA,CAAA;IACdyB,IAAA,CAAKxB,CAAA,GAAI,IAAK,CAAAA,CAAA;IACdwB,IAAA,CAAKvB,QAAA,GAAW,IAAK,CAAAA,QAAA;IAChBuB,IAAA,CAAAtB,KAAA,CAAMuB,YAAa,MAAKvB,KAAK;IAE3B,OAAAsB,IAAA;EAAA;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}