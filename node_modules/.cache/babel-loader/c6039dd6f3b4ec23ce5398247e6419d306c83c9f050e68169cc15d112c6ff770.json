{"ast":null,"code":"import { ConstraintData } from './ConstraintData.mjs';\nclass TransformConstraintData extends ConstraintData {\n  constructor(name) {\n    super(name, 0, false);\n    /** The bones that will be modified by this transform constraint. */\n    this.bones = new Array();\n    /** The target bone whose world transform will be copied to the constrained bones. */\n    this._target = null;\n    this.mixRotate = 0;\n    this.mixX = 0;\n    this.mixY = 0;\n    this.mixScaleX = 0;\n    this.mixScaleY = 0;\n    this.mixShearY = 0;\n    /** An offset added to the constrained bone rotation. */\n    this.offsetRotation = 0;\n    /** An offset added to the constrained bone X translation. */\n    this.offsetX = 0;\n    /** An offset added to the constrained bone Y translation. */\n    this.offsetY = 0;\n    /** An offset added to the constrained bone scaleX. */\n    this.offsetScaleX = 0;\n    /** An offset added to the constrained bone scaleY. */\n    this.offsetScaleY = 0;\n    /** An offset added to the constrained bone shearY. */\n    this.offsetShearY = 0;\n    this.relative = false;\n    this.local = false;\n  }\n  set target(boneData) {\n    this._target = boneData;\n  }\n  get target() {\n    if (!this._target) throw new Error(\"BoneData not set.\");else return this._target;\n  }\n}\nexport { TransformConstraintData };","map":{"version":3,"names":["TransformConstraintData","ConstraintData","constructor","name","bones","Array","_target","mixRotate","mixX","mixY","mixScaleX","mixScaleY","mixShearY","offsetRotation","offsetX","offsetY","offsetScaleX","offsetScaleY","offsetShearY","relative","local","target","boneData","Error"],"sources":["../../src/core/TransformConstraintData.ts"],"sourcesContent":["import type { BoneData } from './BoneData';\nimport { ConstraintData } from './ConstraintData';\n\n/** Stores the setup pose for a {@link TransformConstraint}.\n *\n * See [Transform constraints](http://esotericsoftware.com/spine-transform-constraints) in the Spine User Guide.\n * @public\n * */\nexport class TransformConstraintData extends ConstraintData {\n    /** The bones that will be modified by this transform constraint. */\n    bones = new Array<BoneData>();\n\n    /** The target bone whose world transform will be copied to the constrained bones. */\n    private _target: BoneData | null = null;\n    public set target(boneData: BoneData) {\n        this._target = boneData;\n    }\n    public get target() {\n        if (!this._target) throw new Error('BoneData not set.');\n        else return this._target;\n    }\n\n    mixRotate = 0;\n    mixX = 0;\n    mixY = 0;\n    mixScaleX = 0;\n    mixScaleY = 0;\n    mixShearY = 0;\n\n    /** An offset added to the constrained bone rotation. */\n    offsetRotation = 0;\n\n    /** An offset added to the constrained bone X translation. */\n    offsetX = 0;\n\n    /** An offset added to the constrained bone Y translation. */\n    offsetY = 0;\n\n    /** An offset added to the constrained bone scaleX. */\n    offsetScaleX = 0;\n\n    /** An offset added to the constrained bone scaleY. */\n    offsetScaleY = 0;\n\n    /** An offset added to the constrained bone shearY. */\n    offsetShearY = 0;\n\n    relative = false;\n    local = false;\n\n    constructor(name: string) {\n        super(name, 0, false);\n    }\n}\n"],"mappings":";AAQO,MAAMA,uBAAA,SAAgCC,cAAe;EA0CxDC,YAAYC,IAAc;IAChB,MAAAA,IAAA,EAAM,GAAG,KAAK;IAzCxB;IAAA,KAAAC,KAAA,GAAQ,IAAIC,KAAgB;IAG5B;IAAA,KAAQC,OAA2B;IASvB,KAAAC,SAAA;IACL,KAAAC,IAAA;IACA,KAAAC,IAAA;IACK,KAAAC,SAAA;IACA,KAAAC,SAAA;IACA,KAAAC,SAAA;IAGZ;IAAiB,KAAAC,cAAA;IAGjB;IAAU,KAAAC,OAAA;IAGV;IAAU,KAAAC,OAAA;IAGV;IAAe,KAAAC,YAAA;IAGf;IAAe,KAAAC,YAAA;IAGf;IAAe,KAAAC,YAAA;IAEJ,KAAAC,QAAA;IACH,KAAAC,KAAA;EAAA;EAlCR,IAAWC,OAAOC,QAAoB;IAClC,KAAKhB,OAAU,GAAAgB,QAAA;EAAA;EAEnB,IAAWD,MAASA,CAAA;IAChB,IAAI,CAAC,IAAK,CAAAf,OAAA,EAAe,UAAIiB,KAAA,CAAM,mBAAmB,OACjD,OAAO,IAAK,CAAAjB,OAAA;EAAA;AAkCzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}