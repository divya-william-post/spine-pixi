{"ast":null,"code":"import { ConstraintData } from './ConstraintData.mjs';\nclass IkConstraintData extends ConstraintData {\n  constructor(name) {\n    super(name, 0, false);\n    /** The bones that are constrained by this IK constraint. */\n    this.bones = new Array();\n    /** The bone that is the IK target. */\n    this._target = null;\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\n    this.bendDirection = 1;\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n    this.compress = false;\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\n    this.stretch = false;\n    /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\n     * is scaled on both the X and Y axes. */\n    this.uniform = false;\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n    this.mix = 1;\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n    this.softness = 0;\n  }\n  set target(boneData) {\n    this._target = boneData;\n  }\n  get target() {\n    if (!this._target) throw new Error(\"BoneData not set.\");else return this._target;\n  }\n}\nexport { IkConstraintData };","map":{"version":3,"names":["IkConstraintData","ConstraintData","constructor","name","bones","Array","_target","bendDirection","compress","stretch","uniform","mix","softness","target","boneData","Error"],"sources":["../../src/core/IkConstraintData.ts"],"sourcesContent":["import { ConstraintData } from './ConstraintData';\nimport type { BoneData } from './BoneData';\n\n/** Stores the setup pose for an {@link IkConstraint}.\n * <p>\n * See [IK constraints](http://esotericsoftware.com/spine-ik-constraints) in the Spine User Guide.\n * @public\n * */\nexport class IkConstraintData extends ConstraintData {\n    /** The bones that are constrained by this IK constraint. */\n    bones = new Array<BoneData>();\n\n    /** The bone that is the IK target. */\n    private _target: BoneData | null = null;\n    public set target(boneData: BoneData) {\n        this._target = boneData;\n    }\n    public get target() {\n        if (!this._target) throw new Error('BoneData not set.');\n        else return this._target;\n    }\n\n    /** Controls the bend direction of the IK bones, either 1 or -1. */\n    bendDirection = 1;\n\n    /** When true and only a single bone is being constrained, if the target is too close, the bone is scaled to reach it. */\n    compress = false;\n\n    /** When true, if the target is out of range, the parent bone is scaled to reach it. If more than one bone is being constrained\n     * and the parent bone has local nonuniform scale, stretch is not applied. */\n    stretch = false;\n\n    /** When true, only a single bone is being constrained, and {@link #getCompress()} or {@link #getStretch()} is used, the bone\n     * is scaled on both the X and Y axes. */\n    uniform = false;\n\n    /** A percentage (0-1) that controls the mix between the constrained and unconstrained rotations. */\n    mix = 1;\n\n    /** For two bone IK, the distance from the maximum reach of the bones that rotation will slow. */\n    softness = 0;\n\n    constructor(name: string) {\n        super(name, 0, false);\n    }\n}\n"],"mappings":";AAQO,MAAMA,gBAAA,SAAyBC,cAAe;EAkCjDC,YAAYC,IAAc;IAChB,MAAAA,IAAA,EAAM,GAAG,KAAK;IAjCxB;IAAA,KAAAC,KAAA,GAAQ,IAAIC,KAAgB;IAG5B;IAAA,KAAQC,OAA2B;IAUnC;IAAgB,KAAAC,aAAA;IAGhB;IAAW,KAAAC,QAAA;IAIX;AAAA;IAAU,KAAAC,OAAA;IAIV;AAAA;IAAU,KAAAC,OAAA;IAGV;IAAM,KAAAC,GAAA;IAGN;IAAW,KAAAC,QAAA;EAAA;EA1BX,IAAWC,OAAOC,QAAoB;IAClC,KAAKR,OAAU,GAAAQ,QAAA;EAAA;EAEnB,IAAWD,MAASA,CAAA;IAChB,IAAI,CAAC,IAAK,CAAAP,OAAA,EAAe,UAAIS,KAAA,CAAM,mBAAmB,OACjD,OAAO,IAAK,CAAAT,OAAA;EAAA;AA0BzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}