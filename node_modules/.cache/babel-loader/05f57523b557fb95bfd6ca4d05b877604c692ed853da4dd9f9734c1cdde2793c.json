{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nclass IntSet {\n  constructor() {\n    this.array = new Array();\n  }\n  add(value) {\n    const contains = this.contains(value);\n    this.array[value | 0] = value | 0;\n    return !contains;\n  }\n  contains(value) {\n    return this.array[value | 0] != void 0;\n  }\n  remove(value) {\n    this.array[value | 0] = void 0;\n  }\n  clear() {\n    this.array.length = 0;\n  }\n}\nclass StringSet {\n  constructor() {\n    this.entries = {};\n    this.size = 0;\n  }\n  add(value) {\n    const contains = this.entries[value];\n    this.entries[value] = true;\n    if (!contains) {\n      this.size++;\n      return true;\n    }\n    return false;\n  }\n  addAll(values) {\n    const oldSize = this.size;\n    for (let i = 0, n = values.length; i < n; i++) {\n      this.add(values[i]);\n    }\n    return oldSize != this.size;\n  }\n  contains(value) {\n    return this.entries[value];\n  }\n  clear() {\n    this.entries = {};\n    this.size = 0;\n  }\n}\nconst _Color = class {\n  constructor(r = 0, g = 0, b = 0, a = 0) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n  set(r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    return this.clamp();\n  }\n  setFromColor(c) {\n    this.r = c.r;\n    this.g = c.g;\n    this.b = c.b;\n    this.a = c.a;\n    return this;\n  }\n  setFromString(hex) {\n    hex = hex.charAt(0) == \"#\" ? hex.substr(1) : hex;\n    this.r = parseInt(hex.substr(0, 2), 16) / 255;\n    this.g = parseInt(hex.substr(2, 2), 16) / 255;\n    this.b = parseInt(hex.substr(4, 2), 16) / 255;\n    this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\n    return this;\n  }\n  add(r, g, b, a) {\n    this.r += r;\n    this.g += g;\n    this.b += b;\n    this.a += a;\n    return this.clamp();\n  }\n  clamp() {\n    if (this.r < 0) this.r = 0;else if (this.r > 1) this.r = 1;\n    if (this.g < 0) this.g = 0;else if (this.g > 1) this.g = 1;\n    if (this.b < 0) this.b = 0;else if (this.b > 1) this.b = 1;\n    if (this.a < 0) this.a = 0;else if (this.a > 1) this.a = 1;\n    return this;\n  }\n  static rgba8888ToColor(color, value) {\n    color.r = ((value & 4278190080) >>> 24) / 255;\n    color.g = ((value & 16711680) >>> 16) / 255;\n    color.b = ((value & 65280) >>> 8) / 255;\n    color.a = (value & 255) / 255;\n  }\n  static rgb888ToColor(color, value) {\n    color.r = ((value & 16711680) >>> 16) / 255;\n    color.g = ((value & 65280) >>> 8) / 255;\n    color.b = (value & 255) / 255;\n  }\n  static fromString(hex) {\n    return new _Color().setFromString(hex);\n  }\n};\nlet Color = _Color;\nColor.WHITE = new _Color(1, 1, 1, 1);\nColor.RED = new _Color(1, 0, 0, 1);\nColor.GREEN = new _Color(0, 1, 0, 1);\nColor.BLUE = new _Color(0, 0, 1, 1);\nColor.MAGENTA = new _Color(1, 0, 1, 1);\nconst _MathUtils = class {\n  static clamp(value, min, max) {\n    if (value < min) return min;\n    if (value > max) return max;\n    return value;\n  }\n  static cosDeg(degrees) {\n    return Math.cos(degrees * _MathUtils.degRad);\n  }\n  static sinDeg(degrees) {\n    return Math.sin(degrees * _MathUtils.degRad);\n  }\n  static signum(value) {\n    return Math.sign(value);\n  }\n  static toInt(x) {\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\n  }\n  static cbrt(x) {\n    const y = Math.pow(Math.abs(x), 1 / 3);\n    return x < 0 ? -y : y;\n  }\n  static randomTriangular(min, max) {\n    return _MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n  }\n  static randomTriangularWith(min, max, mode) {\n    const u = Math.random();\n    const d = max - min;\n    if (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\n    return max - Math.sqrt((1 - u) * d * (max - mode));\n  }\n  static isPowerOfTwo(value) {\n    return value && (value & value - 1) === 0;\n  }\n};\nlet MathUtils = _MathUtils;\nMathUtils.PI = 3.1415927;\nMathUtils.PI2 = _MathUtils.PI * 2;\nMathUtils.radiansToDegrees = 180 / _MathUtils.PI;\nMathUtils.radDeg = _MathUtils.radiansToDegrees;\nMathUtils.degreesToRadians = _MathUtils.PI / 180;\nMathUtils.degRad = _MathUtils.degreesToRadians;\nclass Interpolation {\n  apply(start, end, a) {\n    return start + (end - start) * this.applyInternal(a);\n  }\n}\nclass Pow extends Interpolation {\n  constructor(power) {\n    super();\n    this.power = 2;\n    this.power = power;\n  }\n  applyInternal(a) {\n    if (a <= 0.5) return Math.pow(a * 2, this.power) / 2;\n    return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n  }\n}\nclass PowOut extends Pow {\n  applyInternal(a) {\n    return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n  }\n}\nconst _Utils = class {\n  static arrayCopy(source, sourceStart, dest, destStart, numElements) {\n    for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n      dest[j] = source[i];\n    }\n  }\n  static arrayFill(array, fromIndex, toIndex, value) {\n    for (let i = fromIndex; i < toIndex; i++) {\n      array[i] = value;\n    }\n  }\n  static setArraySize(array, size, value = 0) {\n    const oldSize = array.length;\n    if (oldSize == size) return array;\n    array.length = size;\n    if (oldSize < size) {\n      for (let i = oldSize; i < size; i++) array[i] = value;\n    }\n    return array;\n  }\n  static ensureArrayCapacity(array, size, value = 0) {\n    if (array.length >= size) return array;\n    return _Utils.setArraySize(array, size, value);\n  }\n  static newArray(size, defaultValue) {\n    const array = new Array(size);\n    for (let i = 0; i < size; i++) array[i] = defaultValue;\n    return array;\n  }\n  static newFloatArray(size) {\n    if (_Utils.SUPPORTS_TYPED_ARRAYS) {\n      return new Float32Array(size);\n    }\n    const array = new Array(size);\n    for (let i = 0; i < array.length; i++) array[i] = 0;\n    return array;\n  }\n  static newShortArray(size) {\n    if (_Utils.SUPPORTS_TYPED_ARRAYS) {\n      return new Int16Array(size);\n    }\n    const array = new Array(size);\n    for (let i = 0; i < array.length; i++) array[i] = 0;\n    return array;\n  }\n  static toFloatArray(array) {\n    return _Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n  }\n  static toSinglePrecision(value) {\n    return _Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\n  }\n  // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n  static webkit602BugfixHelper(alpha, blend) {}\n  static contains(array, element, identity = true) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] == element) return true;\n    }\n    return false;\n  }\n  static enumValue(type, name) {\n    return type[name[0].toUpperCase() + name.slice(1)];\n  }\n};\nlet Utils = _Utils;\nUtils.SUPPORTS_TYPED_ARRAYS = typeof Float32Array !== \"undefined\";\nclass DebugUtils {\n  static logBones(skeleton) {\n    for (let i = 0; i < skeleton.bones.length; i++) {\n      const bone = skeleton.bones[i];\n      const mat = bone.matrix;\n      console.log(`${bone.data.name}, ${mat.a}, ${mat.b}, ${mat.c}, ${mat.d}, ${mat.tx}, ${mat.ty}`);\n    }\n  }\n}\nclass Pool {\n  constructor(instantiator) {\n    this.items = new Array();\n    this.instantiator = instantiator;\n  }\n  obtain() {\n    return this.items.length > 0 ? this.items.pop() : this.instantiator();\n  }\n  free(item) {\n    if (item.reset) item.reset();\n    this.items.push(item);\n  }\n  freeAll(items) {\n    for (let i = 0; i < items.length; i++) {\n      this.free(items[i]);\n    }\n  }\n  clear() {\n    this.items.length = 0;\n  }\n}\nclass Vector2 {\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  length() {\n    const x = this.x;\n    const y = this.y;\n    return Math.sqrt(x * x + y * y);\n  }\n  normalize() {\n    const len = this.length();\n    if (len != 0) {\n      this.x /= len;\n      this.y /= len;\n    }\n    return this;\n  }\n}\nclass TimeKeeper {\n  constructor() {\n    this.maxDelta = 0.064;\n    this.framesPerSecond = 0;\n    this.delta = 0;\n    this.totalTime = 0;\n    this.lastTime = Date.now() / 1e3;\n    this.frameCount = 0;\n    this.frameTime = 0;\n  }\n  update() {\n    const now = Date.now() / 1e3;\n    this.delta = now - this.lastTime;\n    this.frameTime += this.delta;\n    this.totalTime += this.delta;\n    if (this.delta > this.maxDelta) this.delta = this.maxDelta;\n    this.lastTime = now;\n    this.frameCount++;\n    if (this.frameTime > 1) {\n      this.framesPerSecond = this.frameCount / this.frameTime;\n      this.frameTime = 0;\n      this.frameCount = 0;\n    }\n  }\n}\nclass WindowedMean {\n  constructor(windowSize = 32) {\n    this.addedValues = 0;\n    this.lastValue = 0;\n    this.mean = 0;\n    this.dirty = true;\n    this.values = new Array(windowSize);\n  }\n  hasEnoughData() {\n    return this.addedValues >= this.values.length;\n  }\n  addValue(value) {\n    if (this.addedValues < this.values.length) this.addedValues++;\n    this.values[this.lastValue++] = value;\n    if (this.lastValue > this.values.length - 1) this.lastValue = 0;\n    this.dirty = true;\n  }\n  getMean() {\n    if (this.hasEnoughData()) {\n      if (this.dirty) {\n        let mean = 0;\n        for (let i = 0; i < this.values.length; i++) {\n          mean += this.values[i];\n        }\n        this.mean = mean / this.values.length;\n        this.dirty = false;\n      }\n      return this.mean;\n    }\n    return 0;\n  }\n}\nexport { Color, DebugUtils, IntSet, Interpolation, MathUtils, Pool, Pow, PowOut, StringSet, TimeKeeper, Utils, Vector2, WindowedMean };","map":{"version":3,"names":["IntSet","constructor","array","Array","add","value","contains","remove","clear","length","StringSet","entries","size","addAll","values","oldSize","i","n","_Color","r","g","b","a","set","clamp","setFromColor","c","setFromString","hex","charAt","substr","parseInt","rgba8888ToColor","color","rgb888ToColor","fromString","Color","WHITE","RED","GREEN","BLUE","MAGENTA","_MathUtils","min","max","cosDeg","degrees","Math","cos","degRad","sinDeg","sin","signum","sign","toInt","x","floor","ceil","cbrt","y","pow","abs","randomTriangular","randomTriangularWith","mode","u","random","d","sqrt","isPowerOfTwo","MathUtils","PI","PI2","radiansToDegrees","radDeg","degreesToRadians","Interpolation","apply","start","end","applyInternal","Pow","power","PowOut","_Utils","arrayCopy","source","sourceStart","dest","destStart","numElements","j","arrayFill","fromIndex","toIndex","setArraySize","ensureArrayCapacity","newArray","defaultValue","newFloatArray","SUPPORTS_TYPED_ARRAYS","Float32Array","newShortArray","Int16Array","toFloatArray","toSinglePrecision","fround","webkit602BugfixHelper","alpha","blend","element","identity","enumValue","type","name","toUpperCase","slice","Utils","DebugUtils","logBones","skeleton","bones","bone","mat","matrix","console","log","data","tx","ty","Pool","instantiator","items","obtain","pop","free","item","reset","push","freeAll","Vector2","normalize","len","TimeKeeper","maxDelta","framesPerSecond","delta","totalTime","lastTime","Date","now","frameCount","frameTime","update","WindowedMean","windowSize","addedValues","lastValue","mean","dirty","hasEnoughData","addValue","getMean"],"sources":["../../src/core/Utils.ts"],"sourcesContent":["import type { ISkeleton } from './ISkeleton';\n\n/**\n * @public\n */\n\nexport interface Map<T> {\n    [key: string]: T;\n}\n\n/**\n * @public\n */\nexport interface StringMap<T> {\n    [key: string]: T;\n}\n\n/**\n * @public\n */\nexport class IntSet {\n    array = new Array<number>();\n\n    add(value: number): boolean {\n        const contains = this.contains(value);\n\n        this.array[value | 0] = value | 0;\n\n        return !contains;\n    }\n\n    contains(value: number) {\n        return this.array[value | 0] != undefined;\n    }\n\n    remove(value: number) {\n        this.array[value | 0] = undefined;\n    }\n\n    clear() {\n        this.array.length = 0;\n    }\n}\n\n/**\n * @public\n */\nexport class StringSet {\n    entries: StringMap<boolean> = {};\n    size = 0;\n\n    add(value: string): boolean {\n        const contains = this.entries[value];\n\n        this.entries[value] = true;\n        if (!contains) {\n            this.size++;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    addAll(values: string[]): boolean {\n        const oldSize = this.size;\n\n        for (let i = 0, n = values.length; i < n; i++) {\n            this.add(values[i]);\n        }\n\n        return oldSize != this.size;\n    }\n\n    contains(value: string) {\n        return this.entries[value];\n    }\n\n    clear() {\n        this.entries = {};\n        this.size = 0;\n    }\n}\n\n/**\n * @public\n */\nexport interface NumberArrayLike {\n    readonly length: number;\n    [n: number]: number;\n}\n\n/**\n * @public\n */\nexport interface Disposable {\n    dispose(): void;\n}\n\n/**\n * @public\n */\nexport interface Restorable {\n    restore(): void;\n}\n\n/**\n * @public\n */\nexport class Color {\n    public static WHITE = new Color(1, 1, 1, 1);\n    public static RED = new Color(1, 0, 0, 1);\n    public static GREEN = new Color(0, 1, 0, 1);\n    public static BLUE = new Color(0, 0, 1, 1);\n    public static MAGENTA = new Color(1, 0, 1, 1);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 0) {}\n\n    set(r: number, g: number, b: number, a: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n\n        return this.clamp();\n    }\n\n    setFromColor(c: Color) {\n        this.r = c.r;\n        this.g = c.g;\n        this.b = c.b;\n        this.a = c.a;\n\n        return this;\n    }\n\n    setFromString(hex: string) {\n        hex = hex.charAt(0) == '#' ? hex.substr(1) : hex;\n        this.r = parseInt(hex.substr(0, 2), 16) / 255;\n        this.g = parseInt(hex.substr(2, 2), 16) / 255;\n        this.b = parseInt(hex.substr(4, 2), 16) / 255;\n        this.a = hex.length != 8 ? 1 : parseInt(hex.substr(6, 2), 16) / 255;\n\n        return this;\n    }\n\n    add(r: number, g: number, b: number, a: number) {\n        this.r += r;\n        this.g += g;\n        this.b += b;\n        this.a += a;\n\n        return this.clamp();\n    }\n\n    clamp() {\n        if (this.r < 0) this.r = 0;\n        else if (this.r > 1) this.r = 1;\n\n        if (this.g < 0) this.g = 0;\n        else if (this.g > 1) this.g = 1;\n\n        if (this.b < 0) this.b = 0;\n        else if (this.b > 1) this.b = 1;\n\n        if (this.a < 0) this.a = 0;\n        else if (this.a > 1) this.a = 1;\n\n        return this;\n    }\n\n    static rgba8888ToColor(color: Color, value: number) {\n        color.r = ((value & 0xff000000) >>> 24) / 255;\n        color.g = ((value & 0x00ff0000) >>> 16) / 255;\n        color.b = ((value & 0x0000ff00) >>> 8) / 255;\n        color.a = (value & 0x000000ff) / 255;\n    }\n\n    static rgb888ToColor(color: Color, value: number) {\n        color.r = ((value & 0x00ff0000) >>> 16) / 255;\n        color.g = ((value & 0x0000ff00) >>> 8) / 255;\n        color.b = (value & 0x000000ff) / 255;\n    }\n\n    static fromString(hex: string): Color {\n        return new Color().setFromString(hex);\n    }\n}\n\n/**\n * @public\n */\nexport class MathUtils {\n    static PI = 3.1415927;\n    static PI2 = MathUtils.PI * 2;\n    static radiansToDegrees = 180 / MathUtils.PI;\n    static radDeg = MathUtils.radiansToDegrees;\n    static degreesToRadians = MathUtils.PI / 180;\n    static degRad = MathUtils.degreesToRadians;\n\n    static clamp(value: number, min: number, max: number) {\n        if (value < min) return min;\n        if (value > max) return max;\n\n        return value;\n    }\n\n    static cosDeg(degrees: number) {\n        return Math.cos(degrees * MathUtils.degRad);\n    }\n\n    static sinDeg(degrees: number) {\n        return Math.sin(degrees * MathUtils.degRad);\n    }\n\n    static signum(value: number): number {\n        return Math.sign(value);\n    }\n\n    static toInt(x: number) {\n        return x > 0 ? Math.floor(x) : Math.ceil(x);\n    }\n\n    static cbrt(x: number) {\n        const y = Math.pow(Math.abs(x), 1 / 3);\n\n        return x < 0 ? -y : y;\n    }\n\n    static randomTriangular(min: number, max: number): number {\n        return MathUtils.randomTriangularWith(min, max, (min + max) * 0.5);\n    }\n\n    static randomTriangularWith(min: number, max: number, mode: number): number {\n        const u = Math.random();\n        const d = max - min;\n\n        if (u <= (mode - min) / d) return min + Math.sqrt(u * d * (mode - min));\n\n        return max - Math.sqrt((1 - u) * d * (max - mode));\n    }\n\n    static isPowerOfTwo(value: number) {\n        return value && (value & (value - 1)) === 0;\n    }\n}\n\n/**\n * @public\n */\nexport abstract class Interpolation {\n    protected abstract applyInternal(a: number): number;\n    apply(start: number, end: number, a: number): number {\n        return start + (end - start) * this.applyInternal(a);\n    }\n}\n\n/**\n * @public\n */\nexport class Pow extends Interpolation {\n    protected power = 2;\n\n    constructor(power: number) {\n        super();\n        this.power = power;\n    }\n\n    applyInternal(a: number): number {\n        if (a <= 0.5) return Math.pow(a * 2, this.power) / 2;\n\n        return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;\n    }\n}\n\n/**\n * @public\n */\nexport class PowOut extends Pow {\n    applyInternal(a: number): number {\n        return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;\n    }\n}\n\n/**\n * @public\n */\nexport class Utils {\n    static SUPPORTS_TYPED_ARRAYS = typeof Float32Array !== 'undefined';\n\n    static arrayCopy<T>(source: ArrayLike<T>, sourceStart: number, dest: ArrayLike<T>, destStart: number, numElements: number) {\n        for (let i = sourceStart, j = destStart; i < sourceStart + numElements; i++, j++) {\n            dest[j] = source[i];\n        }\n    }\n\n    static arrayFill<T>(array: ArrayLike<T>, fromIndex: number, toIndex: number, value: T) {\n        for (let i = fromIndex; i < toIndex; i++) {\n            array[i] = value;\n        }\n    }\n\n    static setArraySize<T>(array: Array<T>, size: number, value: any = 0): Array<T> {\n        const oldSize = array.length;\n\n        if (oldSize == size) return array;\n        array.length = size;\n        if (oldSize < size) {\n            for (let i = oldSize; i < size; i++) array[i] = value;\n        }\n\n        return array;\n    }\n\n    static ensureArrayCapacity<T>(array: Array<T>, size: number, value: any = 0): Array<T> {\n        if (array.length >= size) return array;\n\n        return Utils.setArraySize(array, size, value);\n    }\n\n    static newArray<T>(size: number, defaultValue: T): Array<T> {\n        const array = new Array<T>(size);\n\n        for (let i = 0; i < size; i++) array[i] = defaultValue;\n\n        return array;\n    }\n\n    static newFloatArray(size: number): NumberArrayLike {\n        if (Utils.SUPPORTS_TYPED_ARRAYS) {\n            return new Float32Array(size);\n        }\n\n        const array = new Array<number>(size);\n\n        for (let i = 0; i < array.length; i++) array[i] = 0;\n\n        return array;\n    }\n\n    static newShortArray(size: number): NumberArrayLike {\n        if (Utils.SUPPORTS_TYPED_ARRAYS) {\n            return new Int16Array(size);\n        }\n\n        const array = new Array<number>(size);\n\n        for (let i = 0; i < array.length; i++) array[i] = 0;\n\n        return array;\n    }\n\n    static toFloatArray(array: Array<number>) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? new Float32Array(array) : array;\n    }\n\n    static toSinglePrecision(value: number) {\n        return Utils.SUPPORTS_TYPED_ARRAYS ? Math.fround(value) : value;\n    }\n\n    // This function is used to fix WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n    static webkit602BugfixHelper(alpha: number, blend: any) {}\n\n    static contains<T>(array: Array<T>, element: T, identity = true) {\n        for (let i = 0; i < array.length; i++) {\n            if (array[i] == element) return true;\n        }\n\n        return false;\n    }\n\n    static enumValue(type: any, name: string) {\n        return type[name[0].toUpperCase() + name.slice(1)];\n    }\n}\n\n/**\n * @public\n */\nexport class DebugUtils {\n    static logBones(skeleton: ISkeleton) {\n        for (let i = 0; i < skeleton.bones.length; i++) {\n            const bone = skeleton.bones[i];\n            const mat = bone.matrix;\n\n            console.log(`${bone.data.name}, ${mat.a}, ${mat.b}, ${mat.c}, ${mat.d}, ${mat.tx}, ${mat.ty}`);\n        }\n    }\n}\n\n/**\n * @public\n */\nexport class Pool<T> {\n    private items = new Array<T>();\n    private instantiator: () => T;\n\n    constructor(instantiator: () => T) {\n        this.instantiator = instantiator;\n    }\n\n    obtain() {\n        return this.items.length > 0 ? this.items.pop() : this.instantiator();\n    }\n\n    free(item: T) {\n        if ((item as any).reset) (item as any).reset();\n        this.items.push(item);\n    }\n\n    freeAll(items: ArrayLike<T>) {\n        for (let i = 0; i < items.length; i++) {\n            this.free(items[i]);\n        }\n    }\n\n    clear() {\n        this.items.length = 0;\n    }\n}\n\n/**\n * @public\n */\nexport class Vector2 {\n    constructor(public x = 0, public y = 0) {}\n\n    set(x: number, y: number): Vector2 {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    length() {\n        const x = this.x;\n        const y = this.y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    normalize() {\n        const len = this.length();\n\n        if (len != 0) {\n            this.x /= len;\n            this.y /= len;\n        }\n\n        return this;\n    }\n}\n\n/**\n * @public\n */\nexport class TimeKeeper {\n    maxDelta = 0.064;\n    framesPerSecond = 0;\n    delta = 0;\n    totalTime = 0;\n\n    private lastTime = Date.now() / 1000;\n    private frameCount = 0;\n    private frameTime = 0;\n\n    update() {\n        const now = Date.now() / 1000;\n\n        this.delta = now - this.lastTime;\n        this.frameTime += this.delta;\n        this.totalTime += this.delta;\n        if (this.delta > this.maxDelta) this.delta = this.maxDelta;\n        this.lastTime = now;\n\n        this.frameCount++;\n        if (this.frameTime > 1) {\n            this.framesPerSecond = this.frameCount / this.frameTime;\n            this.frameTime = 0;\n            this.frameCount = 0;\n        }\n    }\n}\n\n/**\n * @public\n */\nexport interface ArrayLike<T> {\n    length: number;\n    [n: number]: T;\n}\n\n/**\n * @public\n */\nexport class WindowedMean {\n    values: Array<number>;\n    addedValues = 0;\n    lastValue = 0;\n    mean = 0;\n    dirty = true;\n\n    constructor(windowSize = 32) {\n        this.values = new Array<number>(windowSize);\n    }\n\n    hasEnoughData() {\n        return this.addedValues >= this.values.length;\n    }\n\n    addValue(value: number) {\n        if (this.addedValues < this.values.length) this.addedValues++;\n        this.values[this.lastValue++] = value;\n        if (this.lastValue > this.values.length - 1) this.lastValue = 0;\n        this.dirty = true;\n    }\n\n    getMean() {\n        if (this.hasEnoughData()) {\n            if (this.dirty) {\n                let mean = 0;\n\n                for (let i = 0; i < this.values.length; i++) {\n                    mean += this.values[i];\n                }\n                this.mean = mean / this.values.length;\n                this.dirty = false;\n            }\n\n            return this.mean;\n        }\n\n        return 0;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}