{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Pool } from \"./Utils.js\";\nexport class Triangulator {\n  constructor() {\n    _defineProperty(this, \"convexPolygons\", new Array());\n    _defineProperty(this, \"convexPolygonsIndices\", new Array());\n    _defineProperty(this, \"indicesArray\", new Array());\n    _defineProperty(this, \"isConcaveArray\", new Array());\n    _defineProperty(this, \"triangles\", new Array());\n    _defineProperty(this, \"polygonPool\", new Pool(() => {\n      return new Array();\n    }));\n    _defineProperty(this, \"polygonIndicesPool\", new Pool(() => {\n      return new Array();\n    }));\n  }\n  triangulate(verticesArray) {\n    let vertices = verticesArray;\n    let vertexCount = verticesArray.length >> 1;\n    let indices = this.indicesArray;\n    indices.length = 0;\n    for (let i = 0; i < vertexCount; i++) indices[i] = i;\n    let isConcave = this.isConcaveArray;\n    isConcave.length = 0;\n    for (let i = 0, n = vertexCount; i < n; ++i) isConcave[i] = Triangulator.isConcave(i, vertexCount, vertices, indices);\n    let triangles = this.triangles;\n    triangles.length = 0;\n    while (vertexCount > 3) {\n      // Find ear tip.\n      let previous = vertexCount - 1,\n        i = 0,\n        next = 1;\n      while (true) {\n        outer: if (!isConcave[i]) {\n          let p1 = indices[previous] << 1,\n            p2 = indices[i] << 1,\n            p3 = indices[next] << 1;\n          let p1x = vertices[p1],\n            p1y = vertices[p1 + 1];\n          let p2x = vertices[p2],\n            p2y = vertices[p2 + 1];\n          let p3x = vertices[p3],\n            p3y = vertices[p3 + 1];\n          for (let ii = (next + 1) % vertexCount; ii != previous; ii = (ii + 1) % vertexCount) {\n            if (!isConcave[ii]) continue;\n            let v = indices[ii] << 1;\n            let vx = vertices[v],\n              vy = vertices[v + 1];\n            if (Triangulator.positiveArea(p3x, p3y, p1x, p1y, vx, vy)) {\n              if (Triangulator.positiveArea(p1x, p1y, p2x, p2y, vx, vy)) {\n                if (Triangulator.positiveArea(p2x, p2y, p3x, p3y, vx, vy)) break outer;\n              }\n            }\n          }\n          break;\n        }\n        if (next == 0) {\n          do {\n            if (!isConcave[i]) break;\n            i--;\n          } while (i > 0);\n          break;\n        }\n        previous = i;\n        i = next;\n        next = (next + 1) % vertexCount;\n      }\n      // Cut ear tip.\n      triangles.push(indices[(vertexCount + i - 1) % vertexCount]);\n      triangles.push(indices[i]);\n      triangles.push(indices[(i + 1) % vertexCount]);\n      indices.splice(i, 1);\n      isConcave.splice(i, 1);\n      vertexCount--;\n      let previousIndex = (vertexCount + i - 1) % vertexCount;\n      let nextIndex = i == vertexCount ? 0 : i;\n      isConcave[previousIndex] = Triangulator.isConcave(previousIndex, vertexCount, vertices, indices);\n      isConcave[nextIndex] = Triangulator.isConcave(nextIndex, vertexCount, vertices, indices);\n    }\n    if (vertexCount == 3) {\n      triangles.push(indices[2]);\n      triangles.push(indices[0]);\n      triangles.push(indices[1]);\n    }\n    return triangles;\n  }\n  decompose(verticesArray, triangles) {\n    let vertices = verticesArray;\n    let convexPolygons = this.convexPolygons;\n    this.polygonPool.freeAll(convexPolygons);\n    convexPolygons.length = 0;\n    let convexPolygonsIndices = this.convexPolygonsIndices;\n    this.polygonIndicesPool.freeAll(convexPolygonsIndices);\n    convexPolygonsIndices.length = 0;\n    let polygonIndices = this.polygonIndicesPool.obtain();\n    polygonIndices.length = 0;\n    let polygon = this.polygonPool.obtain();\n    polygon.length = 0;\n    // Merge subsequent triangles if they form a triangle fan.\n    let fanBaseIndex = -1,\n      lastWinding = 0;\n    for (let i = 0, n = triangles.length; i < n; i += 3) {\n      let t1 = triangles[i] << 1,\n        t2 = triangles[i + 1] << 1,\n        t3 = triangles[i + 2] << 1;\n      let x1 = vertices[t1],\n        y1 = vertices[t1 + 1];\n      let x2 = vertices[t2],\n        y2 = vertices[t2 + 1];\n      let x3 = vertices[t3],\n        y3 = vertices[t3 + 1];\n      // If the base of the last triangle is the same as this triangle, check if they form a convex polygon (triangle fan).\n      let merged = false;\n      if (fanBaseIndex == t1) {\n        let o = polygon.length - 4;\n        let winding1 = Triangulator.winding(polygon[o], polygon[o + 1], polygon[o + 2], polygon[o + 3], x3, y3);\n        let winding2 = Triangulator.winding(x3, y3, polygon[0], polygon[1], polygon[2], polygon[3]);\n        if (winding1 == lastWinding && winding2 == lastWinding) {\n          polygon.push(x3);\n          polygon.push(y3);\n          polygonIndices.push(t3);\n          merged = true;\n        }\n      }\n      // Otherwise make this triangle the new base.\n      if (!merged) {\n        if (polygon.length > 0) {\n          convexPolygons.push(polygon);\n          convexPolygonsIndices.push(polygonIndices);\n        } else {\n          this.polygonPool.free(polygon);\n          this.polygonIndicesPool.free(polygonIndices);\n        }\n        polygon = this.polygonPool.obtain();\n        polygon.length = 0;\n        polygon.push(x1);\n        polygon.push(y1);\n        polygon.push(x2);\n        polygon.push(y2);\n        polygon.push(x3);\n        polygon.push(y3);\n        polygonIndices = this.polygonIndicesPool.obtain();\n        polygonIndices.length = 0;\n        polygonIndices.push(t1);\n        polygonIndices.push(t2);\n        polygonIndices.push(t3);\n        lastWinding = Triangulator.winding(x1, y1, x2, y2, x3, y3);\n        fanBaseIndex = t1;\n      }\n    }\n    if (polygon.length > 0) {\n      convexPolygons.push(polygon);\n      convexPolygonsIndices.push(polygonIndices);\n    }\n    // Go through the list of polygons and try to merge the remaining triangles with the found triangle fans.\n    for (let i = 0, n = convexPolygons.length; i < n; i++) {\n      polygonIndices = convexPolygonsIndices[i];\n      if (polygonIndices.length == 0) continue;\n      let firstIndex = polygonIndices[0];\n      let lastIndex = polygonIndices[polygonIndices.length - 1];\n      polygon = convexPolygons[i];\n      let o = polygon.length - 4;\n      let prevPrevX = polygon[o],\n        prevPrevY = polygon[o + 1];\n      let prevX = polygon[o + 2],\n        prevY = polygon[o + 3];\n      let firstX = polygon[0],\n        firstY = polygon[1];\n      let secondX = polygon[2],\n        secondY = polygon[3];\n      let winding = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, firstX, firstY);\n      for (let ii = 0; ii < n; ii++) {\n        if (ii == i) continue;\n        let otherIndices = convexPolygonsIndices[ii];\n        if (otherIndices.length != 3) continue;\n        let otherFirstIndex = otherIndices[0];\n        let otherSecondIndex = otherIndices[1];\n        let otherLastIndex = otherIndices[2];\n        let otherPoly = convexPolygons[ii];\n        let x3 = otherPoly[otherPoly.length - 2],\n          y3 = otherPoly[otherPoly.length - 1];\n        if (otherFirstIndex != firstIndex || otherSecondIndex != lastIndex) continue;\n        let winding1 = Triangulator.winding(prevPrevX, prevPrevY, prevX, prevY, x3, y3);\n        let winding2 = Triangulator.winding(x3, y3, firstX, firstY, secondX, secondY);\n        if (winding1 == winding && winding2 == winding) {\n          otherPoly.length = 0;\n          otherIndices.length = 0;\n          polygon.push(x3);\n          polygon.push(y3);\n          polygonIndices.push(otherLastIndex);\n          prevPrevX = prevX;\n          prevPrevY = prevY;\n          prevX = x3;\n          prevY = y3;\n          ii = 0;\n        }\n      }\n    }\n    // Remove empty polygons that resulted from the merge step above.\n    for (let i = convexPolygons.length - 1; i >= 0; i--) {\n      polygon = convexPolygons[i];\n      if (polygon.length == 0) {\n        convexPolygons.splice(i, 1);\n        this.polygonPool.free(polygon);\n        polygonIndices = convexPolygonsIndices[i];\n        convexPolygonsIndices.splice(i, 1);\n        this.polygonIndicesPool.free(polygonIndices);\n      }\n    }\n    return convexPolygons;\n  }\n  static isConcave(index, vertexCount, vertices, indices) {\n    let previous = indices[(vertexCount + index - 1) % vertexCount] << 1;\n    let current = indices[index] << 1;\n    let next = indices[(index + 1) % vertexCount] << 1;\n    return !this.positiveArea(vertices[previous], vertices[previous + 1], vertices[current], vertices[current + 1], vertices[next], vertices[next + 1]);\n  }\n  static positiveArea(p1x, p1y, p2x, p2y, p3x, p3y) {\n    return p1x * (p3y - p2y) + p2x * (p1y - p3y) + p3x * (p2y - p1y) >= 0;\n  }\n  static winding(p1x, p1y, p2x, p2y, p3x, p3y) {\n    let px = p2x - p1x,\n      py = p2y - p1y;\n    return p3x * py - p3y * px + px * p1y - p1x * py >= 0 ? 1 : -1;\n  }\n}","map":{"version":3,"names":["Pool","Triangulator","constructor","_defineProperty","Array","triangulate","verticesArray","vertices","vertexCount","length","indices","indicesArray","i","isConcave","isConcaveArray","n","triangles","previous","next","outer","p1","p2","p3","p1x","p1y","p2x","p2y","p3x","p3y","ii","v","vx","vy","positiveArea","push","splice","previousIndex","nextIndex","decompose","convexPolygons","polygonPool","freeAll","convexPolygonsIndices","polygonIndicesPool","polygonIndices","obtain","polygon","fanBaseIndex","lastWinding","t1","t2","t3","x1","y1","x2","y2","x3","y3","merged","o","winding1","winding","winding2","free","firstIndex","lastIndex","prevPrevX","prevPrevY","prevX","prevY","firstX","firstY","secondX","secondY","otherIndices","otherFirstIndex","otherSecondIndex","otherLastIndex","otherPoly","index","current","px","py"],"sources":["../src/Triangulator.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}