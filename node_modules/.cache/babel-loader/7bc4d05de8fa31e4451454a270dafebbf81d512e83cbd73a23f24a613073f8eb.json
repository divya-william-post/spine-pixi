{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { TransformMode } from \"./BoneData.js\";\nimport { MathUtils } from \"./Utils.js\";\n/** Stores a bone's current pose.\n *\n * A bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\n * local transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\n * constraint or application code modifies the world transform after it was computed from the local transform. */\nexport class Bone {\n  /** @param parent May be null. */\n  constructor(data, skeleton, parent) {\n    /** The bone's setup pose data. */\n    _defineProperty(this, \"data\", void 0);\n    /** The skeleton this bone belongs to. */\n    _defineProperty(this, \"skeleton\", void 0);\n    /** The parent bone, or null if this is the root bone. */\n    _defineProperty(this, \"parent\", null);\n    /** The immediate children of this bone. */\n    _defineProperty(this, \"children\", new Array());\n    /** The local x translation. */\n    _defineProperty(this, \"x\", 0);\n    /** The local y translation. */\n    _defineProperty(this, \"y\", 0);\n    /** The local rotation in degrees, counter clockwise. */\n    _defineProperty(this, \"rotation\", 0);\n    /** The local scaleX. */\n    _defineProperty(this, \"scaleX\", 0);\n    /** The local scaleY. */\n    _defineProperty(this, \"scaleY\", 0);\n    /** The local shearX. */\n    _defineProperty(this, \"shearX\", 0);\n    /** The local shearY. */\n    _defineProperty(this, \"shearY\", 0);\n    /** The applied local x translation. */\n    _defineProperty(this, \"ax\", 0);\n    /** The applied local y translation. */\n    _defineProperty(this, \"ay\", 0);\n    /** The applied local rotation in degrees, counter clockwise. */\n    _defineProperty(this, \"arotation\", 0);\n    /** The applied local scaleX. */\n    _defineProperty(this, \"ascaleX\", 0);\n    /** The applied local scaleY. */\n    _defineProperty(this, \"ascaleY\", 0);\n    /** The applied local shearX. */\n    _defineProperty(this, \"ashearX\", 0);\n    /** The applied local shearY. */\n    _defineProperty(this, \"ashearY\", 0);\n    /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    _defineProperty(this, \"a\", 0);\n    /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    _defineProperty(this, \"b\", 0);\n    /** Part of the world transform matrix for the X axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    _defineProperty(this, \"c\", 0);\n    /** Part of the world transform matrix for the Y axis. If changed, {@link #updateAppliedTransform()} should be called. */\n    _defineProperty(this, \"d\", 0);\n    /** The world X position. If changed, {@link #updateAppliedTransform()} should be called. */\n    _defineProperty(this, \"worldY\", 0);\n    /** The world Y position. If changed, {@link #updateAppliedTransform()} should be called. */\n    _defineProperty(this, \"worldX\", 0);\n    _defineProperty(this, \"sorted\", false);\n    _defineProperty(this, \"active\", false);\n    if (!data) throw new Error(\"data cannot be null.\");\n    if (!skeleton) throw new Error(\"skeleton cannot be null.\");\n    this.data = data;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.setToSetupPose();\n  }\n  /** Returns false when the bone has not been computed because {@link BoneData#skinRequired} is true and the\n    * {@link Skeleton#skin active skin} does not {@link Skin#bones contain} this bone. */\n  isActive() {\n    return this.active;\n  }\n  /** Computes the world transform using the parent bone and this bone's local applied transform. */\n  update() {\n    this.updateWorldTransformWith(this.ax, this.ay, this.arotation, this.ascaleX, this.ascaleY, this.ashearX, this.ashearY);\n  }\n  /** Computes the world transform using the parent bone and this bone's local transform.\n   *\n   * See {@link #updateWorldTransformWith()}. */\n  updateWorldTransform() {\n    this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n  }\n  /** Computes the world transform using the parent bone and the specified local transform. The applied transform is set to the\n   * specified local transform. Child bones are not updated.\n   *\n   * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\n   * Runtimes Guide. */\n  updateWorldTransformWith(x, y, rotation, scaleX, scaleY, shearX, shearY) {\n    this.ax = x;\n    this.ay = y;\n    this.arotation = rotation;\n    this.ascaleX = scaleX;\n    this.ascaleY = scaleY;\n    this.ashearX = shearX;\n    this.ashearY = shearY;\n    let parent = this.parent;\n    if (!parent) {\n      // Root bone.\n      let skeleton = this.skeleton;\n      let rotationY = rotation + 90 + shearY;\n      let sx = skeleton.scaleX;\n      let sy = skeleton.scaleY;\n      this.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\n      this.b = MathUtils.cosDeg(rotationY) * scaleY * sx;\n      this.c = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\n      this.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\n      this.worldX = x * sx + skeleton.x;\n      this.worldY = y * sy + skeleton.y;\n      return;\n    }\n    let pa = parent.a,\n      pb = parent.b,\n      pc = parent.c,\n      pd = parent.d;\n    this.worldX = pa * x + pb * y + parent.worldX;\n    this.worldY = pc * x + pd * y + parent.worldY;\n    switch (this.data.transformMode) {\n      case TransformMode.Normal:\n        {\n          let rotationY = rotation + 90 + shearY;\n          let la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n          let lb = MathUtils.cosDeg(rotationY) * scaleY;\n          let lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n          let ld = MathUtils.sinDeg(rotationY) * scaleY;\n          this.a = pa * la + pb * lc;\n          this.b = pa * lb + pb * ld;\n          this.c = pc * la + pd * lc;\n          this.d = pc * lb + pd * ld;\n          return;\n        }\n      case TransformMode.OnlyTranslation:\n        {\n          let rotationY = rotation + 90 + shearY;\n          this.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\n          this.b = MathUtils.cosDeg(rotationY) * scaleY;\n          this.c = MathUtils.sinDeg(rotation + shearX) * scaleX;\n          this.d = MathUtils.sinDeg(rotationY) * scaleY;\n          break;\n        }\n      case TransformMode.NoRotationOrReflection:\n        {\n          let s = pa * pa + pc * pc;\n          let prx = 0;\n          if (s > 0.0001) {\n            s = Math.abs(pa * pd - pb * pc) / s;\n            pa /= this.skeleton.scaleX;\n            pc /= this.skeleton.scaleY;\n            pb = pc * s;\n            pd = pa * s;\n            prx = Math.atan2(pc, pa) * MathUtils.radDeg;\n          } else {\n            pa = 0;\n            pc = 0;\n            prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n          }\n          let rx = rotation + shearX - prx;\n          let ry = rotation + shearY - prx + 90;\n          let la = MathUtils.cosDeg(rx) * scaleX;\n          let lb = MathUtils.cosDeg(ry) * scaleY;\n          let lc = MathUtils.sinDeg(rx) * scaleX;\n          let ld = MathUtils.sinDeg(ry) * scaleY;\n          this.a = pa * la - pb * lc;\n          this.b = pa * lb - pb * ld;\n          this.c = pc * la + pd * lc;\n          this.d = pc * lb + pd * ld;\n          break;\n        }\n      case TransformMode.NoScale:\n      case TransformMode.NoScaleOrReflection:\n        {\n          let cos = MathUtils.cosDeg(rotation);\n          let sin = MathUtils.sinDeg(rotation);\n          let za = (pa * cos + pb * sin) / this.skeleton.scaleX;\n          let zc = (pc * cos + pd * sin) / this.skeleton.scaleY;\n          let s = Math.sqrt(za * za + zc * zc);\n          if (s > 0.00001) s = 1 / s;\n          za *= s;\n          zc *= s;\n          s = Math.sqrt(za * za + zc * zc);\n          if (this.data.transformMode == TransformMode.NoScale && pa * pd - pb * pc < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) s = -s;\n          let r = Math.PI / 2 + Math.atan2(zc, za);\n          let zb = Math.cos(r) * s;\n          let zd = Math.sin(r) * s;\n          let la = MathUtils.cosDeg(shearX) * scaleX;\n          let lb = MathUtils.cosDeg(90 + shearY) * scaleY;\n          let lc = MathUtils.sinDeg(shearX) * scaleX;\n          let ld = MathUtils.sinDeg(90 + shearY) * scaleY;\n          this.a = za * la + zb * lc;\n          this.b = za * lb + zb * ld;\n          this.c = zc * la + zd * lc;\n          this.d = zc * lb + zd * ld;\n          break;\n        }\n    }\n    this.a *= this.skeleton.scaleX;\n    this.b *= this.skeleton.scaleX;\n    this.c *= this.skeleton.scaleY;\n    this.d *= this.skeleton.scaleY;\n  }\n  /** Sets this bone's local transform to the setup pose. */\n  setToSetupPose() {\n    let data = this.data;\n    this.x = data.x;\n    this.y = data.y;\n    this.rotation = data.rotation;\n    this.scaleX = data.scaleX;\n    this.scaleY = data.scaleY;\n    this.shearX = data.shearX;\n    this.shearY = data.shearY;\n  }\n  /** The world rotation for the X axis, calculated using {@link #a} and {@link #c}. */\n  getWorldRotationX() {\n    return Math.atan2(this.c, this.a) * MathUtils.radDeg;\n  }\n  /** The world rotation for the Y axis, calculated using {@link #b} and {@link #d}. */\n  getWorldRotationY() {\n    return Math.atan2(this.d, this.b) * MathUtils.radDeg;\n  }\n  /** The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}. */\n  getWorldScaleX() {\n    return Math.sqrt(this.a * this.a + this.c * this.c);\n  }\n  /** The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}. */\n  getWorldScaleY() {\n    return Math.sqrt(this.b * this.b + this.d * this.d);\n  }\n  /** Computes the applied transform values from the world transform.\n   *\n   * If the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\n   * the applied transform matches the world transform. The applied transform may be needed by other code (eg to apply other\n   * constraints).\n   *\n   * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The applied transform after\n   * calling this method is equivalent to the local transform used to compute the world transform, but may not be identical. */\n  updateAppliedTransform() {\n    let parent = this.parent;\n    if (!parent) {\n      this.ax = this.worldX - this.skeleton.x;\n      this.ay = this.worldY - this.skeleton.y;\n      this.arotation = Math.atan2(this.c, this.a) * MathUtils.radDeg;\n      this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);\n      this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);\n      this.ashearX = 0;\n      this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * MathUtils.radDeg;\n      return;\n    }\n    let pa = parent.a,\n      pb = parent.b,\n      pc = parent.c,\n      pd = parent.d;\n    let pid = 1 / (pa * pd - pb * pc);\n    let dx = this.worldX - parent.worldX,\n      dy = this.worldY - parent.worldY;\n    this.ax = dx * pd * pid - dy * pb * pid;\n    this.ay = dy * pa * pid - dx * pc * pid;\n    let ia = pid * pd;\n    let id = pid * pa;\n    let ib = pid * pb;\n    let ic = pid * pc;\n    let ra = ia * this.a - ib * this.c;\n    let rb = ia * this.b - ib * this.d;\n    let rc = id * this.c - ic * this.a;\n    let rd = id * this.d - ic * this.b;\n    this.ashearX = 0;\n    this.ascaleX = Math.sqrt(ra * ra + rc * rc);\n    if (this.ascaleX > 0.0001) {\n      let det = ra * rd - rb * rc;\n      this.ascaleY = det / this.ascaleX;\n      this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n      this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n    } else {\n      this.ascaleX = 0;\n      this.ascaleY = Math.sqrt(rb * rb + rd * rd);\n      this.ashearY = 0;\n      this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n    }\n  }\n  /** Transforms a point from world coordinates to the bone's local coordinates. */\n  worldToLocal(world) {\n    let invDet = 1 / (this.a * this.d - this.b * this.c);\n    let x = world.x - this.worldX,\n      y = world.y - this.worldY;\n    world.x = x * this.d * invDet - y * this.b * invDet;\n    world.y = y * this.a * invDet - x * this.c * invDet;\n    return world;\n  }\n  /** Transforms a point from the bone's local coordinates to world coordinates. */\n  localToWorld(local) {\n    let x = local.x,\n      y = local.y;\n    local.x = x * this.a + y * this.b + this.worldX;\n    local.y = x * this.c + y * this.d + this.worldY;\n    return local;\n  }\n  /** Transforms a world rotation to a local rotation. */\n  worldToLocalRotation(worldRotation) {\n    let sin = MathUtils.sinDeg(worldRotation),\n      cos = MathUtils.cosDeg(worldRotation);\n    return Math.atan2(this.a * sin - this.c * cos, this.d * cos - this.b * sin) * MathUtils.radDeg + this.rotation - this.shearX;\n  }\n  /** Transforms a local rotation to a world rotation. */\n  localToWorldRotation(localRotation) {\n    localRotation -= this.rotation - this.shearX;\n    let sin = MathUtils.sinDeg(localRotation),\n      cos = MathUtils.cosDeg(localRotation);\n    return Math.atan2(cos * this.c + sin * this.d, cos * this.a + sin * this.b) * MathUtils.radDeg;\n  }\n  /** Rotates the world transform the specified amount.\n   * <p>\n   * After changes are made to the world transform, {@link #updateAppliedTransform()} should be called and {@link #update()} will\n   * need to be called on any child bones, recursively. */\n  rotateWorld(degrees) {\n    let a = this.a,\n      b = this.b,\n      c = this.c,\n      d = this.d;\n    let cos = MathUtils.cosDeg(degrees),\n      sin = MathUtils.sinDeg(degrees);\n    this.a = cos * a - sin * c;\n    this.b = cos * b - sin * d;\n    this.c = sin * a + cos * c;\n    this.d = sin * b + cos * d;\n  }\n}","map":{"version":3,"names":["TransformMode","MathUtils","Bone","constructor","data","skeleton","parent","_defineProperty","Array","Error","setToSetupPose","isActive","active","update","updateWorldTransformWith","ax","ay","arotation","ascaleX","ascaleY","ashearX","ashearY","updateWorldTransform","x","y","rotation","scaleX","scaleY","shearX","shearY","rotationY","sx","sy","a","cosDeg","b","c","sinDeg","d","worldX","worldY","pa","pb","pc","pd","transformMode","Normal","la","lb","lc","ld","OnlyTranslation","NoRotationOrReflection","s","prx","Math","abs","atan2","radDeg","rx","ry","NoScale","NoScaleOrReflection","cos","sin","za","zc","sqrt","r","PI","zb","zd","getWorldRotationX","getWorldRotationY","getWorldScaleX","getWorldScaleY","updateAppliedTransform","pid","dx","dy","ia","id","ib","ic","ra","rb","rc","rd","det","worldToLocal","world","invDet","localToWorld","local","worldToLocalRotation","worldRotation","localToWorldRotation","localRotation","rotateWorld","degrees"],"sources":["../src/Bone.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}