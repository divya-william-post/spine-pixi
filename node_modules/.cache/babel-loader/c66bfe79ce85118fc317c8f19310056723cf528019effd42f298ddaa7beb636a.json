{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Animation, MixBlend, AttachmentTimeline, MixDirection, RotateTimeline, DrawOrderTimeline, Timeline, EventTimeline } from \"./Animation.js\";\nimport { StringSet, Pool, Utils, MathUtils } from \"./Utils.js\";\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide. */\nexport class AnimationState {\n  static emptyAnimation() {\n    return AnimationState._emptyAnimation;\n  }\n  /** The AnimationStateData to look up mix durations. */\n\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n    /** The list of tracks that currently have animations, which may contain null entries. */\n    _defineProperty(this, \"tracks\", new Array());\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n     * or faster. Defaults to 1.\n     *\n     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n    _defineProperty(this, \"timeScale\", 1);\n    _defineProperty(this, \"unkeyedState\", 0);\n    _defineProperty(this, \"events\", new Array());\n    _defineProperty(this, \"listeners\", new Array());\n    _defineProperty(this, \"queue\", new EventQueue(this));\n    _defineProperty(this, \"propertyIDs\", new StringSet());\n    _defineProperty(this, \"animationsChanged\", false);\n    _defineProperty(this, \"trackEntryPool\", new Pool(() => new TrackEntry()));\n    this.data = data;\n  }\n  /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n  update(delta) {\n    delta *= this.timeScale;\n    let tracks = this.tracks;\n    for (let i = 0, n = tracks.length; i < n; i++) {\n      let current = tracks[i];\n      if (!current) continue;\n      current.animationLast = current.nextAnimationLast;\n      current.trackLast = current.nextTrackLast;\n      let currentDelta = delta * current.timeScale;\n      if (current.delay > 0) {\n        current.delay -= currentDelta;\n        if (current.delay > 0) continue;\n        currentDelta = -current.delay;\n        current.delay = 0;\n      }\n      let next = current.next;\n      if (next) {\n        // When the next entry's delay is passed, change to the next entry, preserving leftover time.\n        let nextTime = current.trackLast - next.delay;\n        if (nextTime >= 0) {\n          next.delay = 0;\n          next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n          current.trackTime += currentDelta;\n          this.setCurrent(i, next, true);\n          while (next.mixingFrom) {\n            next.mixTime += delta;\n            next = next.mixingFrom;\n          }\n          continue;\n        }\n      } else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\n        tracks[i] = null;\n        this.queue.end(current);\n        this.clearNext(current);\n        continue;\n      }\n      if (current.mixingFrom && this.updateMixingFrom(current, delta)) {\n        // End mixing from entries once all have completed.\n        let from = current.mixingFrom;\n        current.mixingFrom = null;\n        if (from) from.mixingTo = null;\n        while (from) {\n          this.queue.end(from);\n          from = from.mixingFrom;\n        }\n      }\n      current.trackTime += currentDelta;\n    }\n    this.queue.drain();\n  }\n  /** Returns true when all mixing from entries are complete. */\n  updateMixingFrom(to, delta) {\n    let from = to.mixingFrom;\n    if (!from) return true;\n    let finished = this.updateMixingFrom(from, delta);\n    from.animationLast = from.nextAnimationLast;\n    from.trackLast = from.nextTrackLast;\n    // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n    if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n      // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n      if (from.totalAlpha == 0 || to.mixDuration == 0) {\n        to.mixingFrom = from.mixingFrom;\n        if (from.mixingFrom) from.mixingFrom.mixingTo = to;\n        to.interruptAlpha = from.interruptAlpha;\n        this.queue.end(from);\n      }\n      return finished;\n    }\n    from.trackTime += delta * from.timeScale;\n    to.mixTime += delta;\n    return false;\n  }\n  /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n   * animation state can be applied to multiple skeletons to pose them identically.\n   * @returns True if any animations were applied. */\n  apply(skeleton) {\n    if (!skeleton) throw new Error(\"skeleton cannot be null.\");\n    if (this.animationsChanged) this._animationsChanged();\n    let events = this.events;\n    let tracks = this.tracks;\n    let applied = false;\n    for (let i = 0, n = tracks.length; i < n; i++) {\n      let current = tracks[i];\n      if (!current || current.delay > 0) continue;\n      applied = true;\n      let blend = i == 0 ? MixBlend.first : current.mixBlend;\n      // Apply mixing from entries first.\n      let mix = current.alpha;\n      if (current.mixingFrom) mix *= this.applyMixingFrom(current, skeleton, blend);else if (current.trackTime >= current.trackEnd && !current.next) mix = 0;\n      // Apply current entry.\n      let animationLast = current.animationLast,\n        animationTime = current.getAnimationTime(),\n        applyTime = animationTime;\n      let applyEvents = events;\n      if (current.reverse) {\n        applyTime = current.animation.duration - applyTime;\n        applyEvents = null;\n      }\n      let timelines = current.animation.timelines;\n      let timelineCount = timelines.length;\n      if (i == 0 && mix == 1 || blend == MixBlend.add) {\n        for (let ii = 0; ii < timelineCount; ii++) {\n          // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\n          // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\n          // (https://github.com/pixijs/pixi-spine/issues/302)\n          Utils.webkit602BugfixHelper(mix, blend);\n          var timeline = timelines[ii];\n          if (timeline instanceof AttachmentTimeline) this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);else timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\n        }\n      } else {\n        let timelineMode = current.timelineMode;\n        let shortestRotation = current.shortestRotation;\n        let firstFrame = !shortestRotation && current.timelinesRotation.length != timelineCount << 1;\n        if (firstFrame) current.timelinesRotation.length = timelineCount << 1;\n        for (let ii = 0; ii < timelineCount; ii++) {\n          let timeline = timelines[ii];\n          let timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\n          if (!shortestRotation && timeline instanceof RotateTimeline) {\n            this.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\n          } else if (timeline instanceof AttachmentTimeline) {\n            this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n          } else {\n            // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n            Utils.webkit602BugfixHelper(mix, blend);\n            timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\n          }\n        }\n      }\n      this.queueEvents(current, animationTime);\n      events.length = 0;\n      current.nextAnimationLast = animationTime;\n      current.nextTrackLast = current.trackTime;\n    }\n    // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\n    // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\n    // the time is before the first key).\n    var setupState = this.unkeyedState + SETUP;\n    var slots = skeleton.slots;\n    for (var i = 0, n = skeleton.slots.length; i < n; i++) {\n      var slot = slots[i];\n      if (slot.attachmentState == setupState) {\n        var attachmentName = slot.data.attachmentName;\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n      }\n    }\n    this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\n    this.queue.drain();\n    return applied;\n  }\n  applyMixingFrom(to, skeleton, blend) {\n    let from = to.mixingFrom;\n    if (from.mixingFrom) this.applyMixingFrom(from, skeleton, blend);\n    let mix = 0;\n    if (to.mixDuration == 0) {\n      // Single frame mix to undo mixingFrom changes.\n      mix = 1;\n      if (blend == MixBlend.first) blend = MixBlend.setup;\n    } else {\n      mix = to.mixTime / to.mixDuration;\n      if (mix > 1) mix = 1;\n      if (blend != MixBlend.first) blend = from.mixBlend;\n    }\n    let attachments = mix < from.attachmentThreshold,\n      drawOrder = mix < from.drawOrderThreshold;\n    let timelines = from.animation.timelines;\n    let timelineCount = timelines.length;\n    let alphaHold = from.alpha * to.interruptAlpha,\n      alphaMix = alphaHold * (1 - mix);\n    let animationLast = from.animationLast,\n      animationTime = from.getAnimationTime(),\n      applyTime = animationTime;\n    let events = null;\n    if (from.reverse) applyTime = from.animation.duration - applyTime;else if (mix < from.eventThreshold) events = this.events;\n    if (blend == MixBlend.add) {\n      for (let i = 0; i < timelineCount; i++) timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\n    } else {\n      let timelineMode = from.timelineMode;\n      let timelineHoldMix = from.timelineHoldMix;\n      let shortestRotation = from.shortestRotation;\n      let firstFrame = !shortestRotation && from.timelinesRotation.length != timelineCount << 1;\n      if (firstFrame) from.timelinesRotation.length = timelineCount << 1;\n      from.totalAlpha = 0;\n      for (let i = 0; i < timelineCount; i++) {\n        let timeline = timelines[i];\n        let direction = MixDirection.mixOut;\n        let timelineBlend;\n        let alpha = 0;\n        switch (timelineMode[i]) {\n          case SUBSEQUENT:\n            if (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\n            timelineBlend = blend;\n            alpha = alphaMix;\n            break;\n          case FIRST:\n            timelineBlend = MixBlend.setup;\n            alpha = alphaMix;\n            break;\n          case HOLD_SUBSEQUENT:\n            timelineBlend = blend;\n            alpha = alphaHold;\n            break;\n          case HOLD_FIRST:\n            timelineBlend = MixBlend.setup;\n            alpha = alphaHold;\n            break;\n          default:\n            timelineBlend = MixBlend.setup;\n            let holdMix = timelineHoldMix[i];\n            alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n            break;\n        }\n        from.totalAlpha += alpha;\n        if (!shortestRotation && timeline instanceof RotateTimeline) this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);else if (timeline instanceof AttachmentTimeline) this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);else {\n          // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n          Utils.webkit602BugfixHelper(alpha, blend);\n          if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup) direction = MixDirection.mixIn;\n          timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\n        }\n      }\n    }\n    if (to.mixDuration > 0) this.queueEvents(from, animationTime);\n    this.events.length = 0;\n    from.nextAnimationLast = animationTime;\n    from.nextTrackLast = from.trackTime;\n    return mix;\n  }\n  applyAttachmentTimeline(timeline, skeleton, time, blend, attachments) {\n    var slot = skeleton.slots[timeline.slotIndex];\n    if (!slot.bone.active) return;\n    if (time < timeline.frames[0]) {\n      // Time is before first frame.\n      if (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\n    } else this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\n    // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\n    if (slot.attachmentState <= this.unkeyedState) slot.attachmentState = this.unkeyedState + SETUP;\n  }\n  setAttachment(skeleton, slot, attachmentName, attachments) {\n    slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n    if (attachments) slot.attachmentState = this.unkeyedState + CURRENT;\n  }\n  applyRotateTimeline(timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {\n    if (firstFrame) timelinesRotation[i] = 0;\n    if (alpha == 1) {\n      timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n      return;\n    }\n    let bone = skeleton.bones[timeline.boneIndex];\n    if (!bone.active) return;\n    let frames = timeline.frames;\n    let r1 = 0,\n      r2 = 0;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation;\n        default:\n          return;\n        case MixBlend.first:\n          r1 = bone.rotation;\n          r2 = bone.data.rotation;\n      }\n    } else {\n      r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n      r2 = bone.data.rotation + timeline.getCurveValue(time);\n    }\n    // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n    let total = 0,\n      diff = r2 - r1;\n    diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;\n    if (diff == 0) {\n      total = timelinesRotation[i];\n    } else {\n      let lastTotal = 0,\n        lastDiff = 0;\n      if (firstFrame) {\n        lastTotal = 0;\n        lastDiff = diff;\n      } else {\n        lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\n        lastDiff = timelinesRotation[i + 1]; // Difference between bones.\n      }\n      let current = diff > 0,\n        dir = lastTotal >= 0;\n      // Detect cross at 0 (not 180).\n      if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n        // A cross after a 360 rotation is a loop.\n        if (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\n        dir = current;\n      }\n      total = diff + lastTotal - lastTotal % 360; // Store loops as part of lastTotal.\n      if (dir != current) total += 360 * MathUtils.signum(lastTotal);\n      timelinesRotation[i] = total;\n    }\n    timelinesRotation[i + 1] = diff;\n    bone.rotation = r1 + total * alpha;\n  }\n  queueEvents(entry, animationTime) {\n    let animationStart = entry.animationStart,\n      animationEnd = entry.animationEnd;\n    let duration = animationEnd - animationStart;\n    let trackLastWrapped = entry.trackLast % duration;\n    // Queue events before complete.\n    let events = this.events;\n    let i = 0,\n      n = events.length;\n    for (; i < n; i++) {\n      let event = events[i];\n      if (event.time < trackLastWrapped) break;\n      if (event.time > animationEnd) continue; // Discard events outside animation start/end.\n      this.queue.event(entry, event);\n    }\n    // Queue complete if completed a loop iteration or the animation.\n    let complete = false;\n    if (entry.loop) complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;else complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n    if (complete) this.queue.complete(entry);\n    // Queue events after complete.\n    for (; i < n; i++) {\n      let event = events[i];\n      if (event.time < animationStart) continue; // Discard events outside animation start/end.\n      this.queue.event(entry, event);\n    }\n  }\n  /** Removes all animations from all tracks, leaving skeletons in their current pose.\n   *\n   * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n   * rather than leaving them in their current pose. */\n  clearTracks() {\n    let oldDrainDisabled = this.queue.drainDisabled;\n    this.queue.drainDisabled = true;\n    for (let i = 0, n = this.tracks.length; i < n; i++) this.clearTrack(i);\n    this.tracks.length = 0;\n    this.queue.drainDisabled = oldDrainDisabled;\n    this.queue.drain();\n  }\n  /** Removes all animations from the track, leaving skeletons in their current pose.\n   *\n   * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n   * rather than leaving them in their current pose. */\n  clearTrack(trackIndex) {\n    if (trackIndex >= this.tracks.length) return;\n    let current = this.tracks[trackIndex];\n    if (!current) return;\n    this.queue.end(current);\n    this.clearNext(current);\n    let entry = current;\n    while (true) {\n      let from = entry.mixingFrom;\n      if (!from) break;\n      this.queue.end(from);\n      entry.mixingFrom = null;\n      entry.mixingTo = null;\n      entry = from;\n    }\n    this.tracks[current.trackIndex] = null;\n    this.queue.drain();\n  }\n  setCurrent(index, current, interrupt) {\n    let from = this.expandToIndex(index);\n    this.tracks[index] = current;\n    current.previous = null;\n    if (from) {\n      if (interrupt) this.queue.interrupt(from);\n      current.mixingFrom = from;\n      from.mixingTo = current;\n      current.mixTime = 0;\n      // Store the interrupted mix percentage.\n      if (from.mixingFrom && from.mixDuration > 0) current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n      from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\n    }\n    this.queue.start(current);\n  }\n  /** Sets an animation by name.\n    *\n    * See {@link #setAnimationWith()}. */\n  setAnimation(trackIndex, animationName, loop = false) {\n    let animation = this.data.skeletonData.findAnimation(animationName);\n    if (!animation) throw new Error(\"Animation not found: \" + animationName);\n    return this.setAnimationWith(trackIndex, animation, loop);\n  }\n  /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n   * applied to a skeleton, it is replaced (not mixed from).\n   * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n   *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n   * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n   *         after the {@link AnimationStateListener#dispose()} event occurs. */\n  setAnimationWith(trackIndex, animation, loop = false) {\n    if (!animation) throw new Error(\"animation cannot be null.\");\n    let interrupt = true;\n    let current = this.expandToIndex(trackIndex);\n    if (current) {\n      if (current.nextTrackLast == -1) {\n        // Don't mix from an entry that was never applied.\n        this.tracks[trackIndex] = current.mixingFrom;\n        this.queue.interrupt(current);\n        this.queue.end(current);\n        this.clearNext(current);\n        current = current.mixingFrom;\n        interrupt = false;\n      } else this.clearNext(current);\n    }\n    let entry = this.trackEntry(trackIndex, animation, loop, current);\n    this.setCurrent(trackIndex, entry, interrupt);\n    this.queue.drain();\n    return entry;\n  }\n  /** Queues an animation by name.\n   *\n   * See {@link #addAnimationWith()}. */\n  addAnimation(trackIndex, animationName, loop = false, delay = 0) {\n    let animation = this.data.skeletonData.findAnimation(animationName);\n    if (!animation) throw new Error(\"Animation not found: \" + animationName);\n    return this.addAnimationWith(trackIndex, animation, loop, delay);\n  }\n  /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n   * equivalent to calling {@link #setAnimationWith()}.\n   * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n   *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n   *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n   *           previous entry is looping, its next loop completion is used instead of its duration.\n   * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n   *         after the {@link AnimationStateListener#dispose()} event occurs. */\n  addAnimationWith(trackIndex, animation, loop = false, delay = 0) {\n    if (!animation) throw new Error(\"animation cannot be null.\");\n    let last = this.expandToIndex(trackIndex);\n    if (last) {\n      while (last.next) last = last.next;\n    }\n    let entry = this.trackEntry(trackIndex, animation, loop, last);\n    if (!last) {\n      this.setCurrent(trackIndex, entry, true);\n      this.queue.drain();\n    } else {\n      last.next = entry;\n      entry.previous = last;\n      if (delay <= 0) delay += last.getTrackComplete() - entry.mixDuration;\n    }\n    entry.delay = delay;\n    return entry;\n  }\n  /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n   * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n   *\n   * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n   * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n   * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n   * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n   * 0 still mixes out over one frame.\n   *\n   * Mixing in is done by first setting an empty animation, then adding an animation using\n   * {@link #addAnimation()} and on the returned track entry, set the\n   * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n   * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n   * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n  setEmptyAnimation(trackIndex, mixDuration = 0) {\n    let entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\n    entry.mixDuration = mixDuration;\n    entry.trackEnd = mixDuration;\n    return entry;\n  }\n  /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n   * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n   * {@link #setEmptyAnimation()}.\n   *\n   * See {@link #setEmptyAnimation()}.\n   * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n   *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n   *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n   *           loop completion is used instead of its duration.\n   * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n   *         after the {@link AnimationStateListener#dispose()} event occurs. */\n  addEmptyAnimation(trackIndex, mixDuration = 0, delay = 0) {\n    let entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\n    if (delay <= 0) entry.delay += entry.mixDuration - mixDuration;\n    entry.mixDuration = mixDuration;\n    entry.trackEnd = mixDuration;\n    return entry;\n  }\n  /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n    * duration. */\n  setEmptyAnimations(mixDuration = 0) {\n    let oldDrainDisabled = this.queue.drainDisabled;\n    this.queue.drainDisabled = true;\n    for (let i = 0, n = this.tracks.length; i < n; i++) {\n      let current = this.tracks[i];\n      if (current) this.setEmptyAnimation(current.trackIndex, mixDuration);\n    }\n    this.queue.drainDisabled = oldDrainDisabled;\n    this.queue.drain();\n  }\n  expandToIndex(index) {\n    if (index < this.tracks.length) return this.tracks[index];\n    Utils.ensureArrayCapacity(this.tracks, index + 1, null);\n    this.tracks.length = index + 1;\n    return null;\n  }\n  /** @param last May be null. */\n  trackEntry(trackIndex, animation, loop, last) {\n    let entry = this.trackEntryPool.obtain();\n    entry.reset();\n    entry.trackIndex = trackIndex;\n    entry.animation = animation;\n    entry.loop = loop;\n    entry.holdPrevious = false;\n    entry.reverse = false;\n    entry.shortestRotation = false;\n    entry.eventThreshold = 0;\n    entry.attachmentThreshold = 0;\n    entry.drawOrderThreshold = 0;\n    entry.animationStart = 0;\n    entry.animationEnd = animation.duration;\n    entry.animationLast = -1;\n    entry.nextAnimationLast = -1;\n    entry.delay = 0;\n    entry.trackTime = 0;\n    entry.trackLast = -1;\n    entry.nextTrackLast = -1;\n    entry.trackEnd = Number.MAX_VALUE;\n    entry.timeScale = 1;\n    entry.alpha = 1;\n    entry.mixTime = 0;\n    entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\n    entry.interruptAlpha = 1;\n    entry.totalAlpha = 0;\n    entry.mixBlend = MixBlend.replace;\n    return entry;\n  }\n  /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\n  clearNext(entry) {\n    let next = entry.next;\n    while (next) {\n      this.queue.dispose(next);\n      next = next.next;\n    }\n    entry.next = null;\n  }\n  _animationsChanged() {\n    this.animationsChanged = false;\n    this.propertyIDs.clear();\n    let tracks = this.tracks;\n    for (let i = 0, n = tracks.length; i < n; i++) {\n      let entry = tracks[i];\n      if (!entry) continue;\n      while (entry.mixingFrom) entry = entry.mixingFrom;\n      do {\n        if (!entry.mixingTo || entry.mixBlend != MixBlend.add) this.computeHold(entry);\n        entry = entry.mixingTo;\n      } while (entry);\n    }\n  }\n  computeHold(entry) {\n    let to = entry.mixingTo;\n    let timelines = entry.animation.timelines;\n    let timelinesCount = entry.animation.timelines.length;\n    let timelineMode = entry.timelineMode;\n    timelineMode.length = timelinesCount;\n    let timelineHoldMix = entry.timelineHoldMix;\n    timelineHoldMix.length = 0;\n    let propertyIDs = this.propertyIDs;\n    if (to && to.holdPrevious) {\n      for (let i = 0; i < timelinesCount; i++) timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\n      return;\n    }\n    outer: for (let i = 0; i < timelinesCount; i++) {\n      let timeline = timelines[i];\n      let ids = timeline.getPropertyIds();\n      if (!propertyIDs.addAll(ids)) timelineMode[i] = SUBSEQUENT;else if (!to || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline || timeline instanceof EventTimeline || !to.animation.hasTimeline(ids)) {\n        timelineMode[i] = FIRST;\n      } else {\n        for (let next = to.mixingTo; next; next = next.mixingTo) {\n          if (next.animation.hasTimeline(ids)) continue;\n          if (entry.mixDuration > 0) {\n            timelineMode[i] = HOLD_MIX;\n            timelineHoldMix[i] = next;\n            continue outer;\n          }\n          break;\n        }\n        timelineMode[i] = HOLD_FIRST;\n      }\n    }\n  }\n  /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n  getCurrent(trackIndex) {\n    if (trackIndex >= this.tracks.length) return null;\n    return this.tracks[trackIndex];\n  }\n  /** Adds a listener to receive events for all track entries. */\n  addListener(listener) {\n    if (!listener) throw new Error(\"listener cannot be null.\");\n    this.listeners.push(listener);\n  }\n  /** Removes the listener added with {@link #addListener()}. */\n  removeListener(listener) {\n    let index = this.listeners.indexOf(listener);\n    if (index >= 0) this.listeners.splice(index, 1);\n  }\n  /** Removes all listeners added with {@link #addListener()}. */\n  clearListeners() {\n    this.listeners.length = 0;\n  }\n  /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n   * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n   * are not wanted because new animations are being set. */\n  clearListenerNotifications() {\n    this.queue.clear();\n  }\n}\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n *\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs. */\n_defineProperty(AnimationState, \"_emptyAnimation\", new Animation(\"<empty>\", [], 0));\nexport class TrackEntry {\n  constructor() {\n    /** The animation to apply for this track entry. */\n    _defineProperty(this, \"animation\", null);\n    _defineProperty(this, \"previous\", null);\n    /** The animation queued to start after this animation, or null. `next` makes up a linked list. */\n    _defineProperty(this, \"next\", null);\n    /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n     * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\n    _defineProperty(this, \"mixingFrom\", null);\n    /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n     * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\n    _defineProperty(this, \"mixingTo\", null);\n    /** The listener for events generated by this track entry, or null.\n     *\n     * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\n     * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\n    _defineProperty(this, \"listener\", null);\n    /** The index of the track where this track entry is either current or queued.\n     *\n     * See {@link AnimationState#getCurrent()}. */\n    _defineProperty(this, \"trackIndex\", 0);\n    /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     * duration. */\n    _defineProperty(this, \"loop\", false);\n    /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n     * of being mixed out.\n     *\n     * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n     * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n     * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n     * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n     * keys the property, only when a higher track also keys the property.\n     *\n     * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n     * previous animation. */\n    _defineProperty(this, \"holdPrevious\", false);\n    _defineProperty(this, \"reverse\", false);\n    _defineProperty(this, \"shortestRotation\", false);\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n     * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n     * timelines are not applied while this animation is being mixed out. */\n    _defineProperty(this, \"eventThreshold\", 0);\n    /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n     * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n     * 0, so attachment timelines are not applied while this animation is being mixed out. */\n    _defineProperty(this, \"attachmentThreshold\", 0);\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n     * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\n     * so draw order timelines are not applied while this animation is being mixed out. */\n    _defineProperty(this, \"drawOrderThreshold\", 0);\n    /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n     *\n     * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\n     * value to prevent timeline keys before the start time from triggering. */\n    _defineProperty(this, \"animationStart\", 0);\n    /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n     * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\n    _defineProperty(this, \"animationEnd\", 0);\n    /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n     * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n     * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n     * is applied. */\n    _defineProperty(this, \"animationLast\", 0);\n    _defineProperty(this, \"nextAnimationLast\", 0);\n    /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n     * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\n     * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n     * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\n     *\n     * {@link #timeScale} affects the delay. */\n    _defineProperty(this, \"delay\", 0);\n    /** Current time in seconds this track entry has been the current track entry. The track time determines\n     * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\n     * looping. */\n    _defineProperty(this, \"trackTime\", 0);\n    _defineProperty(this, \"trackLast\", 0);\n    _defineProperty(this, \"nextTrackLast\", 0);\n    /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n     * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n     * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n     * properties keyed by the animation are set to the setup pose and the track is cleared.\n     *\n     * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\n     * abruptly cease being applied. */\n    _defineProperty(this, \"trackEnd\", 0);\n    /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n     * faster. Defaults to 1.\n     *\n     * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\n     * match the animation speed.\n     *\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\n     * the time scale is not 1, the delay may need to be adjusted.\n     *\n     * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\n    _defineProperty(this, \"timeScale\", 0);\n    /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n     * to 1, which overwrites the skeleton's current pose with this animation.\n     *\n     * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n     * use alpha on track 0 if the skeleton pose is from the last frame render. */\n    _defineProperty(this, \"alpha\", 0);\n    /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\n     * slightly more than `mixDuration` when the mix is complete. */\n    _defineProperty(this, \"mixTime\", 0);\n    /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n     * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\n     *\n     * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n     * properties it was animating.\n     *\n     * The `mixDuration` can be set manually rather than use the value from\n     * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\n     * track entry only before {@link AnimationState#update(float)} is first called.\n     *\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\n     * afterward. */\n    _defineProperty(this, \"mixDuration\", 0);\n    _defineProperty(this, \"interruptAlpha\", 0);\n    _defineProperty(this, \"totalAlpha\", 0);\n    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n     * the values from the lower tracks.\n     *\n     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n     * called. */\n    _defineProperty(this, \"mixBlend\", MixBlend.replace);\n    _defineProperty(this, \"timelineMode\", new Array());\n    _defineProperty(this, \"timelineHoldMix\", new Array());\n    _defineProperty(this, \"timelinesRotation\", new Array());\n  }\n  reset() {\n    this.next = null;\n    this.previous = null;\n    this.mixingFrom = null;\n    this.mixingTo = null;\n    this.animation = null;\n    this.listener = null;\n    this.timelineMode.length = 0;\n    this.timelineHoldMix.length = 0;\n    this.timelinesRotation.length = 0;\n  }\n  /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n   * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n   * `animationStart` time. */\n  getAnimationTime() {\n    if (this.loop) {\n      let duration = this.animationEnd - this.animationStart;\n      if (duration == 0) return this.animationStart;\n      return this.trackTime % duration + this.animationStart;\n    }\n    return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n  }\n  setAnimationLast(animationLast) {\n    this.animationLast = animationLast;\n    this.nextAnimationLast = animationLast;\n  }\n  /** Returns true if at least one loop has been completed.\n   *\n   * See {@link AnimationStateListener#complete()}. */\n  isComplete() {\n    return this.trackTime >= this.animationEnd - this.animationStart;\n  }\n  /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n   * long way around when using {@link #alpha} and starting animations on other tracks.\n   *\n   * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n   * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n   * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n   * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n  resetRotationDirections() {\n    this.timelinesRotation.length = 0;\n  }\n  getTrackComplete() {\n    let duration = this.animationEnd - this.animationStart;\n    if (duration != 0) {\n      if (this.loop) return duration * (1 + (this.trackTime / duration | 0)); // Completion of next loop.\n      if (this.trackTime < duration) return duration; // Before duration.\n    }\n    return this.trackTime; // Next update.\n  }\n}\nexport class EventQueue {\n  constructor(animState) {\n    _defineProperty(this, \"objects\", []);\n    _defineProperty(this, \"drainDisabled\", false);\n    _defineProperty(this, \"animState\", void 0);\n    this.animState = animState;\n  }\n  start(entry) {\n    this.objects.push(EventType.start);\n    this.objects.push(entry);\n    this.animState.animationsChanged = true;\n  }\n  interrupt(entry) {\n    this.objects.push(EventType.interrupt);\n    this.objects.push(entry);\n  }\n  end(entry) {\n    this.objects.push(EventType.end);\n    this.objects.push(entry);\n    this.animState.animationsChanged = true;\n  }\n  dispose(entry) {\n    this.objects.push(EventType.dispose);\n    this.objects.push(entry);\n  }\n  complete(entry) {\n    this.objects.push(EventType.complete);\n    this.objects.push(entry);\n  }\n  event(entry, event) {\n    this.objects.push(EventType.event);\n    this.objects.push(entry);\n    this.objects.push(event);\n  }\n  drain() {\n    if (this.drainDisabled) return;\n    this.drainDisabled = true;\n    let objects = this.objects;\n    let listeners = this.animState.listeners;\n    for (let i = 0; i < objects.length; i += 2) {\n      let type = objects[i];\n      let entry = objects[i + 1];\n      switch (type) {\n        case EventType.start:\n          if (entry.listener && entry.listener.start) entry.listener.start(entry);\n          for (let ii = 0; ii < listeners.length; ii++) {\n            let listener = listeners[ii];\n            if (listener.start) listener.start(entry);\n          }\n          break;\n        case EventType.interrupt:\n          if (entry.listener && entry.listener.interrupt) entry.listener.interrupt(entry);\n          for (let ii = 0; ii < listeners.length; ii++) {\n            let listener = listeners[ii];\n            if (listener.interrupt) listener.interrupt(entry);\n          }\n          break;\n        case EventType.end:\n          if (entry.listener && entry.listener.end) entry.listener.end(entry);\n          for (let ii = 0; ii < listeners.length; ii++) {\n            let listener = listeners[ii];\n            if (listener.end) listener.end(entry);\n          }\n        // Fall through.\n        case EventType.dispose:\n          if (entry.listener && entry.listener.dispose) entry.listener.dispose(entry);\n          for (let ii = 0; ii < listeners.length; ii++) {\n            let listener = listeners[ii];\n            if (listener.dispose) listener.dispose(entry);\n          }\n          this.animState.trackEntryPool.free(entry);\n          break;\n        case EventType.complete:\n          if (entry.listener && entry.listener.complete) entry.listener.complete(entry);\n          for (let ii = 0; ii < listeners.length; ii++) {\n            let listener = listeners[ii];\n            if (listener.complete) listener.complete(entry);\n          }\n          break;\n        case EventType.event:\n          let event = objects[i++ + 2];\n          if (entry.listener && entry.listener.event) entry.listener.event(entry, event);\n          for (let ii = 0; ii < listeners.length; ii++) {\n            let listener = listeners[ii];\n            if (listener.event) listener.event(entry, event);\n          }\n          break;\n      }\n    }\n    this.clear();\n    this.drainDisabled = false;\n  }\n  clear() {\n    this.objects.length = 0;\n  }\n}\nexport var EventType;\n(function (EventType) {\n  EventType[EventType[\"start\"] = 0] = \"start\";\n  EventType[EventType[\"interrupt\"] = 1] = \"interrupt\";\n  EventType[EventType[\"end\"] = 2] = \"end\";\n  EventType[EventType[\"dispose\"] = 3] = \"dispose\";\n  EventType[EventType[\"complete\"] = 4] = \"complete\";\n  EventType[EventType[\"event\"] = 5] = \"event\";\n})(EventType || (EventType = {}));\nexport class AnimationStateAdapter {\n  start(entry) {}\n  interrupt(entry) {}\n  end(entry) {}\n  dispose(entry) {}\n  complete(entry) {}\n  event(entry, event) {}\n}\n/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */\nexport const SUBSEQUENT = 0;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */\nexport const FIRST = 1;\n/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_SUBSEQUENT = 2;\n/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */\nexport const HOLD_FIRST = 3;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */\nexport const HOLD_MIX = 4;\nexport const SETUP = 1;\nexport const CURRENT = 2;","map":{"version":3,"names":["Animation","MixBlend","AttachmentTimeline","MixDirection","RotateTimeline","DrawOrderTimeline","Timeline","EventTimeline","StringSet","Pool","Utils","MathUtils","AnimationState","emptyAnimation","_emptyAnimation","constructor","data","_defineProperty","Array","EventQueue","TrackEntry","update","delta","timeScale","tracks","i","n","length","current","animationLast","nextAnimationLast","trackLast","nextTrackLast","currentDelta","delay","next","nextTime","trackTime","setCurrent","mixingFrom","mixTime","trackEnd","queue","end","clearNext","updateMixingFrom","from","mixingTo","drain","to","finished","mixDuration","totalAlpha","interruptAlpha","apply","skeleton","Error","animationsChanged","_animationsChanged","events","applied","blend","first","mixBlend","mix","alpha","applyMixingFrom","animationTime","getAnimationTime","applyTime","applyEvents","reverse","animation","duration","timelines","timelineCount","add","ii","webkit602BugfixHelper","timeline","applyAttachmentTimeline","mixIn","timelineMode","shortestRotation","firstFrame","timelinesRotation","timelineBlend","SUBSEQUENT","setup","applyRotateTimeline","queueEvents","setupState","unkeyedState","SETUP","slots","slot","attachmentState","attachmentName","setAttachment","getAttachment","index","attachments","attachmentThreshold","drawOrder","drawOrderThreshold","alphaHold","alphaMix","eventThreshold","mixOut","timelineHoldMix","direction","FIRST","HOLD_SUBSEQUENT","HOLD_FIRST","holdMix","Math","max","time","slotIndex","bone","active","frames","attachmentNames","search1","CURRENT","bones","boneIndex","r1","r2","rotation","getCurveValue","total","diff","lastTotal","lastDiff","dir","signum","abs","entry","animationStart","animationEnd","trackLastWrapped","event","complete","loop","clearTracks","oldDrainDisabled","drainDisabled","clearTrack","trackIndex","interrupt","expandToIndex","previous","min","start","setAnimation","animationName","skeletonData","findAnimation","setAnimationWith","trackEntry","addAnimation","addAnimationWith","last","getTrackComplete","setEmptyAnimation","addEmptyAnimation","setEmptyAnimations","ensureArrayCapacity","trackEntryPool","obtain","reset","holdPrevious","Number","MAX_VALUE","getMix","replace","dispose","propertyIDs","clear","computeHold","timelinesCount","addAll","getPropertyIds","outer","ids","hasTimeline","HOLD_MIX","getCurrent","addListener","listener","listeners","push","removeListener","indexOf","splice","clearListeners","clearListenerNotifications","setAnimationLast","isComplete","resetRotationDirections","animState","objects","EventType","type","free","AnimationStateAdapter"],"sources":["../src/AnimationState.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}