{"ast":null,"code":"import { Color } from '@pixi-spine/base';\nimport { BLEND_MODES } from '@pixi/core';\nclass SlotData {\n  constructor(index, name, boneData) {\n    /** The index of the slot in {@link Skeleton#getSlots()}. */\n    this.index = 0;\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n     * color tinting. */\n    this.color = new Color(1, 1, 1, 1);\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used. */\n    this.darkColor = null;\n    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\n    this.attachmentName = null;\n    /** The blend mode for drawing the slot's attachment. */\n    this.blendMode = BLEND_MODES.NORMAL;\n    if (index < 0) throw new Error(\"index must be >= 0.\");\n    if (!name) throw new Error(\"name cannot be null.\");\n    if (!boneData) throw new Error(\"boneData cannot be null.\");\n    this.index = index;\n    this.name = name;\n    this.boneData = boneData;\n  }\n}\nexport { SlotData };","map":{"version":3,"names":["SlotData","constructor","index","name","boneData","color","Color","darkColor","attachmentName","blendMode","BLEND_MODES","NORMAL","Error"],"sources":["../../src/core/SlotData.ts"],"sourcesContent":["import { Color } from '@pixi-spine/base';\n\nimport type { ISlotData } from '@pixi-spine/base';\nimport { BLEND_MODES } from '@pixi/core';\nimport type { BoneData } from './BoneData';\n\n/** Stores the setup pose for a {@link Slot}.\n * @public\n * */\nexport class SlotData implements ISlotData {\n    /** The index of the slot in {@link Skeleton#getSlots()}. */\n    index = 0;\n\n    /** The name of the slot, which is unique across all slots in the skeleton. */\n    name: string;\n\n    /** The bone this slot belongs to. */\n    boneData: BoneData;\n\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\n     * color tinting. */\n    color = new Color(1, 1, 1, 1);\n\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\n     * color's alpha is not used. */\n    darkColor: Color | null = null;\n\n    /** The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible. */\n    attachmentName: string | null = null;\n\n    /** The blend mode for drawing the slot's attachment. */\n    blendMode: BLEND_MODES = BLEND_MODES.NORMAL;\n\n    constructor(index: number, name: string, boneData: BoneData) {\n        if (index < 0) throw new Error('index must be >= 0.');\n        if (!name) throw new Error('name cannot be null.');\n        if (!boneData) throw new Error('boneData cannot be null.');\n        this.index = index;\n        this.name = name;\n        this.boneData = boneData;\n    }\n}\n"],"mappings":";;AASO,MAAMA,QAA8B;EAwBvCC,YAAYC,KAAe,EAAAC,IAAA,EAAcC,QAAoB;IAtB7D;IAAQ,KAAAF,KAAA;IAUR;AAAA;IAAA,KAAAG,KAAA,GAAQ,IAAIC,KAAA,CAAM,CAAG,KAAG,GAAG,CAAC;IAI5B;AAAA;IAA0B,KAAAC,SAAA;IAG1B;IAAgC,KAAAC,cAAA;IAGhC;IAAA,KAAAC,SAAA,GAAyBC,WAAY,CAAAC,MAAA;IAGjC,IAAIT,KAAQ,MAAS,UAAIU,KAAA,CAAM,qBAAqB;IACpD,IAAI,CAACT,IAAA,EAAY,UAAIS,KAAA,CAAM,sBAAsB;IACjD,IAAI,CAACR,QAAA,EAAgB,UAAIQ,KAAA,CAAM,0BAA0B;IACzD,KAAKV,KAAQ,GAAAA,KAAA;IACb,KAAKC,IAAO,GAAAA,IAAA;IACZ,KAAKC,QAAW,GAAAA,QAAA;EAAA;AAExB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}