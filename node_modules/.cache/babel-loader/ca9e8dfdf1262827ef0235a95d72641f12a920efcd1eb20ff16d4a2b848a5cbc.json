{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport * as spine from '@pixi-spine/runtime-4.1'; // Assuming you're using pixi-spine\n\nexport default {\n  name: 'PixiSpineComponent',\n  mounted() {\n    this.initPixi();\n  },\n  methods: {\n    async initPixi() {\n      const app = new PIXI.Application({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50\n      });\n      this.$refs.pixiContainer.appendChild(app.view);\n\n      // Pre-load the skeleton data and atlas\n      PIXI.Assets.add({\n        alias: 'spineboyData',\n        src: './assets/spineboy-pro.skel'\n      });\n      PIXI.Assets.add({\n        alias: 'spineboyAtlas',\n        src: './assets/spineboy-pma.atlas'\n      });\n      await PIXI.Assets.load(['spineboyData', 'spineboyAtlas']);\n\n      // Create the spine display object\n      const spineboy = spine.Spine.from({\n        skeleton: 'spineboyData',\n        atlas: 'spineboyAtlas',\n        scale: 0.5\n      });\n\n      // Set the default mix time\n      spineboy.state.data.defaultMix = 0.2;\n\n      // Center the spine object\n      spineboy.x = window.innerWidth / 2;\n      spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n      // Set animation \"run\" on track 0, looped\n      spineboy.state.setAnimation(0, 'run', true);\n\n      // Add the display object to the stage\n      app.stage.addChild(spineboy);\n    }\n  }\n};","map":{"version":3,"names":["PIXI","spine","name","mounted","initPixi","methods","app","Application","width","window","innerWidth","height","innerHeight","resolution","devicePixelRatio","autoDensity","resizeTo","backgroundColor","$refs","pixiContainer","appendChild","view","Assets","add","alias","src","load","spineboy","Spine","from","skeleton","atlas","scale","state","data","defaultMix","x","y","getBounds","setAnimation","stage","addChild"],"sources":["src/spine/index.vue"],"sourcesContent":["<template>\n  <canvas ref=\"pixiContainer\" width=\"1458\" height=\"1476\" style=\"width: 729px; height: 738px; touch-action: none; cursor: inherit;\"></canvas>\n</template>\n\n<script>\nimport * as PIXI from 'pixi.js';\nimport * as spine from '@pixi-spine/runtime-4.1'; // Assuming you're using pixi-spine\n\nexport default {\n  name: 'PixiSpineComponent',\n  mounted() {\n    this.initPixi();\n  },\n  methods: {\n    async initPixi() {\n      const app = new PIXI.Application({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n      });\n\n      this.$refs.pixiContainer.appendChild(app.view);\n\n      // Pre-load the skeleton data and atlas\n      PIXI.Assets.add({ alias: 'spineboyData', src: './assets/spineboy-pro.skel' });\n      PIXI.Assets.add({ alias: 'spineboyAtlas', src: './assets/spineboy-pma.atlas' });\n      await PIXI.Assets.load(['spineboyData', 'spineboyAtlas']);\n\n      // Create the spine display object\n      const spineboy = spine.Spine.from({\n        skeleton: 'spineboyData',\n        atlas: 'spineboyAtlas',\n        scale: 0.5,\n      });\n\n      // Set the default mix time\n      spineboy.state.data.defaultMix = 0.2;\n\n      // Center the spine object\n      spineboy.x = window.innerWidth / 2;\n      spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n      // Set animation \"run\" on track 0, looped\n      spineboy.state.setAnimation(0, 'run', true);\n\n      // Add the display object to the stage\n      app.stage.addChild(spineboy);\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Add any styles if necessary */\n</style>\n"],"mappings":"AAKA,YAAAA,IAAA;AACA,YAAAC,KAAA;;AAEA;EACAC,IAAA;EACAC,QAAA;IACA,KAAAC,QAAA;EACA;EACAC,OAAA;IACA,MAAAD,SAAA;MACA,MAAAE,GAAA,OAAAN,IAAA,CAAAO,WAAA;QACAC,KAAA,EAAAC,MAAA,CAAAC,UAAA;QACAC,MAAA,EAAAF,MAAA,CAAAG,WAAA;QACAC,UAAA,EAAAJ,MAAA,CAAAK,gBAAA;QACAC,WAAA;QACAC,QAAA,EAAAP,MAAA;QACAQ,eAAA;MACA;MAEA,KAAAC,KAAA,CAAAC,aAAA,CAAAC,WAAA,CAAAd,GAAA,CAAAe,IAAA;;MAEA;MACArB,IAAA,CAAAsB,MAAA,CAAAC,GAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACAzB,IAAA,CAAAsB,MAAA,CAAAC,GAAA;QAAAC,KAAA;QAAAC,GAAA;MAAA;MACA,MAAAzB,IAAA,CAAAsB,MAAA,CAAAI,IAAA;;MAEA;MACA,MAAAC,QAAA,GAAA1B,KAAA,CAAA2B,KAAA,CAAAC,IAAA;QACAC,QAAA;QACAC,KAAA;QACAC,KAAA;MACA;;MAEA;MACAL,QAAA,CAAAM,KAAA,CAAAC,IAAA,CAAAC,UAAA;;MAEA;MACAR,QAAA,CAAAS,CAAA,GAAA3B,MAAA,CAAAC,UAAA;MACAiB,QAAA,CAAAU,CAAA,GAAA5B,MAAA,CAAAG,WAAA,OAAAe,QAAA,CAAAW,SAAA,GAAA3B,MAAA;;MAEA;MACAgB,QAAA,CAAAM,KAAA,CAAAM,YAAA;;MAEA;MACAjC,GAAA,CAAAkC,KAAA,CAAAC,QAAA,CAAAd,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}