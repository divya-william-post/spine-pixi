{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { Color, Utils } from \"../Utils.js\";\nimport { Attachment } from \"./Attachment.js\";\n/** An attachment that displays a textured quadrilateral.\n *\n * See [Region attachments](http://esotericsoftware.com/spine-regions) in the Spine User Guide. */\nexport class RegionAttachment extends Attachment {\n  constructor(name, path) {\n    super(name);\n    /** The local x translation. */\n    _defineProperty(this, \"x\", 0);\n    /** The local y translation. */\n    _defineProperty(this, \"y\", 0);\n    /** The local scaleX. */\n    _defineProperty(this, \"scaleX\", 1);\n    /** The local scaleY. */\n    _defineProperty(this, \"scaleY\", 1);\n    /** The local rotation. */\n    _defineProperty(this, \"rotation\", 0);\n    /** The width of the region attachment in Spine. */\n    _defineProperty(this, \"width\", 0);\n    /** The height of the region attachment in Spine. */\n    _defineProperty(this, \"height\", 0);\n    /** The color to tint the region attachment. */\n    _defineProperty(this, \"color\", new Color(1, 1, 1, 1));\n    /** The name of the texture region for this attachment. */\n    _defineProperty(this, \"path\", void 0);\n    _defineProperty(this, \"region\", null);\n    _defineProperty(this, \"sequence\", null);\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n     *\n     * See {@link #updateOffset()}. */\n    _defineProperty(this, \"offset\", Utils.newFloatArray(8));\n    _defineProperty(this, \"uvs\", Utils.newFloatArray(8));\n    _defineProperty(this, \"tempColor\", new Color(1, 1, 1, 1));\n    this.path = path;\n  }\n  /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\n  updateRegion() {\n    if (!this.region) throw new Error(\"Region not set.\");\n    let region = this.region;\n    let uvs = this.uvs;\n    if (region == null) {\n      uvs[0] = 0;\n      uvs[1] = 0;\n      uvs[2] = 0;\n      uvs[3] = 1;\n      uvs[4] = 1;\n      uvs[5] = 1;\n      uvs[6] = 1;\n      uvs[7] = 0;\n      return;\n    }\n    let regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n    let regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n    let localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n    let localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n    let localX2 = localX + this.region.width * regionScaleX;\n    let localY2 = localY + this.region.height * regionScaleY;\n    let radians = this.rotation * Math.PI / 180;\n    let cos = Math.cos(radians);\n    let sin = Math.sin(radians);\n    let x = this.x,\n      y = this.y;\n    let localXCos = localX * cos + x;\n    let localXSin = localX * sin;\n    let localYCos = localY * cos + y;\n    let localYSin = localY * sin;\n    let localX2Cos = localX2 * cos + x;\n    let localX2Sin = localX2 * sin;\n    let localY2Cos = localY2 * cos + y;\n    let localY2Sin = localY2 * sin;\n    let offset = this.offset;\n    offset[0] = localXCos - localYSin;\n    offset[1] = localYCos + localXSin;\n    offset[2] = localXCos - localY2Sin;\n    offset[3] = localY2Cos + localXSin;\n    offset[4] = localX2Cos - localY2Sin;\n    offset[5] = localY2Cos + localX2Sin;\n    offset[6] = localX2Cos - localYSin;\n    offset[7] = localYCos + localX2Sin;\n    if (region.degrees == 90) {\n      uvs[0] = region.u2;\n      uvs[1] = region.v2;\n      uvs[2] = region.u;\n      uvs[3] = region.v2;\n      uvs[4] = region.u;\n      uvs[5] = region.v;\n      uvs[6] = region.u2;\n      uvs[7] = region.v;\n    } else {\n      uvs[0] = region.u;\n      uvs[1] = region.v2;\n      uvs[2] = region.u;\n      uvs[3] = region.v;\n      uvs[4] = region.u2;\n      uvs[5] = region.v;\n      uvs[6] = region.u2;\n      uvs[7] = region.v2;\n    }\n  }\n  /** Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\n   * be changed.\n   * <p>\n   * See <a href=\"http://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\n   * Runtimes Guide.\n   * @param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\n   * @param offset The <code>worldVertices</code> index to begin writing values.\n   * @param stride The number of <code>worldVertices</code> entries between the value pairs written. */\n  computeWorldVertices(slot, worldVertices, offset, stride) {\n    if (this.sequence != null) this.sequence.apply(slot, this);\n    let bone = slot.bone;\n    let vertexOffset = this.offset;\n    let x = bone.worldX,\n      y = bone.worldY;\n    let a = bone.a,\n      b = bone.b,\n      c = bone.c,\n      d = bone.d;\n    let offsetX = 0,\n      offsetY = 0;\n    offsetX = vertexOffset[0];\n    offsetY = vertexOffset[1];\n    worldVertices[offset] = offsetX * a + offsetY * b + x; // br\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[2];\n    offsetY = vertexOffset[3];\n    worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[4];\n    offsetY = vertexOffset[5];\n    worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[6];\n    offsetY = vertexOffset[7];\n    worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n  }\n  copy() {\n    let copy = new RegionAttachment(this.name, this.path);\n    copy.region = this.region;\n    copy.x = this.x;\n    copy.y = this.y;\n    copy.scaleX = this.scaleX;\n    copy.scaleY = this.scaleY;\n    copy.rotation = this.rotation;\n    copy.width = this.width;\n    copy.height = this.height;\n    Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n    Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n    copy.color.setFromColor(this.color);\n    copy.sequence = this.sequence != null ? this.sequence.copy() : null;\n    return copy;\n  }\n}\n_defineProperty(RegionAttachment, \"X1\", 0);\n_defineProperty(RegionAttachment, \"Y1\", 1);\n_defineProperty(RegionAttachment, \"C1R\", 2);\n_defineProperty(RegionAttachment, \"C1G\", 3);\n_defineProperty(RegionAttachment, \"C1B\", 4);\n_defineProperty(RegionAttachment, \"C1A\", 5);\n_defineProperty(RegionAttachment, \"U1\", 6);\n_defineProperty(RegionAttachment, \"V1\", 7);\n_defineProperty(RegionAttachment, \"X2\", 8);\n_defineProperty(RegionAttachment, \"Y2\", 9);\n_defineProperty(RegionAttachment, \"C2R\", 10);\n_defineProperty(RegionAttachment, \"C2G\", 11);\n_defineProperty(RegionAttachment, \"C2B\", 12);\n_defineProperty(RegionAttachment, \"C2A\", 13);\n_defineProperty(RegionAttachment, \"U2\", 14);\n_defineProperty(RegionAttachment, \"V2\", 15);\n_defineProperty(RegionAttachment, \"X3\", 16);\n_defineProperty(RegionAttachment, \"Y3\", 17);\n_defineProperty(RegionAttachment, \"C3R\", 18);\n_defineProperty(RegionAttachment, \"C3G\", 19);\n_defineProperty(RegionAttachment, \"C3B\", 20);\n_defineProperty(RegionAttachment, \"C3A\", 21);\n_defineProperty(RegionAttachment, \"U3\", 22);\n_defineProperty(RegionAttachment, \"V3\", 23);\n_defineProperty(RegionAttachment, \"X4\", 24);\n_defineProperty(RegionAttachment, \"Y4\", 25);\n_defineProperty(RegionAttachment, \"C4R\", 26);\n_defineProperty(RegionAttachment, \"C4G\", 27);\n_defineProperty(RegionAttachment, \"C4B\", 28);\n_defineProperty(RegionAttachment, \"C4A\", 29);\n_defineProperty(RegionAttachment, \"U4\", 30);\n_defineProperty(RegionAttachment, \"V4\", 31);","map":{"version":3,"names":["Color","Utils","Attachment","RegionAttachment","constructor","name","path","_defineProperty","newFloatArray","updateRegion","region","Error","uvs","regionScaleX","width","originalWidth","scaleX","regionScaleY","height","originalHeight","scaleY","localX","offsetX","localY","offsetY","localX2","localY2","radians","rotation","Math","PI","cos","sin","x","y","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","offset","degrees","u2","v2","u","v","computeWorldVertices","slot","worldVertices","stride","sequence","apply","bone","vertexOffset","worldX","worldY","a","b","c","d","copy","arrayCopy","color","setFromColor"],"sources":["../../src/attachments/RegionAttachment.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}