{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nexport async function initSpine() {\n  var app = new PIXI.Application();\n  await app.init({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    resolution: window.devicePixelRatio || 1,\n    autoDensity: true,\n    resizeTo: window,\n    backgroundColor: 0x2c3e50,\n    hello: true\n  });\n  document.body.appendChild(app.view);\n\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n  // Create the spine display object\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.5\n  });\n\n  // Set the default mix time to use when transitioning\n  // from one animation to another.\n  spineboy.state.data.defaultMix = 0.2;\n\n  // Center the Spine object on screen.\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(0, \"idle\", true);\n  spineboy.state.setAnimation(1, \"aim\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  let isDragging = false;\n  const controlBoneNames = [\"back-arm-ik-target\", \"back-leg-ik-target\", \"front-arm-ik-target\", \"front-leg-ik-target\"];\n  const controlBones = [];\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n  for (var i = 0; i < controlBoneNames.length; i++) {\n    const bone = spineboy.skeleton.findBone(controlBoneNames[i]);\n    const point = {\n      x: bone.worldX,\n      y: bone.worldY\n    };\n    spineboy.skeletonToPixiWorldCoordinates(point);\n    const control = new PIXI.Graphics().circle(0, 0, 6).fill('#ff00ff');\n    control.x = point.x;\n    control.y = point.y;\n    controlBones.push({\n      bone,\n      control\n    });\n    app.stage.addChild(control);\n    console.log(control.x, control.y);\n    control.interactive = \"static\";\n    control.on('pointerdown', ({\n      x,\n      y\n    }) => {\n      dragObject = control;\n      lastX = x;\n      lastY = y;\n    });\n  }\n  const point = {\n    x: 0,\n    y: 0\n  };\n  spineboy.beforeUpdateWorldTransforms = () => {\n    for (let {\n      bone,\n      control\n    } of controlBones) {\n      point.x = control.x;\n      point.y = control.y;\n      spineboy.pixiWorldCoordinatesToBone(point, bone);\n      bone.x = point.x;\n      bone.y = point.y;\n    }\n  };\n  app.stage.on(\"pointerdown\", e => {\n    isDragging = true;\n    setBonePosition(e);\n  });\n  app.stage.on(\"globalpointermove\", e => {\n    if (isDragging) setBonePosition(e);\n  });\n  app.stage.on(\"pointerup\", e => isDragging = false);\n  const setBonePosition = e => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(e.data.global.x - spineboy.x, e.data.global.y - spineboy.y);\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n  };\n}","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","window","innerWidth","height","innerHeight","resolution","devicePixelRatio","autoDensity","resizeTo","backgroundColor","hello","document","body","appendChild","view","Assets","add","alias","src","load","spineboy","spine","Spine","from","skeleton","atlas","scale","state","data","defaultMix","x","y","getBounds","setAnimation","stage","addChild","hitArea","Rectangle","eventMode","isDragging","controlBoneNames","controlBones","Promise","resolve","requestAnimationFrame","i","length","bone","findBone","point","worldX","worldY","skeletonToPixiWorldCoordinates","control","Graphics","circle","fill","push","console","log","interactive","on","dragObject","lastX","lastY","beforeUpdateWorldTransforms","pixiWorldCoordinatesToBone","e","setBonePosition","position","Vector2","global","crosshairBone","parent","worldToLocal"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\nexport async function initSpine () {\n    var app = new PIXI.Application();\n    await app.init({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n        hello: true,\n    })\n    document.body.appendChild(app.view);\n\n    // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n    // Create the spine display object\n    const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n        scale: 0.5,\n    });\n\n    // Set the default mix time to use when transitioning\n    // from one animation to another.\n    spineboy.state.data.defaultMix = 0.2;\n\n    // Center the Spine object on screen.\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n    // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n    spineboy.state.setAnimation(0, \"idle\", true);\n    spineboy.state.setAnimation(1, \"aim\", true);\n\n    // Add the display object to the stage.\n    app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n    let isDragging = false;\n\n    const controlBoneNames = [\n        \"back-arm-ik-target\",\n        \"back-leg-ik-target\",\n        \"front-arm-ik-target\",\n        \"front-leg-ik-target\",\n      ];\n      const controlBones = [];\n\n      // wait a frame as pixi bounds do not work until rendered\n      await new Promise((resolve) => requestAnimationFrame(resolve));\n\n      for (var i = 0; i < controlBoneNames.length; i++) {\n        const bone = spineboy.skeleton.findBone(controlBoneNames[i]);\n        const point = { x: bone.worldX, y: bone.worldY };\n        spineboy.skeletonToPixiWorldCoordinates(point);\n\n        const control = new PIXI.Graphics()\n          .circle(0, 0, 6)\n          .fill('#ff00ff')\n        control.x = point.x;\n        control.y = point.y;\n        controlBones.push({ bone, control });\n        app.stage.addChild(control);\n        console.log(control.x, control.y);\n\n        control.interactive = \"static\";\n        control.on('pointerdown', ({ x, y }) => {\n          dragObject = control;\n          lastX = x;\n          lastY = y;\n        })\n      }\n\n      const point = { x: 0, y: 0 };\n      spineboy.beforeUpdateWorldTransforms = () => {\n        for (let { bone, control } of controlBones) {\n          point.x = control.x;\n          point.y = control.y;\n          spineboy.pixiWorldCoordinatesToBone(point, bone);\n          bone.x = point.x;\n          bone.y = point.y;\n        }\n      };\n\n    app.stage.on(\"pointerdown\", (e) => {\n        isDragging = true;\n        setBonePosition(e);\n    });\n\n    app.stage.on(\"globalpointermove\", (e) => {\n        if (isDragging) setBonePosition(e);\n    });\n\n    app.stage.on(\"pointerup\", (e) => (isDragging = false));\n\n    const setBonePosition = (e) => {\n        // Transform the mouse/touch coordinates to Spineboy's coordinate\n        // system origin. `position` is then relative to Spineboy's root\n        // bone.\n        const position = new spine.Vector2(\n            e.data.global.x - spineboy.x,\n            e.data.global.y - spineboy.y\n        );\n\n        // Find the crosshair bone.\n        const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n        // Take the mouse position, which is relative to the root bone,\n        // and transform it to the crosshair bone's parent root bone\n        // coordinate system via `worldToLocal()`. `position` is relative\n        // to the crosshair bone's parent bone after this\n        crosshairBone.parent.worldToLocal(position);\n\n        // Set the crosshair bone's position to the mouse position\n        crosshairBone.x = position.x;\n        crosshairBone.y = position.y;\n    };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}