{"ast":null,"code":"var PositionMode = /* @__PURE__ */(PositionMode2 => {\n  PositionMode2[PositionMode2[\"Fixed\"] = 0] = \"Fixed\";\n  PositionMode2[PositionMode2[\"Percent\"] = 1] = \"Percent\";\n  return PositionMode2;\n})(PositionMode || {});\nvar RotateMode = /* @__PURE__ */(RotateMode2 => {\n  RotateMode2[RotateMode2[\"Tangent\"] = 0] = \"Tangent\";\n  RotateMode2[RotateMode2[\"Chain\"] = 1] = \"Chain\";\n  RotateMode2[RotateMode2[\"ChainScale\"] = 2] = \"ChainScale\";\n  return RotateMode2;\n})(RotateMode || {});\nexport { PositionMode, RotateMode };","map":{"version":3,"names":["PositionMode","PositionMode2","RotateMode","RotateMode2"],"sources":["../../src/core/IConstraint.ts"],"sourcesContent":["// These enums were moved from PathConstraintData.ts of spine 3.7, 3.8 and 4.0\n\n/** Controls how the first bone is positioned along the path.\n *\n * See [Position mode](http://esotericsoftware.com/spine-path-constraints#Position-mode) in the Spine User Guide.\n * @public\n * */\nexport enum PositionMode {\n    Fixed,\n    Percent,\n}\n\n/** Controls how bones are rotated, translated, and scaled to match the path.\n *\n * [Rotate mode](http://esotericsoftware.com/spine-path-constraints#Rotate-mod) in the Spine User Guide.\n * @public\n * */\nexport enum RotateMode {\n    Tangent,\n    Chain,\n    ChainScale,\n}\n\n/**\n * @public\n */\nexport interface IConstraintData {\n    name: string;\n    order: number;\n}\n\n/**\n * @public\n */\nexport interface IIkConstraint {\n    data: IIkConstraintData;\n    /** -1 | 0 | 1 */\n    bendDirection: number;\n    compress: boolean;\n    stretch: boolean;\n\n    /** A percentage (0-1) */\n    mix: number;\n}\n\n/**\n * @public\n */\nexport interface IIkConstraintData extends IConstraintData {\n    /** -1 | 0 | 1 */\n    bendDirection: number;\n    compress: boolean;\n    stretch: boolean;\n    uniform: boolean;\n\n    /** A percentage (0-1) */\n    mix: number;\n}\n\n/**\n * @public\n */\nexport interface IPathConstraint {\n    data: IPathConstraintData;\n    position: number;\n    spacing: number;\n\n    spaces: number[];\n    positions: number[];\n    world: number[];\n    curves: number[];\n    lengths: number[];\n    segments: number[];\n}\n\n/**\n * @public\n */\nexport interface IPathConstraintData extends IConstraintData {\n    positionMode: PositionMode;\n    rotateMode: RotateMode;\n    offsetRotation: number;\n    position: number;\n    spacing: number;\n}\n\n/**\n * @public\n */\nexport interface ITransformConstraint {\n    data: ITransformConstraintData;\n}\n\n/**\n * @public\n */\nexport interface ITransformConstraintData extends IConstraintData {\n    offsetRotation: number;\n    offsetX: number;\n    offsetY: number;\n    offsetScaleX: number;\n    offsetScaleY: number;\n    offsetShearY: number;\n    relative: boolean;\n    local: boolean;\n}\n"],"mappings":"AAOY,IAAAA,YAAA,mBAAAC,aAAL;EACHA,aAAA,CAAAA,aAAA;EACAA,aAAA,CAAAA,aAAA;EAFQ,OAAAA,aAAA;AAAA,GAAAD,YAAA;AAUA,IAAAE,UAAA,mBAAAC,WAAL;EACHA,WAAA,CAAAA,WAAA;EACAA,WAAA,CAAAA,WAAA;EACAA,WAAA,CAAAA,WAAA;EAHQ,OAAAA,WAAA;AAAA,GAAAD,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}