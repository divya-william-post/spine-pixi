{"ast":null,"code":"import _defineProperty from \"/Users/divya/Documents/vue-2024-spine/vue-20240spine/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\n/******************************************************************************\n * Spine Runtimes License Agreement\n * Last updated July 28, 2023. Replaces all prior versions.\n *\n * Copyright (c) 2013-2023, Esoteric Software LLC\n *\n * Integration of the Spine Runtimes into software or otherwise creating\n * derivative works of the Spine Runtimes is permitted under the terms and\n * conditions of Section 2 of the Spine Editor License Agreement:\n * http://esotericsoftware.com/spine-editor-license\n *\n * Otherwise, it is permitted to integrate the Spine Runtimes into software or\n * otherwise create derivative works of the Spine Runtimes (collectively,\n * \"Products\"), provided that each user of the Products must obtain their own\n * Spine Editor license and redistribution of the Products in any form must\n * include this license and copyright notice.\n *\n * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\n * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE\n * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nimport { VertexAttachment } from \"./attachments/Attachment.js\";\nimport { StringSet, Utils, MathUtils } from \"./Utils.js\";\nimport { SequenceMode, SequenceModeValues } from \"./attachments/Sequence.js\";\n/** A simple container for a list of timelines and a name. */\nexport class Animation {\n  constructor(name, timelines, duration) {\n    /** The animation's name, which is unique across all animations in the skeleton. */\n    _defineProperty(this, \"name\", void 0);\n    _defineProperty(this, \"timelines\", []);\n    _defineProperty(this, \"timelineIds\", new StringSet());\n    /** The duration of the animation in seconds, which is the highest time of all keys in the timeline. */\n    _defineProperty(this, \"duration\", void 0);\n    if (!name) throw new Error(\"name cannot be null.\");\n    this.name = name;\n    this.setTimelines(timelines);\n    this.duration = duration;\n  }\n  setTimelines(timelines) {\n    if (!timelines) throw new Error(\"timelines cannot be null.\");\n    this.timelines = timelines;\n    this.timelineIds.clear();\n    for (var i = 0; i < timelines.length; i++) this.timelineIds.addAll(timelines[i].getPropertyIds());\n  }\n  hasTimeline(ids) {\n    for (let i = 0; i < ids.length; i++) if (this.timelineIds.contains(ids[i])) return true;\n    return false;\n  }\n  /** Applies all the animation's timelines to the specified skeleton.\n   *\n   * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n   * @param loop If true, the animation repeats after {@link #getDuration()}.\n   * @param events May be null to ignore fired events. */\n  apply(skeleton, lastTime, time, loop, events, alpha, blend, direction) {\n    if (!skeleton) throw new Error(\"skeleton cannot be null.\");\n    if (loop && this.duration != 0) {\n      time %= this.duration;\n      if (lastTime > 0) lastTime %= this.duration;\n    }\n    let timelines = this.timelines;\n    for (let i = 0, n = timelines.length; i < n; i++) timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n  }\n}\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\n * < 1.\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport var MixBlend;\n(function (MixBlend) {\n  /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\n   * value is set. */\n  MixBlend[MixBlend[\"setup\"] = 0] = \"setup\";\n  /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\n   * the setup value. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or\n   * {@link AttachmentTimeline}, use the setup value before the first key.\n   *\n   * `first` is intended for the first animations applied, not for animations layered on top of those. */\n  MixBlend[MixBlend[\"first\"] = 1] = \"first\";\n  /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\n   * kept until the first key).\n   *\n   * `replace` is intended for animations layered on top of others, not for the first animations applied. */\n  MixBlend[MixBlend[\"replace\"] = 2] = \"replace\";\n  /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\n   * (the current value is kept until the first key).\n   *\n   * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\n   * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\n   * the property values will increase continually. */\n  MixBlend[MixBlend[\"add\"] = 3] = \"add\";\n})(MixBlend || (MixBlend = {}));\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\n * mixing in toward 1 (the timeline's value).\n *\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}. */\nexport var MixDirection;\n(function (MixDirection) {\n  MixDirection[MixDirection[\"mixIn\"] = 0] = \"mixIn\";\n  MixDirection[MixDirection[\"mixOut\"] = 1] = \"mixOut\";\n})(MixDirection || (MixDirection = {}));\nconst Property = {\n  rotate: 0,\n  x: 1,\n  y: 2,\n  scaleX: 3,\n  scaleY: 4,\n  shearX: 5,\n  shearY: 6,\n  rgb: 7,\n  alpha: 8,\n  rgb2: 9,\n  attachment: 10,\n  deform: 11,\n  event: 12,\n  drawOrder: 13,\n  ikConstraint: 14,\n  transformConstraint: 15,\n  pathConstraintPosition: 16,\n  pathConstraintSpacing: 17,\n  pathConstraintMix: 18,\n  sequence: 19\n};\n/** The interface for all timelines. */\nexport class Timeline {\n  constructor(frameCount, propertyIds) {\n    _defineProperty(this, \"propertyIds\", void 0);\n    _defineProperty(this, \"frames\", void 0);\n    this.propertyIds = propertyIds;\n    this.frames = Utils.newFloatArray(frameCount * this.getFrameEntries());\n  }\n  getPropertyIds() {\n    return this.propertyIds;\n  }\n  getFrameEntries() {\n    return 1;\n  }\n  getFrameCount() {\n    return this.frames.length / this.getFrameEntries();\n  }\n  getDuration() {\n    return this.frames[this.frames.length - this.getFrameEntries()];\n  }\n  static search1(frames, time) {\n    let n = frames.length;\n    for (let i = 1; i < n; i++) if (frames[i] > time) return i - 1;\n    return n - 1;\n  }\n  static search(frames, time, step) {\n    let n = frames.length;\n    for (let i = step; i < n; i += step) if (frames[i] > time) return i - step;\n    return n - step;\n  }\n}\n/** The base class for timelines that use interpolation between key frame values. */\nexport class CurveTimeline extends Timeline {\n  // type, x, y, ...\n  constructor(frameCount, bezierCount, propertyIds) {\n    super(frameCount, propertyIds);\n    _defineProperty(this, \"curves\", void 0);\n    this.curves = Utils.newFloatArray(frameCount + bezierCount * 18 /*BEZIER_SIZE*/);\n    this.curves[frameCount - 1] = 1 /*STEPPED*/;\n  }\n  /** Sets the specified key frame to linear interpolation. */\n  setLinear(frame) {\n    this.curves[frame] = 0 /*LINEAR*/;\n  }\n  /** Sets the specified key frame to stepped interpolation. */\n  setStepped(frame) {\n    this.curves[frame] = 1 /*STEPPED*/;\n  }\n  /** Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\n   * than the actual number of Bezier curves. */\n  shrink(bezierCount) {\n    let size = this.getFrameCount() + bezierCount * 18 /*BEZIER_SIZE*/;\n    if (this.curves.length > size) {\n      let newCurves = Utils.newFloatArray(size);\n      Utils.arrayCopy(this.curves, 0, newCurves, 0, size);\n      this.curves = newCurves;\n    }\n  }\n  /** Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\n   * one curve per frame.\n   * @param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\n   *           in the constructor), inclusive.\n   * @param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n   * @param value The index of the value for this frame that this curve is used for.\n   * @param time1 The time for the first key.\n   * @param value1 The value for the first key.\n   * @param cx1 The time for the first Bezier handle.\n   * @param cy1 The value for the first Bezier handle.\n   * @param cx2 The time of the second Bezier handle.\n   * @param cy2 The value for the second Bezier handle.\n   * @param time2 The time for the second key.\n   * @param value2 The value for the second key. */\n  setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {\n    let curves = this.curves;\n    let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;\n    if (value == 0) curves[frame] = 2 /*BEZIER*/ + i;\n    let tmpx = (time1 - cx1 * 2 + cx2) * 0.03,\n      tmpy = (value1 - cy1 * 2 + cy2) * 0.03;\n    let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006,\n      dddy = ((cy1 - cy2) * 3 - value1 + value2) * 0.006;\n    let ddx = tmpx * 2 + dddx,\n      ddy = tmpy * 2 + dddy;\n    let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667,\n      dy = (cy1 - value1) * 0.3 + tmpy + dddy * 0.16666667;\n    let x = time1 + dx,\n      y = value1 + dy;\n    for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {\n      curves[i] = x;\n      curves[i + 1] = y;\n      dx += ddx;\n      dy += ddy;\n      ddx += dddx;\n      ddy += dddy;\n      x += dx;\n      y += dy;\n    }\n  }\n  /** Returns the Bezier interpolated value for the specified time.\n   * @param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\n   * @param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\n   * @param i The index of the Bezier segments. See {@link #getCurveType(int)}. */\n  getBezierValue(time, frameIndex, valueOffset, i) {\n    let curves = this.curves;\n    if (curves[i] > time) {\n      let x = this.frames[frameIndex],\n        y = this.frames[frameIndex + valueOffset];\n      return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n    }\n    let n = i + 18 /*BEZIER_SIZE*/;\n    for (i += 2; i < n; i += 2) {\n      if (curves[i] >= time) {\n        let x = curves[i - 2],\n          y = curves[i - 1];\n        return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n      }\n    }\n    frameIndex += this.getFrameEntries();\n    let x = curves[n - 2],\n      y = curves[n - 1];\n    return y + (time - x) / (this.frames[frameIndex] - x) * (this.frames[frameIndex + valueOffset] - y);\n  }\n}\nexport class CurveTimeline1 extends CurveTimeline {\n  constructor(frameCount, bezierCount, propertyId) {\n    super(frameCount, bezierCount, [propertyId]);\n  }\n  getFrameEntries() {\n    return 2 /*ENTRIES*/;\n  }\n  /** Sets the time and value for the specified frame.\n   * @param frame Between 0 and <code>frameCount</code>, inclusive.\n   * @param time The frame time in seconds. */\n  setFrame(frame, time, value) {\n    frame <<= 1;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*VALUE*/] = value;\n  }\n  /** Returns the interpolated value for the specified time. */\n  getCurveValue(time) {\n    let frames = this.frames;\n    let i = frames.length - 2;\n    for (let ii = 2; ii <= i; ii += 2) {\n      if (frames[ii] > time) {\n        i = ii - 2;\n        break;\n      }\n    }\n    let curveType = this.curves[i >> 1];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i],\n          value = frames[i + 1 /*VALUE*/];\n        return value + (time - before) / (frames[i + 2 /*ENTRIES*/] - before) * (frames[i + 2 /*ENTRIES*/ + 1 /*VALUE*/] - value);\n      case 1 /*STEPPED*/:\n        return frames[i + 1 /*VALUE*/];\n    }\n    return this.getBezierValue(time, i, 1 /*VALUE*/, curveType - 2 /*BEZIER*/);\n  }\n}\n/** The base class for a {@link CurveTimeline} which sets two properties. */\nexport class CurveTimeline2 extends CurveTimeline {\n  /** @param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\n   * @param propertyIds Unique identifiers for the properties the timeline modifies. */\n  constructor(frameCount, bezierCount, propertyId1, propertyId2) {\n    super(frameCount, bezierCount, [propertyId1, propertyId2]);\n  }\n  getFrameEntries() {\n    return 3 /*ENTRIES*/;\n  }\n  /** Sets the time and values for the specified frame.\n   * @param frame Between 0 and <code>frameCount</code>, inclusive.\n   * @param time The frame time in seconds. */\n  setFrame(frame, time, value1, value2) {\n    frame *= 3 /*ENTRIES*/;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*VALUE1*/] = value1;\n    this.frames[frame + 2 /*VALUE2*/] = value2;\n  }\n}\n/** Changes a bone's local {@link Bone#rotation}. */\nexport class RotateTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.rotate + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation;\n          return;\n        case MixBlend.first:\n          bone.rotation += (bone.data.rotation - bone.rotation) * alpha;\n      }\n      return;\n    }\n    let r = this.getCurveValue(time);\n    switch (blend) {\n      case MixBlend.setup:\n        bone.rotation = bone.data.rotation + r * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        r += bone.data.rotation - bone.rotation;\n      case MixBlend.add:\n        bone.rotation += r * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#x} and {@link Bone#y}. */\nexport class TranslateTimeline extends CurveTimeline2 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.x + \"|\" + boneIndex, Property.y + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.x = bone.data.x;\n          bone.y = bone.data.y;\n          return;\n        case MixBlend.first:\n          bone.x += (bone.data.x - bone.x) * alpha;\n          bone.y += (bone.data.y - bone.y) * alpha;\n      }\n      return;\n    }\n    let x = 0,\n      y = 0;\n    let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n    let curveType = this.curves[i / 3 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        x = frames[i + 1 /*VALUE1*/];\n        y = frames[i + 2 /*VALUE2*/];\n        let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n        x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n        y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n        break;\n      case 1 /*STEPPED*/:\n        x = frames[i + 1 /*VALUE1*/];\n        y = frames[i + 2 /*VALUE2*/];\n        break;\n      default:\n        x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n        y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n    }\n    switch (blend) {\n      case MixBlend.setup:\n        bone.x = bone.data.x + x * alpha;\n        bone.y = bone.data.y + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.x += (bone.data.x + x - bone.x) * alpha;\n        bone.y += (bone.data.y + y - bone.y) * alpha;\n        break;\n      case MixBlend.add:\n        bone.x += x * alpha;\n        bone.y += y * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateXTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.x + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.x = bone.data.x;\n          return;\n        case MixBlend.first:\n          bone.x += (bone.data.x - bone.x) * alpha;\n      }\n      return;\n    }\n    let x = this.getCurveValue(time);\n    switch (blend) {\n      case MixBlend.setup:\n        bone.x = bone.data.x + x * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.x += (bone.data.x + x - bone.x) * alpha;\n        break;\n      case MixBlend.add:\n        bone.x += x * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#x}. */\nexport class TranslateYTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.y + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.y = bone.data.y;\n          return;\n        case MixBlend.first:\n          bone.y += (bone.data.y - bone.y) * alpha;\n      }\n      return;\n    }\n    let y = this.getCurveValue(time);\n    switch (blend) {\n      case MixBlend.setup:\n        bone.y = bone.data.y + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.y += (bone.data.y + y - bone.y) * alpha;\n        break;\n      case MixBlend.add:\n        bone.y += y * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleTimeline extends CurveTimeline2 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex, Property.scaleY + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.scaleX = bone.data.scaleX;\n          bone.scaleY = bone.data.scaleY;\n          return;\n        case MixBlend.first:\n          bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n          bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n      }\n      return;\n    }\n    let x, y;\n    let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n    let curveType = this.curves[i / 3 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        x = frames[i + 1 /*VALUE1*/];\n        y = frames[i + 2 /*VALUE2*/];\n        let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n        x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n        y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n        break;\n      case 1 /*STEPPED*/:\n        x = frames[i + 1 /*VALUE1*/];\n        y = frames[i + 2 /*VALUE2*/];\n        break;\n      default:\n        x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n        y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n    }\n    x *= bone.data.scaleX;\n    y *= bone.data.scaleY;\n    if (alpha == 1) {\n      if (blend == MixBlend.add) {\n        bone.scaleX += x - bone.data.scaleX;\n        bone.scaleY += y - bone.data.scaleY;\n      } else {\n        bone.scaleX = x;\n        bone.scaleY = y;\n      }\n    } else {\n      let bx = 0,\n        by = 0;\n      if (direction == MixDirection.mixOut) {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = bone.data.scaleX;\n            by = bone.data.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = bone.scaleX;\n            by = bone.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.add:\n            bone.scaleX += (x - bone.data.scaleX) * alpha;\n            bone.scaleY += (y - bone.data.scaleY) * alpha;\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n            by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n            bone.scaleX = bx + (x - bx) * alpha;\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n            by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n            bone.scaleX = bx + (x - bx) * alpha;\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.add:\n            bone.scaleX += (x - bone.data.scaleX) * alpha;\n            bone.scaleY += (y - bone.data.scaleY) * alpha;\n        }\n      }\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleXTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.scaleX + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.scaleX = bone.data.scaleX;\n          return;\n        case MixBlend.first:\n          bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n      }\n      return;\n    }\n    let x = this.getCurveValue(time) * bone.data.scaleX;\n    if (alpha == 1) {\n      if (blend == MixBlend.add) bone.scaleX += x - bone.data.scaleX;else bone.scaleX = x;\n    } else {\n      // Mixing out uses sign of setup or current pose, else use sign of key.\n      let bx = 0;\n      if (direction == MixDirection.mixOut) {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = bone.data.scaleX;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = bone.scaleX;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            break;\n          case MixBlend.add:\n            bone.scaleX += (x - bone.data.scaleX) * alpha;\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n            bone.scaleX = bx + (x - bx) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n            bone.scaleX = bx + (x - bx) * alpha;\n            break;\n          case MixBlend.add:\n            bone.scaleX += (x - bone.data.scaleX) * alpha;\n        }\n      }\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#scaleX)} and {@link Bone#scaleY}. */\nexport class ScaleYTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.scaleY + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.scaleY = bone.data.scaleY;\n          return;\n        case MixBlend.first:\n          bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n      }\n      return;\n    }\n    let y = this.getCurveValue(time) * bone.data.scaleY;\n    if (alpha == 1) {\n      if (blend == MixBlend.add) bone.scaleY += y - bone.data.scaleY;else bone.scaleY = y;\n    } else {\n      // Mixing out uses sign of setup or current pose, else use sign of key.\n      let by = 0;\n      if (direction == MixDirection.mixOut) {\n        switch (blend) {\n          case MixBlend.setup:\n            by = bone.data.scaleY;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            by = bone.scaleY;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.add:\n            bone.scaleY += (y - bone.data.scaleY) * alpha;\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup:\n            by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.add:\n            bone.scaleY += (y - bone.data.scaleY) * alpha;\n        }\n      }\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearTimeline extends CurveTimeline2 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex, Property.shearY + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.shearX = bone.data.shearX;\n          bone.shearY = bone.data.shearY;\n          return;\n        case MixBlend.first:\n          bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n          bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n      }\n      return;\n    }\n    let x = 0,\n      y = 0;\n    let i = Timeline.search(frames, time, 3 /*ENTRIES*/);\n    let curveType = this.curves[i / 3 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        x = frames[i + 1 /*VALUE1*/];\n        y = frames[i + 2 /*VALUE2*/];\n        let t = (time - before) / (frames[i + 3 /*ENTRIES*/] - before);\n        x += (frames[i + 3 /*ENTRIES*/ + 1 /*VALUE1*/] - x) * t;\n        y += (frames[i + 3 /*ENTRIES*/ + 2 /*VALUE2*/] - y) * t;\n        break;\n      case 1 /*STEPPED*/:\n        x = frames[i + 1 /*VALUE1*/];\n        y = frames[i + 2 /*VALUE2*/];\n        break;\n      default:\n        x = this.getBezierValue(time, i, 1 /*VALUE1*/, curveType - 2 /*BEZIER*/);\n        y = this.getBezierValue(time, i, 2 /*VALUE2*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n    }\n    switch (blend) {\n      case MixBlend.setup:\n        bone.shearX = bone.data.shearX + x * alpha;\n        bone.shearY = bone.data.shearY + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n        bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n        break;\n      case MixBlend.add:\n        bone.shearX += x * alpha;\n        bone.shearY += y * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearXTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.shearX + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.shearX = bone.data.shearX;\n          return;\n        case MixBlend.first:\n          bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n      }\n      return;\n    }\n    let x = this.getCurveValue(time);\n    switch (blend) {\n      case MixBlend.setup:\n        bone.shearX = bone.data.shearX + x * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n        break;\n      case MixBlend.add:\n        bone.shearX += x * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class ShearYTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, boneIndex) {\n    super(frameCount, bezierCount, Property.shearY + \"|\" + boneIndex);\n    _defineProperty(this, \"boneIndex\", 0);\n    this.boneIndex = boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let bone = skeleton.bones[this.boneIndex];\n    if (!bone.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.shearY = bone.data.shearY;\n          return;\n        case MixBlend.first:\n          bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n      }\n      return;\n    }\n    let y = this.getCurveValue(time);\n    switch (blend) {\n      case MixBlend.setup:\n        bone.shearY = bone.data.shearY + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n        break;\n      case MixBlend.add:\n        bone.shearY += y * alpha;\n    }\n  }\n}\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBATimeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, slotIndex) {\n    super(frameCount, bezierCount, [Property.rgb + \"|\" + slotIndex, Property.alpha + \"|\" + slotIndex]);\n    _defineProperty(this, \"slotIndex\", 0);\n    this.slotIndex = slotIndex;\n  }\n  getFrameEntries() {\n    return 5 /*ENTRIES*/;\n  }\n  /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n  setFrame(frame, time, r, g, b, a) {\n    frame *= 5 /*ENTRIES*/;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*R*/] = r;\n    this.frames[frame + 2 /*G*/] = g;\n    this.frames[frame + 3 /*B*/] = b;\n    this.frames[frame + 4 /*A*/] = a;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let frames = this.frames;\n    let color = slot.color;\n    if (time < frames[0]) {\n      let setup = slot.data.color;\n      switch (blend) {\n        case MixBlend.setup:\n          color.setFromColor(setup);\n          return;\n        case MixBlend.first:\n          color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);\n      }\n      return;\n    }\n    let r = 0,\n      g = 0,\n      b = 0,\n      a = 0;\n    let i = Timeline.search(frames, time, 5 /*ENTRIES*/);\n    let curveType = this.curves[i / 5 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        a = frames[i + 4 /*A*/];\n        let t = (time - before) / (frames[i + 5 /*ENTRIES*/] - before);\n        r += (frames[i + 5 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n        g += (frames[i + 5 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n        b += (frames[i + 5 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n        a += (frames[i + 5 /*ENTRIES*/ + 4 /*A*/] - a) * t;\n        break;\n      case 1 /*STEPPED*/:\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        a = frames[i + 4 /*A*/];\n        break;\n      default:\n        r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n        g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n    }\n    if (alpha == 1) color.set(r, g, b, a);else {\n      if (blend == MixBlend.setup) color.setFromColor(slot.data.color);\n      color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n    }\n  }\n}\n/** Changes a slot's {@link Slot#color}. */\nexport class RGBTimeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, slotIndex) {\n    super(frameCount, bezierCount, [Property.rgb + \"|\" + slotIndex]);\n    _defineProperty(this, \"slotIndex\", 0);\n    this.slotIndex = slotIndex;\n  }\n  getFrameEntries() {\n    return 4 /*ENTRIES*/;\n  }\n  /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n  setFrame(frame, time, r, g, b) {\n    frame <<= 2;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*R*/] = r;\n    this.frames[frame + 2 /*G*/] = g;\n    this.frames[frame + 3 /*B*/] = b;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let frames = this.frames;\n    let color = slot.color;\n    if (time < frames[0]) {\n      let setup = slot.data.color;\n      switch (blend) {\n        case MixBlend.setup:\n          color.r = setup.r;\n          color.g = setup.g;\n          color.b = setup.b;\n          return;\n        case MixBlend.first:\n          color.r += (setup.r - color.r) * alpha;\n          color.g += (setup.g - color.g) * alpha;\n          color.b += (setup.b - color.b) * alpha;\n      }\n      return;\n    }\n    let r = 0,\n      g = 0,\n      b = 0;\n    let i = Timeline.search(frames, time, 4 /*ENTRIES*/);\n    let curveType = this.curves[i >> 2];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);\n        r += (frames[i + 4 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n        g += (frames[i + 4 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n        b += (frames[i + 4 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n        break;\n      case 1 /*STEPPED*/:\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        break;\n      default:\n        r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n        g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n    }\n    if (alpha == 1) {\n      color.r = r;\n      color.g = g;\n      color.b = b;\n    } else {\n      if (blend == MixBlend.setup) {\n        let setup = slot.data.color;\n        color.r = setup.r;\n        color.g = setup.g;\n        color.b = setup.b;\n      }\n      color.r += (r - color.r) * alpha;\n      color.g += (g - color.g) * alpha;\n      color.b += (b - color.b) * alpha;\n    }\n  }\n}\n/** Changes a bone's local {@link Bone#shearX} and {@link Bone#shearY}. */\nexport class AlphaTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, slotIndex) {\n    super(frameCount, bezierCount, Property.alpha + \"|\" + slotIndex);\n    _defineProperty(this, \"slotIndex\", 0);\n    this.slotIndex = slotIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let color = slot.color;\n    if (time < this.frames[0]) {\n      // Time is before first frame.\n      let setup = slot.data.color;\n      switch (blend) {\n        case MixBlend.setup:\n          color.a = setup.a;\n          return;\n        case MixBlend.first:\n          color.a += (setup.a - color.a) * alpha;\n      }\n      return;\n    }\n    let a = this.getCurveValue(time);\n    if (alpha == 1) color.a = a;else {\n      if (blend == MixBlend.setup) color.a = slot.data.color.a;\n      color.a += (a - color.a) * alpha;\n    }\n  }\n}\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGBA2Timeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, slotIndex) {\n    super(frameCount, bezierCount, [Property.rgb + \"|\" + slotIndex, Property.alpha + \"|\" + slotIndex, Property.rgb2 + \"|\" + slotIndex]);\n    _defineProperty(this, \"slotIndex\", 0);\n    this.slotIndex = slotIndex;\n  }\n  getFrameEntries() {\n    return 8 /*ENTRIES*/;\n  }\n  /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n  setFrame(frame, time, r, g, b, a, r2, g2, b2) {\n    frame <<= 3;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*R*/] = r;\n    this.frames[frame + 2 /*G*/] = g;\n    this.frames[frame + 3 /*B*/] = b;\n    this.frames[frame + 4 /*A*/] = a;\n    this.frames[frame + 5 /*R2*/] = r2;\n    this.frames[frame + 6 /*G2*/] = g2;\n    this.frames[frame + 7 /*B2*/] = b2;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let frames = this.frames;\n    let light = slot.color,\n      dark = slot.darkColor;\n    if (time < frames[0]) {\n      let setupLight = slot.data.color,\n        setupDark = slot.data.darkColor;\n      switch (blend) {\n        case MixBlend.setup:\n          light.setFromColor(setupLight);\n          dark.r = setupDark.r;\n          dark.g = setupDark.g;\n          dark.b = setupDark.b;\n          return;\n        case MixBlend.first:\n          light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);\n          dark.r += (setupDark.r - dark.r) * alpha;\n          dark.g += (setupDark.g - dark.g) * alpha;\n          dark.b += (setupDark.b - dark.b) * alpha;\n      }\n      return;\n    }\n    let r = 0,\n      g = 0,\n      b = 0,\n      a = 0,\n      r2 = 0,\n      g2 = 0,\n      b2 = 0;\n    let i = Timeline.search(frames, time, 8 /*ENTRIES*/);\n    let curveType = this.curves[i >> 3];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        a = frames[i + 4 /*A*/];\n        r2 = frames[i + 5 /*R2*/];\n        g2 = frames[i + 6 /*G2*/];\n        b2 = frames[i + 7 /*B2*/];\n        let t = (time - before) / (frames[i + 8 /*ENTRIES*/] - before);\n        r += (frames[i + 8 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n        g += (frames[i + 8 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n        b += (frames[i + 8 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n        a += (frames[i + 8 /*ENTRIES*/ + 4 /*A*/] - a) * t;\n        r2 += (frames[i + 8 /*ENTRIES*/ + 5 /*R2*/] - r2) * t;\n        g2 += (frames[i + 8 /*ENTRIES*/ + 6 /*G2*/] - g2) * t;\n        b2 += (frames[i + 8 /*ENTRIES*/ + 7 /*B2*/] - b2) * t;\n        break;\n      case 1 /*STEPPED*/:\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        a = frames[i + 4 /*A*/];\n        r2 = frames[i + 5 /*R2*/];\n        g2 = frames[i + 6 /*G2*/];\n        b2 = frames[i + 7 /*B2*/];\n        break;\n      default:\n        r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n        g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        a = this.getBezierValue(time, i, 4 /*A*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n        r2 = this.getBezierValue(time, i, 5 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n        g2 = this.getBezierValue(time, i, 6 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n        b2 = this.getBezierValue(time, i, 7 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 6 - 2 /*BEZIER*/);\n    }\n    if (alpha == 1) {\n      light.set(r, g, b, a);\n      dark.r = r2;\n      dark.g = g2;\n      dark.b = b2;\n    } else {\n      if (blend == MixBlend.setup) {\n        light.setFromColor(slot.data.color);\n        let setupDark = slot.data.darkColor;\n        dark.r = setupDark.r;\n        dark.g = setupDark.g;\n        dark.b = setupDark.b;\n      }\n      light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n      dark.r += (r2 - dark.r) * alpha;\n      dark.g += (g2 - dark.g) * alpha;\n      dark.b += (b2 - dark.b) * alpha;\n    }\n  }\n}\n/** Changes a slot's {@link Slot#color} and {@link Slot#darkColor} for two color tinting. */\nexport class RGB2Timeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, slotIndex) {\n    super(frameCount, bezierCount, [Property.rgb + \"|\" + slotIndex, Property.rgb2 + \"|\" + slotIndex]);\n    _defineProperty(this, \"slotIndex\", 0);\n    this.slotIndex = slotIndex;\n  }\n  getFrameEntries() {\n    return 7 /*ENTRIES*/;\n  }\n  /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n  setFrame(frame, time, r, g, b, r2, g2, b2) {\n    frame *= 7 /*ENTRIES*/;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*R*/] = r;\n    this.frames[frame + 2 /*G*/] = g;\n    this.frames[frame + 3 /*B*/] = b;\n    this.frames[frame + 4 /*R2*/] = r2;\n    this.frames[frame + 5 /*G2*/] = g2;\n    this.frames[frame + 6 /*B2*/] = b2;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let frames = this.frames;\n    let light = slot.color,\n      dark = slot.darkColor;\n    if (time < frames[0]) {\n      let setupLight = slot.data.color,\n        setupDark = slot.data.darkColor;\n      switch (blend) {\n        case MixBlend.setup:\n          light.r = setupLight.r;\n          light.g = setupLight.g;\n          light.b = setupLight.b;\n          dark.r = setupDark.r;\n          dark.g = setupDark.g;\n          dark.b = setupDark.b;\n          return;\n        case MixBlend.first:\n          light.r += (setupLight.r - light.r) * alpha;\n          light.g += (setupLight.g - light.g) * alpha;\n          light.b += (setupLight.b - light.b) * alpha;\n          dark.r += (setupDark.r - dark.r) * alpha;\n          dark.g += (setupDark.g - dark.g) * alpha;\n          dark.b += (setupDark.b - dark.b) * alpha;\n      }\n      return;\n    }\n    let r = 0,\n      g = 0,\n      b = 0,\n      a = 0,\n      r2 = 0,\n      g2 = 0,\n      b2 = 0;\n    let i = Timeline.search(frames, time, 7 /*ENTRIES*/);\n    let curveType = this.curves[i / 7 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        r2 = frames[i + 4 /*R2*/];\n        g2 = frames[i + 5 /*G2*/];\n        b2 = frames[i + 6 /*B2*/];\n        let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);\n        r += (frames[i + 7 /*ENTRIES*/ + 1 /*R*/] - r) * t;\n        g += (frames[i + 7 /*ENTRIES*/ + 2 /*G*/] - g) * t;\n        b += (frames[i + 7 /*ENTRIES*/ + 3 /*B*/] - b) * t;\n        r2 += (frames[i + 7 /*ENTRIES*/ + 4 /*R2*/] - r2) * t;\n        g2 += (frames[i + 7 /*ENTRIES*/ + 5 /*G2*/] - g2) * t;\n        b2 += (frames[i + 7 /*ENTRIES*/ + 6 /*B2*/] - b2) * t;\n        break;\n      case 1 /*STEPPED*/:\n        r = frames[i + 1 /*R*/];\n        g = frames[i + 2 /*G*/];\n        b = frames[i + 3 /*B*/];\n        r2 = frames[i + 4 /*R2*/];\n        g2 = frames[i + 5 /*G2*/];\n        b2 = frames[i + 6 /*B2*/];\n        break;\n      default:\n        r = this.getBezierValue(time, i, 1 /*R*/, curveType - 2 /*BEZIER*/);\n        g = this.getBezierValue(time, i, 2 /*G*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        b = this.getBezierValue(time, i, 3 /*B*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        r2 = this.getBezierValue(time, i, 4 /*R2*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n        g2 = this.getBezierValue(time, i, 5 /*G2*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n        b2 = this.getBezierValue(time, i, 6 /*B2*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n    }\n    if (alpha == 1) {\n      light.r = r;\n      light.g = g;\n      light.b = b;\n      dark.r = r2;\n      dark.g = g2;\n      dark.b = b2;\n    } else {\n      if (blend == MixBlend.setup) {\n        let setupLight = slot.data.color,\n          setupDark = slot.data.darkColor;\n        light.r = setupLight.r;\n        light.g = setupLight.g;\n        light.b = setupLight.b;\n        dark.r = setupDark.r;\n        dark.g = setupDark.g;\n        dark.b = setupDark.b;\n      }\n      light.r += (r - light.r) * alpha;\n      light.g += (g - light.g) * alpha;\n      light.b += (b - light.b) * alpha;\n      dark.r += (r2 - dark.r) * alpha;\n      dark.g += (g2 - dark.g) * alpha;\n      dark.b += (b2 - dark.b) * alpha;\n    }\n  }\n}\n/** Changes a slot's {@link Slot#attachment}. */\nexport class AttachmentTimeline extends Timeline {\n  constructor(frameCount, slotIndex) {\n    super(frameCount, [Property.attachment + \"|\" + slotIndex]);\n    _defineProperty(this, \"slotIndex\", 0);\n    /** The attachment name for each key frame. May contain null values to clear the attachment. */\n    _defineProperty(this, \"attachmentNames\", void 0);\n    this.slotIndex = slotIndex;\n    this.attachmentNames = new Array(frameCount);\n  }\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the attachment name for the specified key frame. */\n  setFrame(frame, time, attachmentName) {\n    this.frames[frame] = time;\n    this.attachmentNames[frame] = attachmentName;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    if (direction == MixDirection.mixOut) {\n      if (blend == MixBlend.setup) this.setAttachment(skeleton, slot, slot.data.attachmentName);\n      return;\n    }\n    if (time < this.frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName);\n      return;\n    }\n    this.setAttachment(skeleton, slot, this.attachmentNames[Timeline.search1(this.frames, time)]);\n  }\n  setAttachment(skeleton, slot, attachmentName) {\n    slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n  }\n}\n/** Changes a slot's {@link Slot#deform} to deform a {@link VertexAttachment}. */\nexport class DeformTimeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, slotIndex, attachment) {\n    super(frameCount, bezierCount, [Property.deform + \"|\" + slotIndex + \"|\" + attachment.id]);\n    _defineProperty(this, \"slotIndex\", 0);\n    /** The attachment that will be deformed. */\n    _defineProperty(this, \"attachment\", void 0);\n    /** The vertices for each key frame. */\n    _defineProperty(this, \"vertices\", void 0);\n    this.slotIndex = slotIndex;\n    this.attachment = attachment;\n    this.vertices = new Array(frameCount);\n  }\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the vertices for the specified key frame.\n   * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n  setFrame(frame, time, vertices) {\n    this.frames[frame] = time;\n    this.vertices[frame] = vertices;\n  }\n  /** @param value1 Ignored (0 is used for a deform timeline).\n   * @param value2 Ignored (1 is used for a deform timeline). */\n  setBezier(bezier, frame, value, time1, value1, cx1, cy1, cx2, cy2, time2, value2) {\n    let curves = this.curves;\n    let i = this.getFrameCount() + bezier * 18 /*BEZIER_SIZE*/;\n    if (value == 0) curves[frame] = 2 /*BEZIER*/ + i;\n    let tmpx = (time1 - cx1 * 2 + cx2) * 0.03,\n      tmpy = cy2 * 0.03 - cy1 * 0.06;\n    let dddx = ((cx1 - cx2) * 3 - time1 + time2) * 0.006,\n      dddy = (cy1 - cy2 + 0.33333333) * 0.018;\n    let ddx = tmpx * 2 + dddx,\n      ddy = tmpy * 2 + dddy;\n    let dx = (cx1 - time1) * 0.3 + tmpx + dddx * 0.16666667,\n      dy = cy1 * 0.3 + tmpy + dddy * 0.16666667;\n    let x = time1 + dx,\n      y = dy;\n    for (let n = i + 18 /*BEZIER_SIZE*/; i < n; i += 2) {\n      curves[i] = x;\n      curves[i + 1] = y;\n      dx += ddx;\n      dy += ddy;\n      ddx += dddx;\n      ddy += dddy;\n      x += dx;\n      y += dy;\n    }\n  }\n  getCurvePercent(time, frame) {\n    let curves = this.curves;\n    let i = curves[frame];\n    switch (i) {\n      case 0 /*LINEAR*/:\n        let x = this.frames[frame];\n        return (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n      case 1 /*STEPPED*/:\n        return 0;\n    }\n    i -= 2 /*BEZIER*/;\n    if (curves[i] > time) {\n      let x = this.frames[frame];\n      return curves[i + 1] * (time - x) / (curves[i] - x);\n    }\n    let n = i + 18 /*BEZIER_SIZE*/;\n    for (i += 2; i < n; i += 2) {\n      if (curves[i] >= time) {\n        let x = curves[i - 2],\n          y = curves[i - 1];\n        return y + (time - x) / (curves[i] - x) * (curves[i + 1] - y);\n      }\n    }\n    let x = curves[n - 2],\n      y = curves[n - 1];\n    return y + (1 - y) * (time - x) / (this.frames[frame + this.getFrameEntries()] - x);\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let slotAttachment = slot.getAttachment();\n    if (!slotAttachment) return;\n    if (!(slotAttachment instanceof VertexAttachment) || slotAttachment.timelineAttachment != this.attachment) return;\n    let deform = slot.deform;\n    if (deform.length == 0) blend = MixBlend.setup;\n    let vertices = this.vertices;\n    let vertexCount = vertices[0].length;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          deform.length = 0;\n          return;\n        case MixBlend.first:\n          if (alpha == 1) {\n            deform.length = 0;\n            return;\n          }\n          deform.length = vertexCount;\n          let vertexAttachment = slotAttachment;\n          if (!vertexAttachment.bones) {\n            // Unweighted vertex positions.\n            let setupVertices = vertexAttachment.vertices;\n            for (var i = 0; i < vertexCount; i++) deform[i] += (setupVertices[i] - deform[i]) * alpha;\n          } else {\n            // Weighted deform offsets.\n            alpha = 1 - alpha;\n            for (var i = 0; i < vertexCount; i++) deform[i] *= alpha;\n          }\n      }\n      return;\n    }\n    deform.length = vertexCount;\n    if (time >= frames[frames.length - 1]) {\n      // Time is after last frame.\n      let lastVertices = vertices[frames.length - 1];\n      if (alpha == 1) {\n        if (blend == MixBlend.add) {\n          let vertexAttachment = slotAttachment;\n          if (!vertexAttachment.bones) {\n            // Unweighted vertex positions, with alpha.\n            let setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++) deform[i] += lastVertices[i] - setupVertices[i];\n          } else {\n            // Weighted deform offsets, with alpha.\n            for (let i = 0; i < vertexCount; i++) deform[i] += lastVertices[i];\n          }\n        } else Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n      } else {\n        switch (blend) {\n          case MixBlend.setup:\n            {\n              let vertexAttachment = slotAttachment;\n              if (!vertexAttachment.bones) {\n                // Unweighted vertex positions, with alpha.\n                let setupVertices = vertexAttachment.vertices;\n                for (let i = 0; i < vertexCount; i++) {\n                  let setup = setupVertices[i];\n                  deform[i] = setup + (lastVertices[i] - setup) * alpha;\n                }\n              } else {\n                // Weighted deform offsets, with alpha.\n                for (let i = 0; i < vertexCount; i++) deform[i] = lastVertices[i] * alpha;\n              }\n              break;\n            }\n          case MixBlend.first:\n          case MixBlend.replace:\n            for (let i = 0; i < vertexCount; i++) deform[i] += (lastVertices[i] - deform[i]) * alpha;\n            break;\n          case MixBlend.add:\n            let vertexAttachment = slotAttachment;\n            if (!vertexAttachment.bones) {\n              // Unweighted vertex positions, with alpha.\n              let setupVertices = vertexAttachment.vertices;\n              for (let i = 0; i < vertexCount; i++) deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n            } else {\n              // Weighted deform offsets, with alpha.\n              for (let i = 0; i < vertexCount; i++) deform[i] += lastVertices[i] * alpha;\n            }\n        }\n      }\n      return;\n    }\n    // Interpolate between the previous frame and the current frame.\n    let frame = Timeline.search1(frames, time);\n    let percent = this.getCurvePercent(time, frame);\n    let prevVertices = vertices[frame];\n    let nextVertices = vertices[frame + 1];\n    if (alpha == 1) {\n      if (blend == MixBlend.add) {\n        let vertexAttachment = slotAttachment;\n        if (!vertexAttachment.bones) {\n          // Unweighted vertex positions, with alpha.\n          let setupVertices = vertexAttachment.vertices;\n          for (let i = 0; i < vertexCount; i++) {\n            let prev = prevVertices[i];\n            deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n          }\n        } else {\n          // Weighted deform offsets, with alpha.\n          for (let i = 0; i < vertexCount; i++) {\n            let prev = prevVertices[i];\n            deform[i] += prev + (nextVertices[i] - prev) * percent;\n          }\n        }\n      } else {\n        for (let i = 0; i < vertexCount; i++) {\n          let prev = prevVertices[i];\n          deform[i] = prev + (nextVertices[i] - prev) * percent;\n        }\n      }\n    } else {\n      switch (blend) {\n        case MixBlend.setup:\n          {\n            let vertexAttachment = slotAttachment;\n            if (!vertexAttachment.bones) {\n              // Unweighted vertex positions, with alpha.\n              let setupVertices = vertexAttachment.vertices;\n              for (let i = 0; i < vertexCount; i++) {\n                let prev = prevVertices[i],\n                  setup = setupVertices[i];\n                deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n              }\n            } else {\n              // Weighted deform offsets, with alpha.\n              for (let i = 0; i < vertexCount; i++) {\n                let prev = prevVertices[i];\n                deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n              }\n            }\n            break;\n          }\n        case MixBlend.first:\n        case MixBlend.replace:\n          for (let i = 0; i < vertexCount; i++) {\n            let prev = prevVertices[i];\n            deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n          }\n          break;\n        case MixBlend.add:\n          let vertexAttachment = slotAttachment;\n          if (!vertexAttachment.bones) {\n            // Unweighted vertex positions, with alpha.\n            let setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              let prev = prevVertices[i];\n              deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n            }\n          } else {\n            // Weighted deform offsets, with alpha.\n            for (let i = 0; i < vertexCount; i++) {\n              let prev = prevVertices[i];\n              deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n            }\n          }\n      }\n    }\n  }\n}\n/** Fires an {@link Event} when specific animation times are reached. */\nexport class EventTimeline extends Timeline {\n  constructor(frameCount) {\n    super(frameCount, EventTimeline.propertyIds);\n    /** The event for each key frame. */\n    _defineProperty(this, \"events\", void 0);\n    this.events = new Array(frameCount);\n  }\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the event for the specified key frame. */\n  setFrame(frame, event) {\n    this.frames[frame] = event.time;\n    this.events[frame] = event;\n  }\n  /** Fires events for frames > `lastTime` and <= `time`. */\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    if (!firedEvents) return;\n    let frames = this.frames;\n    let frameCount = this.frames.length;\n    if (lastTime > time) {\n      // Fire events after last time for looped animations.\n      this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n      lastTime = -1;\n    } else if (lastTime >= frames[frameCount - 1])\n      // Last time is after last frame.\n      return;\n    if (time < frames[0]) return; // Time is before first frame.\n    let i = 0;\n    if (lastTime < frames[0]) i = 0;else {\n      i = Timeline.search1(frames, lastTime) + 1;\n      let frameTime = frames[i];\n      while (i > 0) {\n        // Fire multiple events with the same frame.\n        if (frames[i - 1] != frameTime) break;\n        i--;\n      }\n    }\n    for (; i < frameCount && time >= frames[i]; i++) firedEvents.push(this.events[i]);\n  }\n}\n/** Changes a skeleton's {@link Skeleton#drawOrder}. */\n_defineProperty(EventTimeline, \"propertyIds\", [\"\" + Property.event]);\nexport class DrawOrderTimeline extends Timeline {\n  constructor(frameCount) {\n    super(frameCount, DrawOrderTimeline.propertyIds);\n    /** The draw order for each key frame. See {@link #setFrame(int, float, int[])}. */\n    _defineProperty(this, \"drawOrders\", void 0);\n    this.drawOrders = new Array(frameCount);\n  }\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the draw order for the specified key frame.\n   * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n   *           draw order. */\n  setFrame(frame, time, drawOrder) {\n    this.frames[frame] = time;\n    this.drawOrders[frame] = drawOrder;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    if (direction == MixDirection.mixOut) {\n      if (blend == MixBlend.setup) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n      return;\n    }\n    if (time < this.frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n      return;\n    }\n    let idx = Timeline.search1(this.frames, time);\n    let drawOrderToSetupIndex = this.drawOrders[idx];\n    if (!drawOrderToSetupIndex) Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);else {\n      let drawOrder = skeleton.drawOrder;\n      let slots = skeleton.slots;\n      for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++) drawOrder[i] = slots[drawOrderToSetupIndex[i]];\n    }\n  }\n}\n/** Changes an IK constraint's {@link IkConstraint#mix}, {@link IkConstraint#softness},\n * {@link IkConstraint#bendDirection}, {@link IkConstraint#stretch}, and {@link IkConstraint#compress}. */\n_defineProperty(DrawOrderTimeline, \"propertyIds\", [\"\" + Property.drawOrder]);\nexport class IkConstraintTimeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, ikConstraintIndex) {\n    super(frameCount, bezierCount, [Property.ikConstraint + \"|\" + ikConstraintIndex]);\n    /** The index of the IK constraint slot in {@link Skeleton#ikConstraints} that will be changed. */\n    _defineProperty(this, \"ikConstraintIndex\", 0);\n    this.ikConstraintIndex = ikConstraintIndex;\n  }\n  getFrameEntries() {\n    return 6 /*ENTRIES*/;\n  }\n  /** Sets the time in seconds, mix, softness, bend direction, compress, and stretch for the specified key frame. */\n  setFrame(frame, time, mix, softness, bendDirection, compress, stretch) {\n    frame *= 6 /*ENTRIES*/;\n    this.frames[frame] = time;\n    this.frames[frame + 1 /*MIX*/] = mix;\n    this.frames[frame + 2 /*SOFTNESS*/] = softness;\n    this.frames[frame + 3 /*BEND_DIRECTION*/] = bendDirection;\n    this.frames[frame + 4 /*COMPRESS*/] = compress ? 1 : 0;\n    this.frames[frame + 5 /*STRETCH*/] = stretch ? 1 : 0;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    let constraint = skeleton.ikConstraints[this.ikConstraintIndex];\n    if (!constraint.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.mix = constraint.data.mix;\n          constraint.softness = constraint.data.softness;\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n          return;\n        case MixBlend.first:\n          constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n          constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n      }\n      return;\n    }\n    let mix = 0,\n      softness = 0;\n    let i = Timeline.search(frames, time, 6 /*ENTRIES*/);\n    let curveType = this.curves[i / 6 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        mix = frames[i + 1 /*MIX*/];\n        softness = frames[i + 2 /*SOFTNESS*/];\n        let t = (time - before) / (frames[i + 6 /*ENTRIES*/] - before);\n        mix += (frames[i + 6 /*ENTRIES*/ + 1 /*MIX*/] - mix) * t;\n        softness += (frames[i + 6 /*ENTRIES*/ + 2 /*SOFTNESS*/] - softness) * t;\n        break;\n      case 1 /*STEPPED*/:\n        mix = frames[i + 1 /*MIX*/];\n        softness = frames[i + 2 /*SOFTNESS*/];\n        break;\n      default:\n        mix = this.getBezierValue(time, i, 1 /*MIX*/, curveType - 2 /*BEZIER*/);\n        softness = this.getBezierValue(time, i, 2 /*SOFTNESS*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n    }\n    if (blend == MixBlend.setup) {\n      constraint.mix = constraint.data.mix + (mix - constraint.data.mix) * alpha;\n      constraint.softness = constraint.data.softness + (softness - constraint.data.softness) * alpha;\n      if (direction == MixDirection.mixOut) {\n        constraint.bendDirection = constraint.data.bendDirection;\n        constraint.compress = constraint.data.compress;\n        constraint.stretch = constraint.data.stretch;\n      } else {\n        constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];\n        constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;\n        constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;\n      }\n    } else {\n      constraint.mix += (mix - constraint.mix) * alpha;\n      constraint.softness += (softness - constraint.softness) * alpha;\n      if (direction == MixDirection.mixIn) {\n        constraint.bendDirection = frames[i + 3 /*BEND_DIRECTION*/];\n        constraint.compress = frames[i + 4 /*COMPRESS*/] != 0;\n        constraint.stretch = frames[i + 5 /*STRETCH*/] != 0;\n      }\n    }\n  }\n}\n/** Changes a transform constraint's {@link TransformConstraint#rotateMix}, {@link TransformConstraint#translateMix},\n * {@link TransformConstraint#scaleMix}, and {@link TransformConstraint#shearMix}. */\nexport class TransformConstraintTimeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, transformConstraintIndex) {\n    super(frameCount, bezierCount, [Property.transformConstraint + \"|\" + transformConstraintIndex]);\n    /** The index of the transform constraint slot in {@link Skeleton#transformConstraints} that will be changed. */\n    _defineProperty(this, \"transformConstraintIndex\", 0);\n    this.transformConstraintIndex = transformConstraintIndex;\n  }\n  getFrameEntries() {\n    return 7 /*ENTRIES*/;\n  }\n  /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n  setFrame(frame, time, mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY) {\n    let frames = this.frames;\n    frame *= 7 /*ENTRIES*/;\n    frames[frame] = time;\n    frames[frame + 1 /*ROTATE*/] = mixRotate;\n    frames[frame + 2 /*X*/] = mixX;\n    frames[frame + 3 /*Y*/] = mixY;\n    frames[frame + 4 /*SCALEX*/] = mixScaleX;\n    frames[frame + 5 /*SCALEY*/] = mixScaleY;\n    frames[frame + 6 /*SHEARY*/] = mixShearY;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    let constraint = skeleton.transformConstraints[this.transformConstraintIndex];\n    if (!constraint.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      let data = constraint.data;\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.mixRotate = data.mixRotate;\n          constraint.mixX = data.mixX;\n          constraint.mixY = data.mixY;\n          constraint.mixScaleX = data.mixScaleX;\n          constraint.mixScaleY = data.mixScaleY;\n          constraint.mixShearY = data.mixShearY;\n          return;\n        case MixBlend.first:\n          constraint.mixRotate += (data.mixRotate - constraint.mixRotate) * alpha;\n          constraint.mixX += (data.mixX - constraint.mixX) * alpha;\n          constraint.mixY += (data.mixY - constraint.mixY) * alpha;\n          constraint.mixScaleX += (data.mixScaleX - constraint.mixScaleX) * alpha;\n          constraint.mixScaleY += (data.mixScaleY - constraint.mixScaleY) * alpha;\n          constraint.mixShearY += (data.mixShearY - constraint.mixShearY) * alpha;\n      }\n      return;\n    }\n    let rotate, x, y, scaleX, scaleY, shearY;\n    let i = Timeline.search(frames, time, 7 /*ENTRIES*/);\n    let curveType = this.curves[i / 7 /*ENTRIES*/];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        rotate = frames[i + 1 /*ROTATE*/];\n        x = frames[i + 2 /*X*/];\n        y = frames[i + 3 /*Y*/];\n        scaleX = frames[i + 4 /*SCALEX*/];\n        scaleY = frames[i + 5 /*SCALEY*/];\n        shearY = frames[i + 6 /*SHEARY*/];\n        let t = (time - before) / (frames[i + 7 /*ENTRIES*/] - before);\n        rotate += (frames[i + 7 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;\n        x += (frames[i + 7 /*ENTRIES*/ + 2 /*X*/] - x) * t;\n        y += (frames[i + 7 /*ENTRIES*/ + 3 /*Y*/] - y) * t;\n        scaleX += (frames[i + 7 /*ENTRIES*/ + 4 /*SCALEX*/] - scaleX) * t;\n        scaleY += (frames[i + 7 /*ENTRIES*/ + 5 /*SCALEY*/] - scaleY) * t;\n        shearY += (frames[i + 7 /*ENTRIES*/ + 6 /*SHEARY*/] - shearY) * t;\n        break;\n      case 1 /*STEPPED*/:\n        rotate = frames[i + 1 /*ROTATE*/];\n        x = frames[i + 2 /*X*/];\n        y = frames[i + 3 /*Y*/];\n        scaleX = frames[i + 4 /*SCALEX*/];\n        scaleY = frames[i + 5 /*SCALEY*/];\n        shearY = frames[i + 6 /*SHEARY*/];\n        break;\n      default:\n        rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);\n        x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n        scaleX = this.getBezierValue(time, i, 4 /*SCALEX*/, curveType + 18 /*BEZIER_SIZE*/ * 3 - 2 /*BEZIER*/);\n        scaleY = this.getBezierValue(time, i, 5 /*SCALEY*/, curveType + 18 /*BEZIER_SIZE*/ * 4 - 2 /*BEZIER*/);\n        shearY = this.getBezierValue(time, i, 6 /*SHEARY*/, curveType + 18 /*BEZIER_SIZE*/ * 5 - 2 /*BEZIER*/);\n    }\n    if (blend == MixBlend.setup) {\n      let data = constraint.data;\n      constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n      constraint.mixX = data.mixX + (x - data.mixX) * alpha;\n      constraint.mixY = data.mixY + (y - data.mixY) * alpha;\n      constraint.mixScaleX = data.mixScaleX + (scaleX - data.mixScaleX) * alpha;\n      constraint.mixScaleY = data.mixScaleY + (scaleY - data.mixScaleY) * alpha;\n      constraint.mixShearY = data.mixShearY + (shearY - data.mixShearY) * alpha;\n    } else {\n      constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n      constraint.mixX += (x - constraint.mixX) * alpha;\n      constraint.mixY += (y - constraint.mixY) * alpha;\n      constraint.mixScaleX += (scaleX - constraint.mixScaleX) * alpha;\n      constraint.mixScaleY += (scaleY - constraint.mixScaleY) * alpha;\n      constraint.mixShearY += (shearY - constraint.mixShearY) * alpha;\n    }\n  }\n}\n/** Changes a path constraint's {@link PathConstraint#position}. */\nexport class PathConstraintPositionTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, pathConstraintIndex) {\n    super(frameCount, bezierCount, Property.pathConstraintPosition + \"|\" + pathConstraintIndex);\n    /** The index of the path constraint slot in {@link Skeleton#pathConstraints} that will be changed. */\n    _defineProperty(this, \"pathConstraintIndex\", 0);\n    this.pathConstraintIndex = pathConstraintIndex;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    let constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.position = constraint.data.position;\n          return;\n        case MixBlend.first:\n          constraint.position += (constraint.data.position - constraint.position) * alpha;\n      }\n      return;\n    }\n    let position = this.getCurveValue(time);\n    if (blend == MixBlend.setup) constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;else constraint.position += (position - constraint.position) * alpha;\n  }\n}\n/** Changes a path constraint's {@link PathConstraint#spacing}. */\nexport class PathConstraintSpacingTimeline extends CurveTimeline1 {\n  constructor(frameCount, bezierCount, pathConstraintIndex) {\n    super(frameCount, bezierCount, Property.pathConstraintSpacing + \"|\" + pathConstraintIndex);\n    /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n    _defineProperty(this, \"pathConstraintIndex\", 0);\n    this.pathConstraintIndex = pathConstraintIndex;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    let constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.spacing = constraint.data.spacing;\n          return;\n        case MixBlend.first:\n          constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\n      }\n      return;\n    }\n    let spacing = this.getCurveValue(time);\n    if (blend == MixBlend.setup) constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;else constraint.spacing += (spacing - constraint.spacing) * alpha;\n  }\n}\n/** Changes a transform constraint's {@link PathConstraint#getMixRotate()}, {@link PathConstraint#getMixX()}, and\n * {@link PathConstraint#getMixY()}. */\nexport class PathConstraintMixTimeline extends CurveTimeline {\n  constructor(frameCount, bezierCount, pathConstraintIndex) {\n    super(frameCount, bezierCount, [Property.pathConstraintMix + \"|\" + pathConstraintIndex]);\n    /** The index of the path constraint slot in {@link Skeleton#getPathConstraints()} that will be changed. */\n    _defineProperty(this, \"pathConstraintIndex\", 0);\n    this.pathConstraintIndex = pathConstraintIndex;\n  }\n  getFrameEntries() {\n    return 4 /*ENTRIES*/;\n  }\n  setFrame(frame, time, mixRotate, mixX, mixY) {\n    let frames = this.frames;\n    frame <<= 2;\n    frames[frame] = time;\n    frames[frame + 1 /*ROTATE*/] = mixRotate;\n    frames[frame + 2 /*X*/] = mixX;\n    frames[frame + 3 /*Y*/] = mixY;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    let constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active) return;\n    let frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.mixRotate = constraint.data.mixRotate;\n          constraint.mixX = constraint.data.mixX;\n          constraint.mixY = constraint.data.mixY;\n          return;\n        case MixBlend.first:\n          constraint.mixRotate += (constraint.data.mixRotate - constraint.mixRotate) * alpha;\n          constraint.mixX += (constraint.data.mixX - constraint.mixX) * alpha;\n          constraint.mixY += (constraint.data.mixY - constraint.mixY) * alpha;\n      }\n      return;\n    }\n    let rotate, x, y;\n    let i = Timeline.search(frames, time, 4 /*ENTRIES*/);\n    let curveType = this.curves[i >> 2];\n    switch (curveType) {\n      case 0 /*LINEAR*/:\n        let before = frames[i];\n        rotate = frames[i + 1 /*ROTATE*/];\n        x = frames[i + 2 /*X*/];\n        y = frames[i + 3 /*Y*/];\n        let t = (time - before) / (frames[i + 4 /*ENTRIES*/] - before);\n        rotate += (frames[i + 4 /*ENTRIES*/ + 1 /*ROTATE*/] - rotate) * t;\n        x += (frames[i + 4 /*ENTRIES*/ + 2 /*X*/] - x) * t;\n        y += (frames[i + 4 /*ENTRIES*/ + 3 /*Y*/] - y) * t;\n        break;\n      case 1 /*STEPPED*/:\n        rotate = frames[i + 1 /*ROTATE*/];\n        x = frames[i + 2 /*X*/];\n        y = frames[i + 3 /*Y*/];\n        break;\n      default:\n        rotate = this.getBezierValue(time, i, 1 /*ROTATE*/, curveType - 2 /*BEZIER*/);\n        x = this.getBezierValue(time, i, 2 /*X*/, curveType + 18 /*BEZIER_SIZE*/ - 2 /*BEZIER*/);\n        y = this.getBezierValue(time, i, 3 /*Y*/, curveType + 18 /*BEZIER_SIZE*/ * 2 - 2 /*BEZIER*/);\n    }\n    if (blend == MixBlend.setup) {\n      let data = constraint.data;\n      constraint.mixRotate = data.mixRotate + (rotate - data.mixRotate) * alpha;\n      constraint.mixX = data.mixX + (x - data.mixX) * alpha;\n      constraint.mixY = data.mixY + (y - data.mixY) * alpha;\n    } else {\n      constraint.mixRotate += (rotate - constraint.mixRotate) * alpha;\n      constraint.mixX += (x - constraint.mixX) * alpha;\n      constraint.mixY += (y - constraint.mixY) * alpha;\n    }\n  }\n}\n/** Changes a slot's {@link Slot#getSequenceIndex()} for an attachment's {@link Sequence}. */\nexport class SequenceTimeline extends Timeline {\n  constructor(frameCount, slotIndex, attachment) {\n    super(frameCount, [Property.sequence + \"|\" + slotIndex + \"|\" + attachment.sequence.id]);\n    _defineProperty(this, \"slotIndex\", void 0);\n    _defineProperty(this, \"attachment\", void 0);\n    this.slotIndex = slotIndex;\n    this.attachment = attachment;\n  }\n  getFrameEntries() {\n    return SequenceTimeline.ENTRIES;\n  }\n  getSlotIndex() {\n    return this.slotIndex;\n  }\n  getAttachment() {\n    return this.attachment;\n  }\n  /** Sets the time, mode, index, and frame time for the specified frame.\n   * @param frame Between 0 and <code>frameCount</code>, inclusive.\n   * @param time Seconds between frames. */\n  setFrame(frame, time, mode, index, delay) {\n    let frames = this.frames;\n    frame *= SequenceTimeline.ENTRIES;\n    frames[frame] = time;\n    frames[frame + SequenceTimeline.MODE] = mode | index << 4;\n    frames[frame + SequenceTimeline.DELAY] = delay;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    let slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active) return;\n    let slotAttachment = slot.attachment;\n    let attachment = this.attachment;\n    if (slotAttachment != attachment) {\n      if (!(slotAttachment instanceof VertexAttachment) || slotAttachment.timelineAttachment != attachment) return;\n    }\n    let frames = this.frames;\n    if (time < frames[0]) {\n      // Time is before first frame.\n      if (blend == MixBlend.setup || blend == MixBlend.first) slot.sequenceIndex = -1;\n      return;\n    }\n    let i = Timeline.search(frames, time, SequenceTimeline.ENTRIES);\n    let before = frames[i];\n    let modeAndIndex = frames[i + SequenceTimeline.MODE];\n    let delay = frames[i + SequenceTimeline.DELAY];\n    if (!this.attachment.sequence) return;\n    let index = modeAndIndex >> 4,\n      count = this.attachment.sequence.regions.length;\n    let mode = SequenceModeValues[modeAndIndex & 0xf];\n    if (mode != SequenceMode.hold) {\n      index += (time - before) / delay + 0.00001 | 0;\n      switch (mode) {\n        case SequenceMode.once:\n          index = Math.min(count - 1, index);\n          break;\n        case SequenceMode.loop:\n          index %= count;\n          break;\n        case SequenceMode.pingpong:\n          {\n            let n = (count << 1) - 2;\n            index = n == 0 ? 0 : index % n;\n            if (index >= count) index = n - index;\n            break;\n          }\n        case SequenceMode.onceReverse:\n          index = Math.max(count - 1 - index, 0);\n          break;\n        case SequenceMode.loopReverse:\n          index = count - 1 - index % count;\n          break;\n        case SequenceMode.pingpongReverse:\n          {\n            let n = (count << 1) - 2;\n            index = n == 0 ? 0 : (index + count - 1) % n;\n            if (index >= count) index = n - index;\n          }\n      }\n    }\n    slot.sequenceIndex = index;\n  }\n}\n_defineProperty(SequenceTimeline, \"ENTRIES\", 3);\n_defineProperty(SequenceTimeline, \"MODE\", 1);\n_defineProperty(SequenceTimeline, \"DELAY\", 2);","map":{"version":3,"names":["VertexAttachment","StringSet","Utils","MathUtils","SequenceMode","SequenceModeValues","Animation","constructor","name","timelines","duration","_defineProperty","Error","setTimelines","timelineIds","clear","i","length","addAll","getPropertyIds","hasTimeline","ids","contains","apply","skeleton","lastTime","time","loop","events","alpha","blend","direction","n","MixBlend","MixDirection","Property","rotate","x","y","scaleX","scaleY","shearX","shearY","rgb","rgb2","attachment","deform","event","drawOrder","ikConstraint","transformConstraint","pathConstraintPosition","pathConstraintSpacing","pathConstraintMix","sequence","Timeline","frameCount","propertyIds","frames","newFloatArray","getFrameEntries","getFrameCount","getDuration","search1","search","step","CurveTimeline","bezierCount","curves","setLinear","frame","setStepped","shrink","size","newCurves","arrayCopy","setBezier","bezier","value","time1","value1","cx1","cy1","cx2","cy2","time2","value2","tmpx","tmpy","dddx","dddy","ddx","ddy","dx","dy","getBezierValue","frameIndex","valueOffset","CurveTimeline1","propertyId","setFrame","getCurveValue","ii","curveType","before","CurveTimeline2","propertyId1","propertyId2","RotateTimeline","boneIndex","bone","bones","active","setup","rotation","data","first","r","replace","add","TranslateTimeline","t","TranslateXTimeline","TranslateYTimeline","ScaleTimeline","bx","by","mixOut","Math","abs","signum","ScaleXTimeline","ScaleYTimeline","ShearTimeline","ShearXTimeline","ShearYTimeline","RGBATimeline","slotIndex","g","b","a","slot","slots","color","setFromColor","set","RGBTimeline","AlphaTimeline","RGBA2Timeline","r2","g2","b2","light","dark","darkColor","setupLight","setupDark","RGB2Timeline","AttachmentTimeline","attachmentNames","Array","attachmentName","setAttachment","getAttachment","DeformTimeline","id","vertices","getCurvePercent","firedEvents","slotAttachment","timelineAttachment","vertexCount","vertexAttachment","setupVertices","lastVertices","percent","prevVertices","nextVertices","prev","EventTimeline","Number","MAX_VALUE","frameTime","push","DrawOrderTimeline","drawOrders","idx","drawOrderToSetupIndex","IkConstraintTimeline","ikConstraintIndex","mix","softness","bendDirection","compress","stretch","constraint","ikConstraints","mixIn","TransformConstraintTimeline","transformConstraintIndex","mixRotate","mixX","mixY","mixScaleX","mixScaleY","mixShearY","transformConstraints","PathConstraintPositionTimeline","pathConstraintIndex","pathConstraints","position","PathConstraintSpacingTimeline","spacing","PathConstraintMixTimeline","SequenceTimeline","ENTRIES","getSlotIndex","mode","index","delay","MODE","DELAY","sequenceIndex","modeAndIndex","count","regions","hold","once","min","pingpong","onceReverse","max","loopReverse","pingpongReverse"],"sources":["../src/Animation.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}