{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nexport async function initSpine() {\n  var app = new PIXI.Application();\n  await app.init({\n    width: window.innerWidth,\n    height: window.innerHeight,\n    resolution: window.devicePixelRatio || 1,\n    autoDensity: true,\n    resizeTo: window,\n    backgroundColor: 0x2c3e50,\n    hello: true\n  });\n  document.body.appendChild(app.view);\n\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n  // Create the spine display object\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.5\n  });\n  spineboy.state.setAnimation(0, \"hoverboard\", true);\n  spineboy.state.data.defaultMix = 0.2;\n  // Set the default mix time to use when transitioning\n  // from one animation to another.\n\n  // Center the Spine object on screen.\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  // spineboy.state.setAnimation(0, \"idle\", true);\n  // spineboy.state.setAnimation(1, \"aim\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  let isDragging = false;\n  const bones = spineboy.skeleton.bones;\n  console.log(bones);\n  const controlBoneNames = [\"crosshair\"];\n  const controlBones = [];\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n\n  // Add variables for movement, speed.\n  let moveLeft = false;\n  let moveRight = false;\n  const speed = 5;\n\n  // Handle the case that the keyboard keys specified below are pressed.\n  function onKeyDown(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = true;\n      spineboy.skeleton.scaleX = -1;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = true;\n      spineboy.skeleton.scaleX = 1;\n    }\n  }\n\n  // Handle when the keys are released, if they were pressed.\n  function onKeyUp(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = false;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = false;\n    }\n  }\n\n  // Handle if you click/tap the screen.\n  function onClick() {\n    spineboy.state.setAnimation(1, \"shoot\", false, 0);\n  }\n\n  // Add event listeners so that the window will correctly handle input.\n  window.addEventListener(\"keydown\", onKeyDown);\n  window.addEventListener(\"keyup\", onKeyUp);\n\n  // Update the application to move Spineboy if input is detected.\n  app.ticker.add(() => {\n    if (moveLeft) {\n      spineboy.x -= speed;\n    }\n    if (moveRight) {\n      spineboy.x += speed;\n    }\n  });\n  for (var i = 0; i < controlBoneNames.length; i++) {\n    const bone = spineboy.skeleton.findBone(controlBoneNames[i]);\n    const point = {\n      x: bone.worldX,\n      y: bone.worldY\n    };\n    spineboy.skeletonToPixiWorldCoordinates(point);\n    const control = new PIXI.Graphics().circle(0, 0, 6).fill('#ff00ff');\n    control.x = point.x;\n    control.y = point.y;\n    controlBones.push({\n      bone,\n      control\n    });\n    app.stage.addChild(control);\n    console.log(control.x, control.y);\n    control.interactive = \"static\";\n    let dragObject = null;\n    let lastX = -1,\n      lastY = -1;\n    const endDrag = () => {\n      dragObject = null;\n    };\n    app.stage.on('pointerup', endDrag).on('pointerupoutside', endDrag).on('pointermove', ({\n      x,\n      y\n    }) => {\n      if (dragObject) {\n        dragObject.x += x - lastX;\n        dragObject.y += y - lastY;\n        lastX = x;\n        lastY = y;\n      }\n    });\n    control.on('pointerdown', ({\n      x,\n      y\n    }) => {\n      spineboy.state.setAnimation(0, \"shoot\", false, 2.0);\n      dragObject = control;\n      lastX = x;\n      lastY = y;\n      console.log(x);\n    });\n  }\n  const point = {\n    x: 0,\n    y: 0\n  };\n  spineboy.beforeUpdateWorldTransforms = () => {\n    for (let {\n      bone,\n      control\n    } of controlBones) {\n      point.x = control.x;\n      point.y = control.y;\n      spineboy.pixiWorldCoordinatesToBone(point, bone);\n      bone.x = point.x;\n      bone.y = point.y;\n    }\n  };\n}","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","window","innerWidth","height","innerHeight","resolution","devicePixelRatio","autoDensity","resizeTo","backgroundColor","hello","document","body","appendChild","view","Assets","add","alias","src","load","spineboy","spine","Spine","from","skeleton","atlas","scale","state","setAnimation","data","defaultMix","x","y","getBounds","stage","addChild","hitArea","Rectangle","eventMode","isDragging","bones","console","log","controlBoneNames","controlBones","Promise","resolve","requestAnimationFrame","moveLeft","moveRight","speed","onKeyDown","key","code","scaleX","onKeyUp","onClick","addEventListener","ticker","i","length","bone","findBone","point","worldX","worldY","skeletonToPixiWorldCoordinates","control","Graphics","circle","fill","push","interactive","dragObject","lastX","lastY","endDrag","on","beforeUpdateWorldTransforms","pixiWorldCoordinatesToBone"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\nexport async function initSpine () {\n    var app = new PIXI.Application();\n    await app.init({\n        width: window.innerWidth,\n        height: window.innerHeight,\n        resolution: window.devicePixelRatio || 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n        hello: true,\n    })\n    document.body.appendChild(app.view);\n\n    // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    await PIXI.Assets.load([\"spineboyData\", \"spineboyAtlas\"]);\n\n    // Create the spine display object\n    const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n        scale: 0.5,\n    });\n    spineboy.state.setAnimation(0, \"hoverboard\", true);\n    spineboy.state.data.defaultMix = 0.2\n    // Set the default mix time to use when transitioning\n    // from one animation to another.\n\n    // Center the Spine object on screen.\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = window.innerHeight / 2 + spineboy.getBounds().height / 2;\n\n    // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n    // spineboy.state.setAnimation(0, \"idle\", true);\n    // spineboy.state.setAnimation(1, \"aim\", true);\n\n    // Add the display object to the stage.\n    app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n    let isDragging = false;\n    const bones = spineboy.skeleton.bones;\nconsole.log(bones)\n    const controlBoneNames = [\n        \"crosshair\",\n      ];\n      const controlBones = [];\n\n      // wait a frame as pixi bounds do not work until rendered\n      await new Promise((resolve) => requestAnimationFrame(resolve));\n\n      // Add variables for movement, speed.\n        let moveLeft = false;\n        let moveRight = false;\n        const speed = 5;\n        \n        // Handle the case that the keyboard keys specified below are pressed.\n        function onKeyDown(key) {\n          if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n            moveLeft = true;\n            spineboy.skeleton.scaleX = -1;\n          } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n            moveRight = true;\n            spineboy.skeleton.scaleX = 1;\n          }\n        }\n\n        // Handle when the keys are released, if they were pressed.\n        function onKeyUp(key) {\n          if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n            moveLeft = false;\n          } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n            moveRight = false;\n          }\n        }\n\n        // Handle if you click/tap the screen.\n        function onClick() {\n          spineboy.state.setAnimation(1, \"shoot\", false, 0);\n        }\n        \n        // Add event listeners so that the window will correctly handle input.\n        window.addEventListener(\"keydown\", onKeyDown);\n        window.addEventListener(\"keyup\", onKeyUp);\n\n        // Update the application to move Spineboy if input is detected.\n        app.ticker.add(() => {\n          if (moveLeft) {\n            spineboy.x -= speed;\n          }\n          if (moveRight) {\n            spineboy.x += speed;\n          }\n        });\n\n      for (var i = 0; i < controlBoneNames.length; i++) {\n        const bone = spineboy.skeleton.findBone(controlBoneNames[i]);\n        const point = { x: bone.worldX, y: bone.worldY };\n        spineboy.skeletonToPixiWorldCoordinates(point);\n\n        const control = new PIXI.Graphics()\n          .circle(0, 0, 6)\n          .fill('#ff00ff')\n        control.x = point.x;\n        control.y = point.y;\n        controlBones.push({ bone, control });\n        app.stage.addChild(control);\n        console.log(control.x, control.y);\n\n        control.interactive = \"static\";\n        let dragObject = null;\n        let lastX = -1, lastY = -1;\n        const endDrag = () => {\n            dragObject = null\n        };\n        app.stage\n          .on('pointerup', endDrag)\n          .on('pointerupoutside', endDrag)\n          .on('pointermove', ({ x, y }) => {\n            if (dragObject) {\n                dragObject.x += x - lastX;\n                dragObject.y += y - lastY;\n                lastX = x;\n                lastY = y;\n            }\n          });\n\n        control.on('pointerdown', ({ x, y }) => {\n            spineboy.state.setAnimation(0, \"shoot\", false, 2.0);\n          dragObject = control;\n          lastX = x;\n          lastY = y;\n          console.log(x)\n        })\n      }\n      const point = { x: 0, y: 0 };\n      spineboy.beforeUpdateWorldTransforms = () => {\n        for (let { bone, control } of controlBones) {\n          point.x = control.x;\n          point.y = control.y;\n          spineboy.pixiWorldCoordinatesToBone(point, bone);\n          bone.x = point.x;\n          bone.y = point.y;\n        }\n      };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}