{"ast":null,"code":"/* eslint-disable */\n// import * as PIXI from 'pixi.js'\n\nexport async function initSpine() {\n  var app = new PIXI.Application();\n  await app.init({\n    width: 900,\n    height: 700,\n    resolution: 1,\n    autoDensity: true,\n    // resizeTo: window,\n    backgroundColor: 0x2c3e50\n  });\n  document.body.appendChild(app.view);\n\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  PIXI.Assets.add({\n    alias: \"sky\",\n    src: \"./sky.png\"\n  });\n  PIXI.Assets.add({\n    alias: \"background\",\n    src: './starsky.jpg'\n  });\n  PIXI.Assets.add({\n    alias: \"midground\",\n    src: './midground.png'\n  });\n  PIXI.Assets.add({\n    alias: \"platform\",\n    src: './platform.png'\n  });\n  await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\"]);\n  const sky = PIXI.Sprite.from('background');\n  sky.width = app.screen.width;\n  sky.height = app.screen.height;\n  app.stage.addChild(sky);\n  const platform = PIXI.Sprite.from('platform');\n  platform.y = 580;\n  platform.width = app.screen.width;\n  platform.height = 250;\n  app.stage.addChild(platform);\n\n  // Create the spine display object\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.3\n  });\n\n  // Set the default mix time to use when transitioning\n  // from one animation to another.\n  spineboy.state.data.defaultMix = 0.2;\n\n  // Center the Spine object on screen.\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = 590;\n\n  // Add the display object to the stage.\n  // app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  let isDragging = false;\n  const bones = spineboy.skeleton.bones;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(0, \"idle\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  app.stage.on(\"pointerdown\", e => {\n    isDragging = true;\n    setBonePosition(e);\n    spineboy.state.setAnimation(0, \"shoot\", false);\n  });\n  app.stage.on(\"globalpointermove\", e => {\n    if (isDragging) setBonePosition(e);\n    spineboy.state.setAnimation(1, \"aim\", true);\n  });\n  app.stage.on(\"pointerup\", e => isDragging = false);\n  const setBonePosition = e => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(e.data.global.x - spineboy.x, e.data.global.y - spineboy.y);\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n  };\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n  // Add variables for movement, speed.\n  let moveLeft = false;\n  let moveRight = false;\n  const speed = 5;\n\n  // Handle the case that the keyboard keys specified below are pressed.\n  function onKeyDown(key) {\n    //default state with hoverboard animation\n    spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      // turn spine boy to the left with 'Arrow LEFT Key'\n      spineboy.skeleton.scaleX = -1;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      // turn spine boy to the right with 'Arrow RIGHT Key'\n      spineboy.skeleton.scaleX = 1;\n    } else if (key.code === \"ArrowUp\" || key.code === \"KeyW\") {\n      // make the spine boy jump once with 'Arrow UP Key'\n      spineboy.state.setAnimation(0, \"jump\", false);\n    }\n  }\n\n  // Handle when the keys are released, if they were pressed.\n  function onKeyUp(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = false;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = false;\n    } else if (key.code === \"ArrowUp\" || key.code === \"KeyW\") {\n      spineboy.state.setAnimation(0, \"walk\", true); // Optional: set jump animation\n    }\n  }\n\n  // Add event listeners so that the window will correctly handle input.\n  // window.addEventListener(\"keydown\", onKeyDown);\n  // window.addEventListener(\"keyup\", onKeyUp);\n\n  // Update the application to move Spineboy if input is detected.\n  app.ticker.add(() => {\n    if (moveLeft) {\n      spineboy.x -= speed;\n    }\n    if (moveRight) {\n      spineboy.x += speed;\n    }\n  });\n  function run() {\n    spineboy.state.setAnimation(0, \"run\", true);\n  }\n  function shoot() {\n    spineboy.state.setAnimation(0, \"shoot\", true);\n  }\n  function jump() {\n    spineboy.state.setAnimation(0, \"jump\", true);\n  }\n  function hoverboard() {\n    spineboy.state.setAnimation(0, \"hoverboard\", true);\n  }\n  function portal() {\n    spineboy.state.setAnimation(0, \"portal\", true);\n  }\n  function turnLeft() {\n    spineboy.skeleton.scaleX = -1;\n  }\n  function turnRight() {\n    spineboy.skeleton.scaleX = 1;\n  }\n  function walk() {\n    spineboy.state.setAnimation(0, \"walk\", true);\n  }\n  function stop() {\n    spineboy.state.setAnimation(0, \"idle\", true);\n  }\n  return {\n    stop,\n    portal,\n    run,\n    shoot,\n    jump,\n    hoverboard,\n    walk,\n    turnLeft,\n    turnRight\n  };\n}","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","height","resolution","autoDensity","backgroundColor","document","body","appendChild","view","Assets","add","alias","src","load","sky","Sprite","from","screen","stage","addChild","platform","y","spineboy","spine","Spine","skeleton","atlas","scale","state","data","defaultMix","x","window","innerWidth","hitArea","Rectangle","eventMode","isDragging","bones","setAnimation","on","e","setBonePosition","position","Vector2","global","crosshairBone","findBone","parent","worldToLocal","Promise","resolve","requestAnimationFrame","moveLeft","moveRight","speed","onKeyDown","key","code","scaleX","onKeyUp","ticker","run","shoot","jump","hoverboard","portal","turnLeft","turnRight","walk","stop"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\n// import * as PIXI from 'pixi.js'\n\nexport async function initSpine () {\n    var app = new PIXI.Application();\n    await app.init({\n        width: 900,\n        height: 700,\n        resolution: 1,\n        autoDensity: true,\n        // resizeTo: window,\n        backgroundColor: 0x2c3e50,\n    })\n    document.body.appendChild(app.view);\n\n    // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    PIXI.Assets.add({alias: \"sky\", src: \"./sky.png\" });\n    PIXI.Assets.add({alias: \"background\", src: './starsky.jpg' });\n    PIXI.Assets.add({alias: \"midground\", src: './midground.png' });\n    PIXI.Assets.add({alias: \"platform\", src: './platform.png' });\n   \n    await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\"]);\n\n    const sky = PIXI.Sprite.from('background');\n    sky.width = app.screen.width;\n    sky.height = app.screen.height;\n    app.stage.addChild(sky);\n\n    const platform = PIXI.Sprite.from('platform');\n    platform.y = 580;\n    platform.width =  app.screen.width;\n    platform.height = 250;\n    app.stage.addChild(platform);\n\n\n    // Create the spine display object\n    const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n        scale: 0.3,\n    });\n\n    // Set the default mix time to use when transitioning\n    // from one animation to another.\n    spineboy.state.data.defaultMix = 0.2;\n\n    // Center the Spine object on screen.\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = 590;\n\n    // Add the display object to the stage.\n    // app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n    let isDragging = false;\n    const bones = spineboy.skeleton.bones;\n  \n    // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n    spineboy.state.setAnimation(0, \"idle\", true);\n\n    // Add the display object to the stage.\n    app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n\n    app.stage.on(\"pointerdown\", (e) => {\n        isDragging = true;\n        setBonePosition(e);\n        spineboy.state.setAnimation(0, \"shoot\", false);\n    });\n\n    app.stage.on(\"globalpointermove\", (e) => {\n        if (isDragging) setBonePosition(e);\n        spineboy.state.setAnimation(1, \"aim\", true);\n    });\n\n    app.stage.on(\"pointerup\", (e) => (isDragging = false));\n\n    const setBonePosition = (e) => {\n        // Transform the mouse/touch coordinates to Spineboy's coordinate\n        // system origin. `position` is then relative to Spineboy's root\n        // bone.\n        const position = new spine.Vector2(\n            e.data.global.x - spineboy.x,\n            e.data.global.y - spineboy.y\n        );\n\n        // Find the crosshair bone.\n        const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n        // Take the mouse position, which is relative to the root bone,\n        // and transform it to the crosshair bone's parent root bone\n        // coordinate system via `worldToLocal()`. `position` is relative\n        // to the crosshair bone's parent bone after this\n        crosshairBone.parent.worldToLocal(position);\n\n        // Set the crosshair bone's position to the mouse position\n        crosshairBone.x = position.x;\n        crosshairBone.y = position.y;\n    };\n\n\n    // wait a frame as pixi bounds do not work until rendered\n    await new Promise((resolve) => requestAnimationFrame(resolve));\n    // Add variables for movement, speed.\n    let moveLeft = false;\n    let moveRight = false;\n    const speed = 5;\n\n\n    // Handle the case that the keyboard keys specified below are pressed.\n    function onKeyDown(key) {\n      //default state with hoverboard animation\n      spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n\n      if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n        // turn spine boy to the left with 'Arrow LEFT Key'\n        spineboy.skeleton.scaleX = -1;\n      } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n        // turn spine boy to the right with 'Arrow RIGHT Key'\n        spineboy.skeleton.scaleX = 1;\n      } else if ((key.code === \"ArrowUp\" || key.code === \"KeyW\")) {\n        // make the spine boy jump once with 'Arrow UP Key'\n        spineboy.state.setAnimation(0, \"jump\", false); \n      }\n    }\n\n    // Handle when the keys are released, if they were pressed.\n    function onKeyUp(key) {\n      if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n        moveLeft = false;\n      } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n        moveRight = false;\n      } else if ((key.code === \"ArrowUp\" || key.code === \"KeyW\")) {\n          spineboy.state.setAnimation(0, \"walk\", true); // Optional: set jump animation\n      }\n    }\n\n    // Add event listeners so that the window will correctly handle input.\n    // window.addEventListener(\"keydown\", onKeyDown);\n    // window.addEventListener(\"keyup\", onKeyUp);\n\n    // Update the application to move Spineboy if input is detected.\n    app.ticker.add(() => {\n      if (moveLeft) {\n        spineboy.x -= speed;\n      }\n      if (moveRight) {\n        spineboy.x += speed;\n      }\n    });\n\n    function run(){\n      spineboy.state.setAnimation(0, \"run\", true);\n    }\n    function shoot(){\n      spineboy.state.setAnimation(0, \"shoot\", true);\n    }\n    function jump(){\n      spineboy.state.setAnimation(0, \"jump\", true);\n    }\n    function hoverboard(){\n      spineboy.state.setAnimation(0, \"hoverboard\", true);\n    }\n    function portal(){\n      spineboy.state.setAnimation(0, \"portal\", true);\n    }\n    function turnLeft(){\n      spineboy.skeleton.scaleX = -1;\n    }\n    function turnRight(){\n      spineboy.skeleton.scaleX = 1;\n    }\n    function walk(){\n      spineboy.state.setAnimation(0, \"walk\", true);\n    }\n    function stop(){\n      spineboy.state.setAnimation(0, \"idle\", true);\n    }\n    return {stop, portal, run, shoot, jump, hoverboard, walk, turnLeft, turnRight}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}