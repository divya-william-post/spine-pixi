{"ast":null,"code":"/* eslint-disable */\nexport async function initSpine() {\n  var app = new PIXI.Application();\n  await app.init({\n    width: 1200,\n    height: 700,\n    resolution: 1,\n    autoDensity: true,\n    resizeTo: window,\n    backgroundColor: 0x2c3e50\n  });\n  document.body.appendChild(app.view);\n\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"spineboyData\",\n    src: \"./spineboy-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"spineboyAtlas\",\n    src: \"./spineboy-pma.atlas\"\n  });\n  PIXI.Assets.add({\n    alias: \"sky\",\n    src: \"https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png\"\n  });\n  PIXI.Assets.add({\n    alias: \"background\",\n    src: './starsky.jpg'\n  });\n  PIXI.Assets.add({\n    alias: \"midground\",\n    src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png'\n  });\n  PIXI.Assets.add({\n    alias: \"platform\",\n    src: './platform.png'\n  });\n  PIXI.Assets.add({\n    alias: 'cells',\n    src: 'https://pixijs.com/assets/cells.png'\n  });\n  PIXI.Assets.add({\n    alias: 'flowerpot',\n    src: 'https://pixijs.com/assets/flowerTop.png'\n  });\n  await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\", 'cells', 'flowerpot']);\n  const cells = PIXI.Sprite.from('cells');\n  cells.scale.set(1.5);\n  const mask = PIXI.Sprite.from('flowerpot');\n  mask.anchor.set(0.5);\n  mask.x = 310;\n  mask.y = 190;\n  cells.mask = mask;\n  app.stage.addChild(mask, cells);\n  const target = new PIXI.Point();\n  reset();\n  function reset() {\n    target.x = Math.floor(Math.random() * 550);\n    target.y = Math.floor(Math.random() * 300);\n  }\n\n  // Animate the mask\n  app.ticker.add(() => {\n    mask.x += (target.x - mask.x) * 0.1;\n    mask.y += (target.y - mask.y) * 0.1;\n    if (Math.abs(mask.x - target.x) < 1) {\n      reset();\n    }\n  });\n  const sky = PIXI.Sprite.from('background');\n  sky.width = app.screen.width;\n  sky.height = app.screen.height;\n  app.stage.addChild(sky);\n\n  // const midground = PIXI.Sprite.from('midground');\n  // midground.width =  app.screen.width;\n  // midground.height = app.screen.height;\n  // app.stage.addChild(midground);\n\n  // Create a Sprite for the background using PIXI.Assets\n  const platform = PIXI.Sprite.from('platform');\n  platform.y = 580;\n  platform.width = app.screen.width;\n  platform.height = 150;\n  app.stage.addChild(platform);\n\n  // Create the spine display object\n  const spineboy = spine.Spine.from({\n    skeleton: \"spineboyData\",\n    atlas: \"spineboyAtlas\",\n    scale: 0.3\n  });\n\n  // Set the default mix time to use when transitioning\n  // from one animation to another.\n  spineboy.state.data.defaultMix = 0.2;\n\n  // Center the Spine object on screen.\n  spineboy.x = window.innerWidth / 2;\n  spineboy.y = 590;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(1, \"aim\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  let isDragging = false;\n  const bones = spineboy.skeleton.bones;\n\n  // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n  spineboy.state.setAnimation(0, \"idle\", true);\n  spineboy.state.setAnimation(1, \"aim\", true);\n\n  // Add the display object to the stage.\n  app.stage.addChild(spineboy);\n  app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n  // Make the stage interactive and register pointer events\n  app.stage.eventMode = \"dynamic\";\n  app.stage.on(\"pointerdown\", e => {\n    isDragging = true;\n    setBonePosition(e);\n    spineboy.state.setAnimation(1, \"shoot\", false);\n  });\n  app.stage.on(\"globalpointermove\", e => {\n    if (isDragging) setBonePosition(e);\n    spineboy.state.setAnimation(1, \"aim\", true);\n  });\n  app.stage.on(\"pointerup\", e => isDragging = false);\n  const setBonePosition = e => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(e.data.global.x - spineboy.x, e.data.global.y - spineboy.y);\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n  };\n\n  // wait a frame as pixi bounds do not work until rendered\n  await new Promise(resolve => requestAnimationFrame(resolve));\n  // Add variables for movement, speed.\n  let moveLeft = false;\n  let moveRight = false;\n  const speed = 5;\n\n  // Handle the case that the keyboard keys specified below are pressed.\n  function onKeyDown(key) {\n    spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = true;\n      spineboy.skeleton.scaleX = -1;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = true;\n      spineboy.skeleton.scaleX = 1;\n    } else if (key.code === \"ArrowUp\" || key.code === \"KeyW\") {\n      spineboy.state.setAnimation(0, \"jump\", false); // Optional: set jump animation\n    }\n  }\n\n  // Handle when the keys are released, if they were pressed.\n  function onKeyUp(key) {\n    if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n      moveLeft = false;\n    } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n      moveRight = false;\n    } else if (key.code === \"ArrowUp\" || key.code === \"KeyW\") {\n      spineboy.state.setAnimation(0, \"walk\", true); // Optional: set jump animation\n    }\n  }\n\n  // Add event listeners so that the window will correctly handle input.\n  window.addEventListener(\"keydown\", onKeyDown);\n  window.addEventListener(\"keyup\", onKeyUp);\n\n  // Update the application to move Spineboy if input is detected.\n  app.ticker.add(() => {\n    if (moveLeft) {\n      spineboy.x -= speed;\n    }\n    if (moveRight) {\n      spineboy.x += speed;\n    }\n  });\n\n  //time for sack\n  // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n  PIXI.Assets.add({\n    alias: \"sackData\",\n    src: \"./sack-pro.skel\"\n  });\n  PIXI.Assets.add({\n    alias: \"sackAtlas\",\n    src: \"./sack-pma.atlas\"\n  });\n  await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n\n  // Create the spine display object\n  const sack = spine.Spine.from({\n    skeleton: \"sackData\",\n    atlas: \"sackAtlas\",\n    scale: 0.1\n  });\n\n  // Center the spine object on screen.\n  sack.x = window.innerWidth / 2;\n  sack.y = window.innerHeight / 2 + sack.getBounds().height / 2;\n\n  // Set animation \"cape-follow-example\" on track 0, looped.\n  sack.state.setAnimation(0, \"cape-follow-example\", true);\n  // Add the display object to the stage.\n  app.stage.addChild(sack);\n  setInterval(jumpSack, 1000);\n\n  // Function to randomly jump the sack within the visible screen\n  // Function to randomly jump the sack within the visible screen\n  function jumpSack() {\n    const jumpDistance = 150; // Define a distance to consider for collision check\n    let newX, newY;\n    let tooClose = true;\n\n    // Get the screen's width and height dynamically for responsiveness\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    // Define padding so the sack doesn't jump too close to the edges\n    const padding = 50; // Reduced padding to allow more free movement\n\n    // Keep generating new positions until a valid one is found\n    while (tooClose) {\n      // Randomly generate X and Y positions within the screen size, factoring in padding\n      newX = Math.random() * (screenWidth - padding * 2) + padding; // Random X within screen bounds\n      newY = Math.random() * (screenHeight - padding * 2) + padding; // Random Y within screen bounds\n\n      // Calculate distance from the spineboy\n      const distanceX = newX - spineboy.x;\n      const distanceY = newY - spineboy.y;\n      const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n      // Check if the new position is too close to the spineboy\n      if (distance > jumpDistance) {\n        tooClose = false; // Valid position found\n      }\n    }\n\n    // Update sack's position to the new random position\n    sack.x = newX;\n    sack.y = newY;\n  }\n}","map":{"version":3,"names":["initSpine","app","PIXI","Application","init","width","height","resolution","autoDensity","resizeTo","window","backgroundColor","document","body","appendChild","view","Assets","add","alias","src","load","cells","Sprite","from","scale","set","mask","anchor","x","y","stage","addChild","target","Point","reset","Math","floor","random","ticker","abs","sky","screen","platform","spineboy","spine","Spine","skeleton","atlas","state","data","defaultMix","innerWidth","setAnimation","hitArea","Rectangle","eventMode","isDragging","bones","on","e","setBonePosition","position","Vector2","global","crosshairBone","findBone","parent","worldToLocal","Promise","resolve","requestAnimationFrame","moveLeft","moveRight","speed","onKeyDown","key","code","scaleX","onKeyUp","addEventListener","sack","innerHeight","getBounds","setInterval","jumpSack","jumpDistance","newX","newY","tooClose","screenWidth","screenHeight","padding","distanceX","distanceY","distance","sqrt"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/spine.js"],"sourcesContent":["/* eslint-disable */\nexport async function initSpine () {\n    var app = new PIXI.Application();\n    await app.init({\n        width: 1200,\n        height: 700,\n        resolution: 1,\n        autoDensity: true,\n        resizeTo: window,\n        backgroundColor: 0x2c3e50,\n    })\n    document.body.appendChild(app.view);\n\n    // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"spineboyData\", src: \"./spineboy-pro.skel\" });\n    PIXI.Assets.add({alias: \"spineboyAtlas\", src: \"./spineboy-pma.atlas\" });\n    PIXI.Assets.add({alias: \"sky\", src: \"https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png\" });\n    PIXI.Assets.add({alias: \"background\", src: './starsky.jpg' });\n    PIXI.Assets.add({alias: \"midground\", src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png' });\n    PIXI.Assets.add({alias: \"platform\", src: './platform.png' });\n\n    PIXI.Assets.add({alias: 'cells', src: 'https://pixijs.com/assets/cells.png'});\n    PIXI.Assets.add({alias:'flowerpot', src:'https://pixijs.com/assets/flowerTop.png'})\n    \n    await PIXI.Assets.load([\"platform\", \"spineboyData\", \"spineboyAtlas\", \"sky\", \"background\", \"midground\", 'cells', 'flowerpot']);\n\n    const cells = PIXI.Sprite.from('cells');\n    cells.scale.set(1.5);\n    const mask = PIXI.Sprite.from('flowerpot');\n    mask.anchor.set(0.5);\n    mask.x = 310;\n    mask.y = 190;\n    cells.mask = mask;\n    app.stage.addChild(mask, cells);\n\n\n    const target = new PIXI.Point();\n\n    reset();\n\n    function reset()\n    {\n        target.x = Math.floor(Math.random() * 550);\n        target.y = Math.floor(Math.random() * 300);\n    }\n\n    // Animate the mask\n    app.ticker.add(() =>\n    {\n        mask.x += (target.x - mask.x) * 0.1;\n        mask.y += (target.y - mask.y) * 0.1;\n\n        if (Math.abs(mask.x - target.x) < 1)\n        {\n            reset();\n        }\n    });\n\n    const sky = PIXI.Sprite.from('background');\n    sky.width = app.screen.width;\n    sky.height = app.screen.height;\n    app.stage.addChild(sky);\n\n    // const midground = PIXI.Sprite.from('midground');\n    // midground.width =  app.screen.width;\n    // midground.height = app.screen.height;\n    // app.stage.addChild(midground);\n\n    // Create a Sprite for the background using PIXI.Assets\n    const platform = PIXI.Sprite.from('platform');\n    platform.y = 580;\n    platform.width =  app.screen.width;\n    platform.height = 150;\n    app.stage.addChild(platform);\n\n    // Create the spine display object\n    const spineboy = spine.Spine.from({skeleton: \"spineboyData\", atlas: \"spineboyAtlas\", \n        scale: 0.3,\n    });\n\n    // Set the default mix time to use when transitioning\n    // from one animation to another.\n    spineboy.state.data.defaultMix = 0.2;\n\n    // Center the Spine object on screen.\n    spineboy.x = window.innerWidth / 2;\n    spineboy.y = 590;\n\n    // Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\n    spineboy.state.setAnimation(1, \"aim\", true);\n\n    // Add the display object to the stage.\n    app.stage.addChild(spineboy);\n    app.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n    // Make the stage interactive and register pointer events\n    app.stage.eventMode = \"dynamic\";\n    let isDragging = false;\n    const bones = spineboy.skeleton.bones;\n  \n// Set looping animations \"idle\" on track 0 and \"aim\" on track 1.\nspineboy.state.setAnimation(0, \"idle\", true);\nspineboy.state.setAnimation(1, \"aim\", true);\n\n// Add the display object to the stage.\napp.stage.addChild(spineboy);\napp.stage.hitArea = new PIXI.Rectangle(0, 0, app.view.width, app.view.height);\n\n// Make the stage interactive and register pointer events\napp.stage.eventMode = \"dynamic\";\n\napp.stage.on(\"pointerdown\", (e) => {\n    isDragging = true;\n    setBonePosition(e);\n    spineboy.state.setAnimation(1, \"shoot\", false);\n});\n\napp.stage.on(\"globalpointermove\", (e) => {\n    if (isDragging) setBonePosition(e);\n    spineboy.state.setAnimation(1, \"aim\", true);\n});\n\napp.stage.on(\"pointerup\", (e) => (isDragging = false));\n\nconst setBonePosition = (e) => {\n    // Transform the mouse/touch coordinates to Spineboy's coordinate\n    // system origin. `position` is then relative to Spineboy's root\n    // bone.\n    const position = new spine.Vector2(\n        e.data.global.x - spineboy.x,\n        e.data.global.y - spineboy.y\n    );\n\n    // Find the crosshair bone.\n    const crosshairBone = spineboy.skeleton.findBone(\"crosshair\");\n\n    // Take the mouse position, which is relative to the root bone,\n    // and transform it to the crosshair bone's parent root bone\n    // coordinate system via `worldToLocal()`. `position` is relative\n    // to the crosshair bone's parent bone after this\n    crosshairBone.parent.worldToLocal(position);\n\n    // Set the crosshair bone's position to the mouse position\n    crosshairBone.x = position.x;\n    crosshairBone.y = position.y;\n};\n\n\n      // wait a frame as pixi bounds do not work until rendered\n      await new Promise((resolve) => requestAnimationFrame(resolve));\n // Add variables for movement, speed.\n let moveLeft = false;\n let moveRight = false;\n const speed = 5;\n\n\n      // Handle the case that the keyboard keys specified below are pressed.\n      function onKeyDown(key) {\n        spineboy.state.setAnimation(0, \"hoverboard\", true, 0);\n        if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n          moveLeft = true;\n          spineboy.skeleton.scaleX = -1;\n        } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n          moveRight = true;\n          spineboy.skeleton.scaleX = 1;\n        } else if ((key.code === \"ArrowUp\" || key.code === \"KeyW\")) {\n            spineboy.state.setAnimation(0, \"jump\", false); // Optional: set jump animation\n        }\n      }\n\n      // Handle when the keys are released, if they were pressed.\n      function onKeyUp(key) {\n        if (key.code === \"ArrowLeft\" || key.code === \"KeyA\") {\n          moveLeft = false;\n        } else if (key.code === \"ArrowRight\" || key.code === \"KeyD\") {\n          moveRight = false;\n        } else if ((key.code === \"ArrowUp\" || key.code === \"KeyW\")) {\n            spineboy.state.setAnimation(0, \"walk\", true); // Optional: set jump animation\n        }\n      }\n\n      // Add event listeners so that the window will correctly handle input.\n      window.addEventListener(\"keydown\", onKeyDown);\n      window.addEventListener(\"keyup\", onKeyUp);\n\n      // Update the application to move Spineboy if input is detected.\n      app.ticker.add(() => {\n        if (moveLeft) {\n          spineboy.x -= speed;\n        }\n        if (moveRight) {\n          spineboy.x += speed;\n        }\n      });\n\n\n\n\n\n      //time for sack\n       // Pre-load the skeleton data and atlas. You can also load .json skeleton data.\n    PIXI.Assets.add({alias: \"sackData\", src: \"./sack-pro.skel\"});\n    PIXI.Assets.add({alias: \"sackAtlas\", src: \"./sack-pma.atlas\"});\n    await PIXI.Assets.load([\"sackData\", \"sackAtlas\"]);\n\n    // Create the spine display object\n    const sack = spine.Spine.from({skeleton: \"sackData\", atlas: \"sackAtlas\", \n      scale: 0.1,\n    });\n\n    // Center the spine object on screen.\n    sack.x = window.innerWidth / 2;\n    sack.y = window.innerHeight / 2 + sack.getBounds().height / 2;\n\n    // Set animation \"cape-follow-example\" on track 0, looped.\n    sack.state.setAnimation(0, \"cape-follow-example\", true);\n    // Add the display object to the stage.\n    app.stage.addChild(sack);\n\n\n    setInterval(jumpSack, 1000);\n\n    // Function to randomly jump the sack within the visible screen\n// Function to randomly jump the sack within the visible screen\nfunction jumpSack() {\n    const jumpDistance = 150; // Define a distance to consider for collision check\n    let newX, newY;\n    let tooClose = true;\n\n    // Get the screen's width and height dynamically for responsiveness\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    // Define padding so the sack doesn't jump too close to the edges\n    const padding = 50; // Reduced padding to allow more free movement\n\n    // Keep generating new positions until a valid one is found\n    while (tooClose) {\n        // Randomly generate X and Y positions within the screen size, factoring in padding\n        newX = Math.random() * (screenWidth - padding * 2) + padding;  // Random X within screen bounds\n        newY = Math.random() * (screenHeight - padding * 2) + padding; // Random Y within screen bounds\n\n        // Calculate distance from the spineboy\n        const distanceX = newX - spineboy.x;\n        const distanceY = newY - spineboy.y;\n        const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n        // Check if the new position is too close to the spineboy\n        if (distance > jumpDistance) {\n            tooClose = false; // Valid position found\n        }\n    }\n\n    // Update sack's position to the new random position\n    sack.x = newX;\n    sack.y = newY;\n}\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}