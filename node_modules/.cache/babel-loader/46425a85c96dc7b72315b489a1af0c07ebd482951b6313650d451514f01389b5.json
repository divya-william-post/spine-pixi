{"ast":null,"code":"import { Container, Sprite, Texture, TilingSprite } from 'pixi.js';\n\n// Class for handling the environment.\nexport class Scene {\n  constructor(width, height) {\n    // Create a main view that holds all layers.\n    this.view = new Container();\n\n    // Create the stationary sky that fills the entire screen.\n    this.sky = Sprite.from('sky');\n    this.sky.anchor.set(0, 1);\n    this.sky.width = width;\n    this.sky.height = height;\n\n    // Create textures for the background, mid-ground, and platform.\n    const backgroundTexture = Texture.from('background');\n    const midgroundTexture = Texture.from('midground');\n    const platformTexture = Texture.from('platform');\n\n    // Calculate the ideal platform height depending on the passed-in screen height.\n    const maxPlatformHeight = platformTexture.height;\n    const platformHeight = Math.min(maxPlatformHeight, height * 0.4);\n\n    // Calculate the scale to be apply to all tiling textures for consistency.\n    const scale = this.scale = platformHeight / maxPlatformHeight;\n    const baseOptions = {\n      tileScale: {\n        x: scale,\n        y: scale\n      },\n      anchor: {\n        x: 0,\n        y: 1\n      },\n      applyAnchorToTexture: true\n    };\n\n    // Create the tiling sprite layers.\n    this.background = new TilingSprite({\n      texture: backgroundTexture,\n      width,\n      height: backgroundTexture.height * scale,\n      ...baseOptions\n    });\n    this.midground = new TilingSprite({\n      texture: midgroundTexture,\n      width,\n      height: midgroundTexture.height * scale,\n      ...baseOptions\n    });\n    this.platform = new TilingSprite({\n      texture: platformTexture,\n      width,\n      height: platformHeight,\n      ...baseOptions\n    });\n\n    // Calculate the floor height for external referencing.\n    this.floorHeight = platformHeight * 0.43;\n\n    // Position the backdrop layers.\n    this.background.y = this.midground.y = -this.floorHeight;\n\n    // Add all layers to the main view.\n    this.view.addChild(this.sky, this.background, this.midground, this.platform);\n  }\n\n  // Use the platform's horizontal position as the key position for the scene.\n  get positionX() {\n    return this.platform.tilePosition.x;\n  }\n\n  // Set the horizontal position of the platform layer while applying parallax scrolling to the backdrop layers.\n  set positionX(value) {\n    this.background.tilePosition.x = value * 0.1;\n    this.midground.tilePosition.x = value * 0.25;\n    this.platform.tilePosition.x = value;\n  }\n}","map":{"version":3,"names":["Container","Sprite","Texture","TilingSprite","Scene","constructor","width","height","view","sky","from","anchor","set","backgroundTexture","midgroundTexture","platformTexture","maxPlatformHeight","platformHeight","Math","min","scale","baseOptions","tileScale","x","y","applyAnchorToTexture","background","texture","midground","platform","floorHeight","addChild","positionX","tilePosition","value"],"sources":["/Users/divya/Documents/vue-2024-spine/vue-20240spine/src/components/Scene.js"],"sourcesContent":["import { Container, Sprite, Texture, TilingSprite } from 'pixi.js';\n\n// Class for handling the environment.\nexport class Scene\n{\n    constructor(width, height)\n    {\n        // Create a main view that holds all layers.\n        this.view = new Container();\n\n        // Create the stationary sky that fills the entire screen.\n        this.sky = Sprite.from('sky');\n        this.sky.anchor.set(0, 1);\n        this.sky.width = width;\n        this.sky.height = height;\n\n        // Create textures for the background, mid-ground, and platform.\n        const backgroundTexture = Texture.from('background');\n        const midgroundTexture = Texture.from('midground');\n        const platformTexture = Texture.from('platform');\n\n        // Calculate the ideal platform height depending on the passed-in screen height.\n        const maxPlatformHeight = platformTexture.height;\n        const platformHeight = Math.min(maxPlatformHeight, height * 0.4);\n\n        // Calculate the scale to be apply to all tiling textures for consistency.\n        const scale = (this.scale = platformHeight / maxPlatformHeight);\n\n        const baseOptions = {\n            tileScale: { x: scale, y: scale },\n            anchor: { x: 0, y: 1 },\n            applyAnchorToTexture: true,\n        };\n\n        // Create the tiling sprite layers.\n        this.background = new TilingSprite({\n            texture: backgroundTexture,\n            width,\n            height: backgroundTexture.height * scale,\n            ...baseOptions,\n        });\n        this.midground = new TilingSprite({\n            texture: midgroundTexture,\n            width,\n            height: midgroundTexture.height * scale,\n            ...baseOptions,\n        });\n        this.platform = new TilingSprite({\n            texture: platformTexture,\n            width,\n            height: platformHeight,\n            ...baseOptions,\n        });\n\n        // Calculate the floor height for external referencing.\n        this.floorHeight = platformHeight * 0.43;\n\n        // Position the backdrop layers.\n        this.background.y = this.midground.y = -this.floorHeight;\n\n        // Add all layers to the main view.\n        this.view.addChild(this.sky, this.background, this.midground, this.platform);\n    }\n\n    // Use the platform's horizontal position as the key position for the scene.\n    get positionX()\n    {\n        return this.platform.tilePosition.x;\n    }\n\n    // Set the horizontal position of the platform layer while applying parallax scrolling to the backdrop layers.\n    set positionX(value)\n    {\n        this.background.tilePosition.x = value * 0.1;\n        this.midground.tilePosition.x = value * 0.25;\n        this.platform.tilePosition.x = value;\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,OAAO,EAAEC,YAAY,QAAQ,SAAS;;AAElE;AACA,OAAO,MAAMC,KAAK,CAClB;EACIC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EACzB;IACI;IACA,IAAI,CAACC,IAAI,GAAG,IAAIR,SAAS,CAAC,CAAC;;IAE3B;IACA,IAAI,CAACS,GAAG,GAAGR,MAAM,CAACS,IAAI,CAAC,KAAK,CAAC;IAC7B,IAAI,CAACD,GAAG,CAACE,MAAM,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;IACzB,IAAI,CAACH,GAAG,CAACH,KAAK,GAAGA,KAAK;IACtB,IAAI,CAACG,GAAG,CAACF,MAAM,GAAGA,MAAM;;IAExB;IACA,MAAMM,iBAAiB,GAAGX,OAAO,CAACQ,IAAI,CAAC,YAAY,CAAC;IACpD,MAAMI,gBAAgB,GAAGZ,OAAO,CAACQ,IAAI,CAAC,WAAW,CAAC;IAClD,MAAMK,eAAe,GAAGb,OAAO,CAACQ,IAAI,CAAC,UAAU,CAAC;;IAEhD;IACA,MAAMM,iBAAiB,GAAGD,eAAe,CAACR,MAAM;IAChD,MAAMU,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACH,iBAAiB,EAAET,MAAM,GAAG,GAAG,CAAC;;IAEhE;IACA,MAAMa,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGH,cAAc,GAAGD,iBAAkB;IAE/D,MAAMK,WAAW,GAAG;MAChBC,SAAS,EAAE;QAAEC,CAAC,EAAEH,KAAK;QAAEI,CAAC,EAAEJ;MAAM,CAAC;MACjCT,MAAM,EAAE;QAAEY,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC;MACtBC,oBAAoB,EAAE;IAC1B,CAAC;;IAED;IACA,IAAI,CAACC,UAAU,GAAG,IAAIvB,YAAY,CAAC;MAC/BwB,OAAO,EAAEd,iBAAiB;MAC1BP,KAAK;MACLC,MAAM,EAAEM,iBAAiB,CAACN,MAAM,GAAGa,KAAK;MACxC,GAAGC;IACP,CAAC,CAAC;IACF,IAAI,CAACO,SAAS,GAAG,IAAIzB,YAAY,CAAC;MAC9BwB,OAAO,EAAEb,gBAAgB;MACzBR,KAAK;MACLC,MAAM,EAAEO,gBAAgB,CAACP,MAAM,GAAGa,KAAK;MACvC,GAAGC;IACP,CAAC,CAAC;IACF,IAAI,CAACQ,QAAQ,GAAG,IAAI1B,YAAY,CAAC;MAC7BwB,OAAO,EAAEZ,eAAe;MACxBT,KAAK;MACLC,MAAM,EAAEU,cAAc;MACtB,GAAGI;IACP,CAAC,CAAC;;IAEF;IACA,IAAI,CAACS,WAAW,GAAGb,cAAc,GAAG,IAAI;;IAExC;IACA,IAAI,CAACS,UAAU,CAACF,CAAC,GAAG,IAAI,CAACI,SAAS,CAACJ,CAAC,GAAG,CAAC,IAAI,CAACM,WAAW;;IAExD;IACA,IAAI,CAACtB,IAAI,CAACuB,QAAQ,CAAC,IAAI,CAACtB,GAAG,EAAE,IAAI,CAACiB,UAAU,EAAE,IAAI,CAACE,SAAS,EAAE,IAAI,CAACC,QAAQ,CAAC;EAChF;;EAEA;EACA,IAAIG,SAASA,CAAA,EACb;IACI,OAAO,IAAI,CAACH,QAAQ,CAACI,YAAY,CAACV,CAAC;EACvC;;EAEA;EACA,IAAIS,SAASA,CAACE,KAAK,EACnB;IACI,IAAI,CAACR,UAAU,CAACO,YAAY,CAACV,CAAC,GAAGW,KAAK,GAAG,GAAG;IAC5C,IAAI,CAACN,SAAS,CAACK,YAAY,CAACV,CAAC,GAAGW,KAAK,GAAG,IAAI;IAC5C,IAAI,CAACL,QAAQ,CAACI,YAAY,CAACV,CAAC,GAAGW,KAAK;EACxC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}