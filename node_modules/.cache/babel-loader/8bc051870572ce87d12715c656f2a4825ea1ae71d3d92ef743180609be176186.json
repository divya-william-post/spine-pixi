{"ast":null,"code":"import '@pixi/spine-pixi';\nimport { Application, Assets } from 'pixi.js';\nimport { SpineBoy } from './SpineBoy';\nimport { Controller } from './Controller';\nimport { Scene } from './Scene';\nexport default {\n  name: 'SpineWorld',\n  data() {\n    return {\n      app: null,\n      spine: null,\n      spine2: null,\n      spineData1: null,\n      spineData2: null\n    };\n  },\n  mounted() {\n    this.initPixi();\n  },\n  methods: {\n    async initPixi() {\n      // Create a PixiJS application.\n      const app = new Application();\n\n      // Intialize the application.\n      await app.init({\n        background: '#1099bb',\n        resizeTo: window\n      });\n\n      // Then adding the application's canvas to the DOM body.\n      document.body.appendChild(app.canvas);\n\n      // Load the assets.\n      await Assets.load([{\n        alias: 'spineSkeleton',\n        src: 'https://raw.githubusercontent.com/pixijs/spine-v8/main/examples/assets/spineboy-pro.skel'\n      }, {\n        alias: 'spineAtlas',\n        src: 'https://raw.githubusercontent.com/pixijs/spine-v8/main/examples/assets/spineboy-pma.atlas'\n      }, {\n        alias: 'sky',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png'\n      }, {\n        alias: 'background',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/background.png'\n      }, {\n        alias: 'midground',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png'\n      }, {\n        alias: 'platform',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/platform.png'\n      }]);\n\n      // Create a controller that handles keyboard inputs.\n      const controller = new Controller();\n\n      // Create a scene that holds the environment.\n      const scene = new Scene(app.screen.width, app.screen.height);\n\n      // Create our character\n      const spineBoy = new SpineBoy();\n\n      // Adjust views' transformation.\n      scene.view.y = app.screen.height;\n      spineBoy.view.x = app.screen.width / 2;\n      spineBoy.view.y = app.screen.height - scene.floorHeight;\n      spineBoy.spine.scale.set(scene.scale * 0.32);\n\n      // Add scene and character to the stage.\n      app.stage.addChild(scene.view, spineBoy.view);\n\n      // Trigger character's spawn animation.\n      spineBoy.spawn();\n\n      // Animate the scene and the character based on the controller's input.\n      app.ticker.add(() => {\n        // Ignore the update loops while the character is doing the spawn animation.\n        if (spineBoy.isSpawning()) return;\n\n        // Update character's state based on the controller's input.\n        spineBoy.state.walk = controller.keys.left.pressed || controller.keys.right.pressed;\n        if (spineBoy.state.run && spineBoy.state.walk) spineBoy.state.run = true;else spineBoy.state.run = controller.keys.left.doubleTap || controller.keys.right.doubleTap;\n        spineBoy.state.hover = controller.keys.down.pressed;\n        if (controller.keys.left.pressed) spineBoy.direction = -1;else if (controller.keys.right.pressed) spineBoy.direction = 1;\n        spineBoy.state.jump = controller.keys.space.pressed;\n\n        // Update character's animation based on the latest state.\n        spineBoy.update();\n\n        // Determine the scene's horizontal scrolling speed based on the character's state.\n        let speed = 1.25;\n        if (spineBoy.state.hover) speed = 7.5;else if (spineBoy.state.run) speed = 3.75;\n\n        // Shift the scene's position based on the character's facing direction, if in a movement state.\n        if (spineBoy.state.walk) scene.positionX -= speed * scene.scale * spineBoy.direction;\n      });\n    }\n  }\n};","map":{"version":3,"names":["Application","Assets","SpineBoy","Controller","Scene","name","data","app","spine","spine2","spineData1","spineData2","mounted","initPixi","methods","init","background","resizeTo","window","document","body","appendChild","canvas","load","alias","src","controller","scene","screen","width","height","spineBoy","view","y","x","floorHeight","scale","set","stage","addChild","spawn","ticker","add","isSpawning","state","walk","keys","left","pressed","right","run","doubleTap","hover","down","direction","jump","space","update","speed","positionX"],"sources":["src/components/spine.vue"],"sourcesContent":["<template>\n    <div ref=\"pixiContainer\" class=\"pixi-container\"></div>\n  </template>\n  \n  <script>\nimport '@pixi/spine-pixi';\n\nimport { Application, Assets } from 'pixi.js';\nimport { SpineBoy } from './SpineBoy';\nimport { Controller } from './Controller';\nimport { Scene } from './Scene';\n  export default {\n    name: 'SpineWorld',\n    data() {\n      return {\n        app: null,\n        spine: null,\n        spine2: null,\n        spineData1: null,\n        spineData2: null\n      };\n    },\n    mounted() {\n      this.initPixi();\n    },\n   methods: {\n    async initPixi() {\n      // Create a PixiJS application.\n    const app = new Application();\n\n// Intialize the application.\nawait app.init({ background: '#1099bb', resizeTo: window });\n\n// Then adding the application's canvas to the DOM body.\ndocument.body.appendChild(app.canvas);\n\n// Load the assets.\nawait Assets.load([\n    {\n        alias: 'spineSkeleton',\n        src: 'https://raw.githubusercontent.com/pixijs/spine-v8/main/examples/assets/spineboy-pro.skel',\n    },\n    {\n        alias: 'spineAtlas',\n        src: 'https://raw.githubusercontent.com/pixijs/spine-v8/main/examples/assets/spineboy-pma.atlas',\n    },\n    {\n        alias: 'sky',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/sky.png',\n    },\n    {\n        alias: 'background',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/background.png',\n    },\n    {\n        alias: 'midground',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/midground.png',\n    },\n    {\n        alias: 'platform',\n        src: 'https://pixijs.com/assets/tutorials/spineboy-adventure/platform.png',\n    },\n]);\n\n// Create a controller that handles keyboard inputs.\nconst controller = new Controller();\n\n// Create a scene that holds the environment.\nconst scene = new Scene(app.screen.width, app.screen.height);\n\n// Create our character\nconst spineBoy = new SpineBoy();\n\n// Adjust views' transformation.\nscene.view.y = app.screen.height;\nspineBoy.view.x = app.screen.width / 2;\nspineBoy.view.y = app.screen.height - scene.floorHeight;\nspineBoy.spine.scale.set(scene.scale * 0.32);\n\n// Add scene and character to the stage.\napp.stage.addChild(scene.view, spineBoy.view);\n\n// Trigger character's spawn animation.\nspineBoy.spawn();       \n\n// Animate the scene and the character based on the controller's input.\napp.ticker.add(() =>\n{\n    // Ignore the update loops while the character is doing the spawn animation.\n    if (spineBoy.isSpawning()) return;\n\n    // Update character's state based on the controller's input.\n    spineBoy.state.walk = controller.keys.left.pressed || controller.keys.right.pressed;\n    if (spineBoy.state.run && spineBoy.state.walk) spineBoy.state.run = true;\n    else spineBoy.state.run = controller.keys.left.doubleTap || controller.keys.right.doubleTap;\n    spineBoy.state.hover = controller.keys.down.pressed;\n    if (controller.keys.left.pressed) spineBoy.direction = -1;\n    else if (controller.keys.right.pressed) spineBoy.direction = 1;\n    spineBoy.state.jump = controller.keys.space.pressed;\n\n    // Update character's animation based on the latest state.\n    spineBoy.update();\n\n    // Determine the scene's horizontal scrolling speed based on the character's state.\n    let speed = 1.25;\n\n    if (spineBoy.state.hover) speed = 7.5;\n    else if (spineBoy.state.run) speed = 3.75;\n\n    // Shift the scene's position based on the character's facing direction, if in a movement state.\n    if (spineBoy.state.walk) scene.positionX -= speed * scene.scale * spineBoy.direction;\n\n\n    })\n   }\n  }\n}\n  </script>\n  \n  <style scoped>\n  .pixi-container {\n    width: 100%;\n    height: 800px; /* Set the height according to your needs */\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}